***Anti-Pattern*** 
Count: 110
GET	 /answers/{ids} 	Plural Nouns Found in Consecutive Nodes	Gets the set of answers identified by ids. This is meant for batch fetching of questions. A useful trick to poll for updates is to sort by activity, with a minimum date of the last time you polled.
POST	 /answers/{id}/accept 	Singular Nouns Found in Consecutive Nodes	Accepts an answer. Use an access_token with write_access to accept. Accept votes can only be cast on answers to questions owned by the access_token's user, and only if no other answer is accepted.
POST	 /answers/{id}/accept/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an accept on an answer. Use an access_token with write_access to undo an upvote.
POST	 /answers/{id}/accept/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an accept on an answer. Use an access_token with write_access to undo an upvote.
GET	 /answers/{ids}/comments 	Plural Nouns Found in Consecutive Nodes	Gets the comments on a set of answers. If you know that you have an answer id and need the comments, use this method. If you know you have a question id, use /questions/{id}/comments. If you are unsure, use /posts/{id}/comments.
GET	 /answers/{ids}/comments 	Plural Nouns Found in Consecutive Nodes	Gets the comments on a set of answers. If you know that you have an answer id and need the comments, use this method. If you know you have a question id, use /questions/{id}/comments. If you are unsure, use /posts/{id}/comments.
POST	 /answers/{id}/delete 	Singular Nouns Found in Consecutive Nodes	Deletes an answer. Note that only answer owners can delete their answers, this is not equivalent to casting a delete vote. Also be aware that there are conditions when even an answer's owner cannot delete it, and this method will respect those limits. Use an access_token with write_access to delete an answer. It is not possible to undelete an answer via the API. In practice, this method will never return an object.
POST	 /answers/{id}/delete 	Controller is not a Verb	Deletes an answer. Note that only answer owners can delete their answers, this is not equivalent to casting a delete vote. Also be aware that there are conditions when even an answer's owner cannot delete it, and this method will respect those limits. Use an access_token with write_access to delete an answer. It is not possible to undelete an answer via the API. In practice, this method will never return an object.
POST	 /answers/{id}/downvote 	Singular Nouns Found in Consecutive Nodes	Downvotes an answer. Use an access_token with write_access to upvote. To undo a downvote on an answer use the /answers/{id}/downvote/undo method. This method returns the downvoted answer.
POST	 /answers/{id}/downvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an downvote on an answer. Use an access_token with write_access to undo an upvote. To downvote an answer use the /answers/{id}/downvote method. This method returns the un-downvoted answer.
POST	 /answers/{id}/downvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an downvote on an answer. Use an access_token with write_access to undo an upvote. To downvote an answer use the /answers/{id}/downvote method. This method returns the un-downvoted answer.
POST	 /answers/{id}/edit 	Singular Nouns Found in Consecutive Nodes	Edit an existing answer. Use an access_token with write_access to edit an existing answer. Stack Exchange sites take answer quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the edited answer.
POST	 /answers/{id}/edit 	Controller is not a Verb	Edit an existing answer. Use an access_token with write_access to edit an existing answer. Stack Exchange sites take answer quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the edited answer.
GET	 /answers/{id}/flags/options 	Plural Nouns Found in Consecutive Nodes	Returns the different flags that the user identified with an access_token can create for the answer identified by {id}. Available flags vary from post to post and user to user, an app should never assume a particular flag can be created without consulting this method. To flag an answer use the /answers/{id}/flags/add method. This method returns the available flag_options.
POST	 /answers/{id}/flags/add 	Controller is not a Verb	Casts a flag against the answer identified by id. The available flag_options on a answer are not constant, and must be fetched from /answers/{id}/flag/options. Use an access_token with write_access to create a flag. This method returns the answer being flagged.
GET	 /answers/{ids}/questions 	Plural Nouns Found in Consecutive Nodes	Returns the questions that answers identied by {ids} are on. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for answer_id on answer objects.
GET	 /answers/{ids}/questions 	Plural Nouns Found in Consecutive Nodes	Returns the questions that answers identied by {ids} are on. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for answer_id on answer objects.
POST	 /answers/{id}/upvote 	Singular Nouns Found in Consecutive Nodes	Upvotes an answer. Use an access_token with write_access to upvote. To undo an upvote on an answer use the /answers/{id}/upvote/undo method. This method returns the upvoted answer.
POST	 /answers/{id}/upvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an upvote on an answer. Use an access_token with write_access to undo an upvote. To upvote an answer use the /answers/{id}/upvote method. This method returns the un-upvoted answer.
POST	 /answers/{id}/upvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an upvote on an answer. Use an access_token with write_access to undo an upvote. To upvote an answer use the /answers/{id}/upvote method. This method returns the un-upvoted answer.
POST	 /answers/{id}/recommend 	Singular Nouns Found in Consecutive Nodes	Recommends an answer. Use an access_token with write_access and manage_collective_recommendations to undo recommend. To undo a recommendation on an answer use the /answers/{id}/recommend/undo method. This method returns the recommended answer.
POST	 /answers/{id}/recommend/undo 	Singular Nouns Found in Consecutive Nodes	Recommends an answer. Use an access_token with write_access and manage_collective_recommendations to undo recommend. This method returns the recommended answer.
POST	 /answers/{id}/recommend/undo 	Singular Nouns Found in Consecutive Nodes	Recommends an answer. Use an access_token with write_access and manage_collective_recommendations to undo recommend. This method returns the recommended answer.
POST	 /answers/{id}/suggested-edit/add 	Singular Nouns Found in Consecutive Nodes	Create a suggested_edit on an existing answer. Use an access_token with write_access to create a suggested_edit. Stack Exchange sites take question quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the new suggested_edit suggested_edit.
POST	 /answers/{id}/suggested-edit/add 	Singular Nouns Found in Consecutive Nodes	Create a suggested_edit on an existing answer. Use an access_token with write_access to create a suggested_edit. Stack Exchange sites take question quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the new suggested_edit suggested_edit.
POST	 /answers/{id}/suggested-edit/add 	Singular Nouns Found in Consecutive Nodes	Create a suggested_edit on an existing answer. Use an access_token with write_access to create a suggested_edit. Stack Exchange sites take question quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the new suggested_edit suggested_edit.
POST	 /answers/{id}/suggested-edit/add 	Controller is not a Verb	Create a suggested_edit on an existing answer. Use an access_token with write_access to create a suggested_edit. Stack Exchange sites take question quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the new suggested_edit suggested_edit.
GET	 /articles/{ids} 	Plural Nouns Found in Consecutive Nodes	Returns the articles identified in {ids}. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for article_id on article objects.
GET	 /articles/{ids}/linked 	Plural Nouns Found in Consecutive Nodes	Gets questions which are linked to those articles identified in {ids}. This method only considers questions that are linked within a site, and will never return questions from another Stack Exchange site. A question is considered "linked" if the article explicitly includes a hyperlink to that question. There are no other heuristics.
POST	 /articles/{id}/delete 	Singular Nouns Found in Consecutive Nodes	Deletes an article. Note that only article owners can delete their questions. Use an access_token with write_access to delete an article. It is not possible to undelete an article via the Stack Exchange API. In practice, this method will never return an object.
POST	 /articles/{id}/delete 	Controller is not a Verb	Deletes an article. Note that only article owners can delete their questions. Use an access_token with write_access to delete an article. It is not possible to undelete an article via the Stack Exchange API. In practice, this method will never return an object.
POST	 /articles/{id}/edit 	Singular Nouns Found in Consecutive Nodes	Edit an existing article. Use an access_token with write_access to edit an existing question. This method returns the edited article.
POST	 /articles/{id}/edit 	Controller is not a Verb	Edit an existing article. Use an access_token with write_access to edit an existing question. This method returns the edited article.
GET	 /badges/recipients 	Plural Nouns Found in Consecutive Nodes	Returns recently awarded badges in the system. As these badges have been awarded, they will have the badge.user property set. This method returns a list of badges.
GET	 /badges/tags 	Plural Nouns Found in Consecutive Nodes	Returns the badges that are awarded for participation in specific tags. For the rank sort, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze. rank is the default sort. This method returns a list of badges.
GET	 /collectives/{slugs} 	Plural Nouns Found in Consecutive Nodes	Returns Collective objects representing the Collectives in {slugs} found on the site. {slugs} can contain up to 20 semicolon delimited slugs.
GET	 /collectives/{slugs}/questions 	Plural Nouns Found in Consecutive Nodes	Returns the questions that are part of the Collective identified by {slugs}. A question is part of a Collective if it is tagged with a tag that is part of a Collective. {slugs} can contain up to 20 semicolon delimited slugs.
GET	 /collectives/{slugs}/questions 	Plural Nouns Found in Consecutive Nodes	Returns the questions that are part of the Collective identified by {slugs}. A question is part of a Collective if it is tagged with a tag that is part of a Collective. {slugs} can contain up to 20 semicolon delimited slugs.
GET	 /collectives/{slugs}/answers 	Plural Nouns Found in Consecutive Nodes	Returns answer objects belonging to Collectives in {slugs} found on the site. An answer is part of a Collective if it was recommended by a Collective or authored by a partner or admin Collective user. {slugs} can contain up to 20 semicolon delimited slugs.
GET	 /collectives/{slugs}/answers 	Plural Nouns Found in Consecutive Nodes	Returns answer objects belonging to Collectives in {slugs} found on the site. An answer is part of a Collective if it was recommended by a Collective or authored by a partner or admin Collective user. {slugs} can contain up to 20 semicolon delimited slugs.
GET	 /collectives/{slugs}/tags 	Plural Nouns Found in Consecutive Nodes	Returns tag objects belonging to the Collectives in {slugs} found on the site. {slugs} can contain up to 20 semicolon delimited slugs. This method returns a list of tags.
GET	 /collectives/{slugs}/tags 	Plural Nouns Found in Consecutive Nodes	Returns tag objects belonging to the Collectives in {slugs} found on the site. {slugs} can contain up to 20 semicolon delimited slugs. This method returns a list of tags.
GET	 /collectives/{slugs}/users 	Plural Nouns Found in Consecutive Nodes	Returns users objects who are members of the Collectives in {slugs}. {slugs} can contain up to 20 semicolon delimited slugs.
GET	 /collectives/{slugs}/users 	Plural Nouns Found in Consecutive Nodes	Returns users objects who are members of the Collectives in {slugs}. {slugs} can contain up to 20 semicolon delimited slugs.
GET	 /collectives/{slugs}/reports 	Plural Nouns Found in Consecutive Nodes	Returns Collective report objects that belong to Collectives in {slugs}. Use an access_token with manage_collective_reports|{slug} to get reports. {slugs} can contain up to 20 semicolon delimited slugs. This method returns a list of Collective reports.
GET	 /collectives/{slugs}/reports 	Plural Nouns Found in Consecutive Nodes	Returns Collective report objects that belong to Collectives in {slugs}. Use an access_token with manage_collective_reports|{slug} to get reports. {slugs} can contain up to 20 semicolon delimited slugs. This method returns a list of Collective reports.
POST	 /collectives/{slug}/reports/add 	Controller is not a Verb	Returns the newly created Collective report. The report types accepted by this method: user activity health. The dimensions accepted by report type. You cannot have dimension from more than one report type.
POST	 /comments/{id}/delete 	Singular Nouns Found in Consecutive Nodes	Deletes a comment. Use an access_token with write_access to delete a comment. In practice, this method will never return an object.
POST	 /comments/{id}/delete 	Controller is not a Verb	Deletes a comment. Use an access_token with write_access to delete a comment. In practice, this method will never return an object.
POST	 /comments/{id}/edit 	Singular Nouns Found in Consecutive Nodes	Edit an existing comment. Use an access_token with write_access to edit an existing comment. This method returns the edited comment.
POST	 /comments/{id}/edit 	Controller is not a Verb	Edit an existing comment. Use an access_token with write_access to edit an existing comment. This method returns the edited comment.
POST	 /comments/{id}/flags/add 	Controller is not a Verb	Casts a flag against the comment identified by id. The available flag_options on a comment are not constant, and must be fetched from /comments/{id}/flag/options. Use an access_token with write_access to create a flag. This method returns the comment being flagged.
GET	 /comments/{id}/flags/options 	Plural Nouns Found in Consecutive Nodes	Returns the different flags that the user identified with an access_token can create for the comment identified by {id}. Available flags vary from comment to comment and user to user, an app should never assume a particular flag can be created without consulting this method. To flag a comment use the /comments/{id}/flags/add method. This method returns the available flag_options.
POST	 /comments/{id}/upvote 	Singular Nouns Found in Consecutive Nodes	Upvotes a comment. Use an access_token with write_access to upvote. To undo an upvote on a comment use the /comments/{id}/upvote/undo method. This method returns the upvoted comment.
POST	 /comments/{id}/upvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an upvote on a comment. Use an access_token with write_access to undo an upvote. To upvote a comment use the /comments/{id}/upvote method. This method returns the un-upvoted comment.
POST	 /comments/{id}/upvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an upvote on a comment. Use an access_token with write_access to undo an upvote. To upvote a comment use the /comments/{id}/upvote method. This method returns the un-upvoted comment.
GET	 /posts/{ids}/comments 	Plural Nouns Found in Consecutive Nodes	Gets the comments on the posts identified in ids, regardless of the type of the posts. This method is meant for cases when you are unsure of the type of the post id provided. Generally, this would be due to obtaining the post id directly from a user. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.
GET	 /posts/{ids}/comments 	Plural Nouns Found in Consecutive Nodes	Gets the comments on the posts identified in ids, regardless of the type of the posts. This method is meant for cases when you are unsure of the type of the post id provided. Generally, this would be due to obtaining the post id directly from a user. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively.
POST	 /posts/{id}/comments/add 	Controller is not a Verb	Create a new comment. Use an access_token with write_access to create a new comment on a post. This method returns the created comment.
GET	 /posts/{ids}/suggested-edits 	Plural Nouns Found in Consecutive Nodes	Returns suggested edits on the posts identified in ids. creation – creation_date approval – approval_date rejection – rejection_date creation is the default sort. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for post_id, answer_id, or question_id on post, answer, and question objects respectively. This method returns a list of suggested-edits.
GET	 /questions/{ids}/answers 	Plural Nouns Found in Consecutive Nodes	Gets the answers to a set of questions identified in id. This method is most useful if you have a set of interesting questions, and you wish to obtain all of their answers at once or if you are polling for new or updates answers (in conjunction with sort=activity). {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for question_id on question objects.
GET	 /questions/{ids}/answers 	Plural Nouns Found in Consecutive Nodes	Gets the answers to a set of questions identified in id. This method is most useful if you have a set of interesting questions, and you wish to obtain all of their answers at once or if you are polling for new or updates answers (in conjunction with sort=activity). {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for question_id on question objects.
POST	 /questions/{id}/answers/add 	Controller is not a Verb	Create a new answer on the given question. Stack Exchange sites take answer quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. Use an access_token with write_access to create a new answer. This method returns the created answer.
GET	 /questions/{id}/close/options 	Singular Nouns Found in Consecutive Nodes	Returns the flag options that make up close reasons that the user identified with an access_token can create for this question. Available flags vary from post to post and user to user, an app should never assume a particular flag can be created without consulting this method. Conceptually, closing is a subset of flagging. To cast a "close vote" you use the /questions/{id}/flags/add method. This method returns the available flag_options.
POST	 /questions/{id}/delete 	Singular Nouns Found in Consecutive Nodes	Deletes a question. Note that only question owners can delete their questions, this is not equivalent to casting a delete vote. Also be aware that there are conditions when even a question's owner cannot delete it, and this method will respect those limits. Use an access_token with write_access to delete a question. It is not possible to undelete a question via the Stack Exchange API. In practice, this method will never return an object.
POST	 /questions/{id}/delete 	Controller is not a Verb	Deletes a question. Note that only question owners can delete their questions, this is not equivalent to casting a delete vote. Also be aware that there are conditions when even a question's owner cannot delete it, and this method will respect those limits. Use an access_token with write_access to delete a question. It is not possible to undelete a question via the Stack Exchange API. In practice, this method will never return an object.
POST	 /questions/{id}/downvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an downvote on a question. Use an access_token with write_access to undo an upvote. To downvote a question use the /questions/{id}/downvote method. This method returns the un-downvoted question.
POST	 /questions/{id}/downvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an downvote on a question. Use an access_token with write_access to undo an upvote. To downvote a question use the /questions/{id}/downvote method. This method returns the un-downvoted question.
POST	 /question/{id}/favorite/undo 	Singular Nouns Found in Consecutive Nodes	Unbookmarks a question. Previously known as "unfavoriting" a question. Use an access_token with write_access to unbookmark. To bookmark a question use the /questions/{id}/favorite method. This method returns the un-bookmarked question.
POST	 /question/{id}/favorite/undo 	Singular Nouns Found in Consecutive Nodes	Unbookmarks a question. Previously known as "unfavoriting" a question. Use an access_token with write_access to unbookmark. To bookmark a question use the /questions/{id}/favorite method. This method returns the un-bookmarked question.
POST	 /question/{id}/favorite/undo 	Singular Nouns Found in Consecutive Nodes	Unbookmarks a question. Previously known as "unfavoriting" a question. Use an access_token with write_access to unbookmark. To bookmark a question use the /questions/{id}/favorite method. This method returns the un-bookmarked question.
POST	 /questions/{id}/suggested-edit/add 	Singular Nouns Found in Consecutive Nodes	Create a suggested_edit on an existing question. Use an access_token with write_access to create a suggested_edit. Stack Exchange sites take question quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the new suggested_edit suggested_edit.
POST	 /questions/{id}/suggested-edit/add 	Singular Nouns Found in Consecutive Nodes	Create a suggested_edit on an existing question. Use an access_token with write_access to create a suggested_edit. Stack Exchange sites take question quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the new suggested_edit suggested_edit.
POST	 /questions/{id}/suggested-edit/add 	Singular Nouns Found in Consecutive Nodes	Create a suggested_edit on an existing question. Use an access_token with write_access to create a suggested_edit. Stack Exchange sites take question quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the new suggested_edit suggested_edit.
POST	 /questions/{id}/suggested-edit/add 	Controller is not a Verb	Create a suggested_edit on an existing question. Use an access_token with write_access to create a suggested_edit. Stack Exchange sites take question quality seriously, and many checks are run on the actual websites that can require various user actions be taken. In the API, any "low quality" checks that are triggered cause the write request to fail. This includes situations where a CAPTCHA or guidance text would be displayed on the websites. This method returns the new suggested_edit suggested_edit.
POST	 /question/{id}/upvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an upvote on a question. Use an access_token with write_access to undo an upvote. To upvote a question use the /questions/{id}/upvote method. This method returns the un-upvoted question.
POST	 /question/{id}/upvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an upvote on a question. Use an access_token with write_access to undo an upvote. To upvote a question use the /questions/{id}/upvote method. This method returns the un-upvoted question.
POST	 /question/{id}/upvote/undo 	Singular Nouns Found in Consecutive Nodes	Undoes an upvote on a question. Use an access_token with write_access to undo an upvote. To upvote a question use the /questions/{id}/upvote method. This method returns the un-upvoted question.
GET	 /questions/no-answers 	Plural Nouns Found in Consecutive Nodes	Returns questions which have received no answers. Compare with /questions/unanswered which merely returns questions that the sites consider insufficiently well answered.
GET	 /search/advanced 	Singular Nouns Found in Consecutive Nodes	Searches a site for any questions which fit the given criteria.
GET	 /tags/{tags}/info 	Plural Nouns Found in Consecutive Nodes	Returns tag objects representing the tags in {tags} found on the site. This method diverges from the standard naming patterns to avoid conflicting with existing methods, due to the free form nature of tag names. This method returns a list of tags.
GET	 /tags/{tags}/synonyms 	Plural Nouns Found in Consecutive Nodes	Gets all the synonyms that point to the tags identified in {tags}. If you're looking to discover all the tag synonyms on a site, use the /tags/synonyms methods instead of call this method on all tags. {tags} can contain up to 20 individual tags per request.
GET	 /tags/{tags}/synonyms 	Plural Nouns Found in Consecutive Nodes	Gets all the synonyms that point to the tags identified in {tags}. If you're looking to discover all the tag synonyms on a site, use the /tags/synonyms methods instead of call this method on all tags. {tags} can contain up to 20 individual tags per request.
GET	 /tags/{tag}/top-answerers/{period} 	Singular Nouns Found in Consecutive Nodes	Returns the top 20 answerers active in a single tag, of either all-time or the last 30 days. This is a view into the data presented on the tag info page for the site. This method returns a list of tag score objects.
GET	 /users/{ids}/badges 	Plural Nouns Found in Consecutive Nodes	Get the badges the users in {ids} have earned.
GET	 /users/{ids}/badges 	Plural Nouns Found in Consecutive Nodes	Get the badges the users in {ids} have earned.
GET	 /users/{id}/network-activity 	Singular Nouns Found in Consecutive Nodes	Returns a summary of a user's activity across the Stack Exchange network, given their account_id. You can filter the network_activity returned by this method with the types parameter. Specify, semicolon delimited, posts, badges, or comments to filter by type. This method returns a list of network_activity.
GET	 /users/{id}/network-activity 	Singular Nouns Found in Consecutive Nodes	Returns a summary of a user's activity across the Stack Exchange network, given their account_id. You can filter the network_activity returned by this method with the types parameter. Specify, semicolon delimited, posts, badges, or comments to filter by type. This method returns a list of network_activity.
GET	 /users/{ids}/questions/featured 	Plural Nouns Found in Consecutive Nodes	Gets the questions on which the users in {ids} have active bounties. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for user_id on user or shallow_user objects.
GET	 /users/{ids}/questions/featured 	Plural Nouns Found in Consecutive Nodes	Gets the questions on which the users in {ids} have active bounties. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for user_id on user or shallow_user objects.
GET	 /users/{ids}/questions/no-answers 	Plural Nouns Found in Consecutive Nodes	Gets the questions asked by the users in {ids} which have no answers. Questions returns by this method actually have zero undeleted answers. This route is completely disjoint from the /users/{ids}/questions/unanswered and /users/{ids}/questions/unaccepted routes, since those routes only return questions with at least one answer, subject to other contraints. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for user_id on user or shallow_user objects.
GET	 /users/{ids}/questions/no-answers 	Plural Nouns Found in Consecutive Nodes	Gets the questions asked by the users in {ids} which have no answers. Questions returns by this method actually have zero undeleted answers. This route is completely disjoint from the /users/{ids}/questions/unanswered and /users/{ids}/questions/unaccepted routes, since those routes only return questions with at least one answer, subject to other contraints. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for user_id on user or shallow_user objects.
GET	 /users/{ids}/questions/no-answers 	Plural Nouns Found in Consecutive Nodes	Gets the questions asked by the users in {ids} which have no answers. Questions returns by this method actually have zero undeleted answers. This route is completely disjoint from the /users/{ids}/questions/unanswered and /users/{ids}/questions/unaccepted routes, since those routes only return questions with at least one answer, subject to other contraints. {ids} can contain up to 100 semicolon delimited ids. To find ids programmatically look for user_id on user or shallow_user objects.
GET	 /users/{ids}/questions/unaccepted 	Plural Nouns Found in Consecutive Nodes	Gets the questions asked by the users in {ids} which have at least one answer, but no accepted answer. Questions returned by this method have answers, but the owner has not opted to accept any of them.
GET	 /users/{ids}/questions/unaccepted 	Plural Nouns Found in Consecutive Nodes	Gets the questions asked by the users in {ids} which have at least one answer, but no accepted answer. Questions returned by this method have answers, but the owner has not opted to accept any of them.
GET	 /users/{ids}/reputation 	Plural Nouns Found in Consecutive Nodes	Gets a subset of the reputation changes for users in {ids}. Reputation changes are intentionally scrubbed of some data to make it difficult to correlate votes on particular posts with user reputation changes. That being said, this method returns enough data for reasonable display of reputation trends.
GET	 /users/{ids}/reputation-history 	Plural Nouns Found in Consecutive Nodes	Returns users' public reputation history. This method returns a list of reputation_history.
GET	 /users/{ids}/reputation-history 	Singular Nouns Found in Consecutive Nodes	Returns users' public reputation history. This method returns a list of reputation_history.
GET	 /users/{id}/reputation-history/full 	Singular Nouns Found in Consecutive Nodes	Returns a user's full reputation history, including private events. This method requires an access_token, with a scope containing "private_info". This method returns a list of reputation_history.
GET	 /users/{id}/reputation-history/full 	Singular Nouns Found in Consecutive Nodes	Returns a user's full reputation history, including private events. This method requires an access_token, with a scope containing "private_info". This method returns a list of reputation_history.
GET	 /users/{id}/reputation-history/full 	Singular Nouns Found in Consecutive Nodes	Returns a user's full reputation history, including private events. This method requires an access_token, with a scope containing "private_info". This method returns a list of reputation_history.
GET	 /users/{id}/tags/{tags}/top-answers 	Plural Nouns Found in Consecutive Nodes	Returns the top 30 answers a user has posted in response to questions with the given tags. {id} can contain a single id, to find it programmatically look for user_id on user or shallow_user objects. {tags} is limited to 5 tags, passing more will result in an error.
GET	 /users/{id}/tags/{tags}/top-questions 	Plural Nouns Found in Consecutive Nodes	Returns the top 30 questions a user has asked with the given tags. {id} can contain a single id, to find it programmatically look for user_id on user or shallow_user objects. {tags} is limited to 5 tags, passing more will result in an error.
GET	 /users/{id}/tag-preferences/edit 	Singular Nouns Found in Consecutive Nodes	Edit a user's tag preferences. Use an access_token with write_access and private_info to edit a user's tag preferences. This method returns the edited tag_preferences.
GET	 /users/{id}/tag-preferences/edit 	Controller is not a Verb	Edit a user's tag preferences. Use an access_token with write_access and private_info to edit a user's tag preferences. This method returns the edited tag_preferences.
GET	 /users/{id}/top-answer-tags 	Singular Nouns Found in Consecutive Nodes	Returns a single user's top tags by answer score. This a subset of the data returned on a user's tags tab. {id} can contain a single id, to find it programmatically look for user_id on user or shallow_user objects. This method returns a list of top_tag objects.
GET	 /users/{id}/top-answer-tags 	Singular Nouns Found in Consecutive Nodes	Returns a single user's top tags by answer score. This a subset of the data returned on a user's tags tab. {id} can contain a single id, to find it programmatically look for user_id on user or shallow_user objects. This method returns a list of top_tag objects.
GET	 /users/moderators/elected 	Plural Nouns Found in Consecutive Nodes	Returns those users on a site who both have moderator powers, and were actually elected.
GET	 /users/{id}/inbox/unread 	Singular Nouns Found in Consecutive Nodes	Returns the unread items in a user's inbox. This method requires an access_token, with a scope containing "read_inbox". This method is effectively an alias for /inbox/unread. It is provided for consumers who make strong assumptions about operating within the context of a single site rather than the Stack Exchange network as a whole. {id} can contain a single id, to find it programmatically look for user_id on user or shallow_user objects. This method returns a list of inbox items.
GET	 /users/{id}/inbox/unread 	Singular Nouns Found in Consecutive Nodes	Returns the unread items in a user's inbox. This method requires an access_token, with a scope containing "read_inbox". This method is effectively an alias for /inbox/unread. It is provided for consumers who make strong assumptions about operating within the context of a single site rather than the Stack Exchange network as a whole. {id} can contain a single id, to find it programmatically look for user_id on user or shallow_user objects. This method returns a list of inbox items.

***Patterns*** 
Count: 12
GET	 /answers 	Cosistent Resource Archetype	Returns all the undeleted answers in the system.
GET	 /articles 	Cosistent Resource Archetype	Gets all the articles on the site. To constrain articles returned to those with a set of tags, use the tagged parameter with a semi-colon delimited list of tags. This is an and constraint, passing tagged=c;java will return only those articles with both tags. As such, passing more than 5 tags will always return zero results.
POST	 /articles/add 	Cosistent Resource Archetype	Create a new article. Use an access_token with write_access to create a new article. This method returns the created article.
GET	 /badges 	Cosistent Resource Archetype	Returns all the badges in the system. Badge sorts are a tad complicated. For the purposes of sorting (and min/max) tag_based is considered to be greater than named.
GET	 /badges/name 	Cosistent Resource Archetype	Gets all explicitly named badges in the system. A named badged stands in opposition to a tag-based badge. These are referred to as general badges on the sites themselves. For the rank sort, bronze is greater than silver which is greater than gold. Along with sort=rank, set max=gold for just gold badges, max=silver&min=silver for just silver, and min=bronze for just bronze. rank is the default sort. This method returns a list of badges.
POST	 /posts/{id}/comments/render 	Cosistent Resource Archetype	Render a comment given its body and the post it's on. This method is meant for previewing or otherwise "faking" a comment. No validation is done with this method, if you need validation you should use the create or edit methods. If an access_token is provided to this method, it will act as if that was creating the comment. Otherwise no user will be set as the returned answer's owner. This method returns the created comment.
POST	 /questions/{id}/answers/render 	Cosistent Resource Archetype	Render an answer given it's body and the question it's on. This method is meant for previewing or otherwise "faking" an answer. No validation is done with this method, if you need validation you should use the create or edit methods. If an access_token is provided to this method, it will act as if that was creating the answer. Otherwise no user will be set as the returned answer's owner. This method returns an answer.
GET	 /questions/featured 	Cosistent Resource Archetype	Returns all the questions with active bounties in the system.
GET	 /questions/unanswered/my-tags 	Cosistent Resource Archetype	Returns questions the site considers to be unanswered, which are within a user's favorite tags. If a user has not favorites, their frequented tags are used instead. Note that just because a question has an answer, that does not mean it is considered answered. While the rules are subject to change, at this time a question must have at least one upvoted answer to be considered answered. This method corresponds roughly with the unanswered ""my tags"" tab. This method request an access_token.
GET	 /search/excerpts 	Cosistent Resource Archetype	Searches a site for items which match the given criteria.
GET	 /users/{id}/notifications/unread 	Cosistent Resource Archetype	Returns a user's unread notifications. This method requires an access_token, with a scope containing "read_inbox". This method returns a list of notifications.
GET	 /users/{id}/privileges 	Cosistent Resource Archetype	Returns the privileges a user has. Applications are encouraged to calculate privileges themselves, without repeated queries to this method. A simple check against the results returned by /privileges and user.user_type would be sufficient. {id} can contain only a single, to find it programmatically look for user_id on user or shallow_user objects. This method returns a list of privileges.
