***Anti-Pattern*** 
Count: 74
GET	 /tweets/search/stream 	Singular Nouns Found in Consecutive Nodes	Streams Tweets in real-time based on a specific set of filter rules. If you are using the academic research product track, you can connect up to two redundant connections to maximize your streaming up-time.
GET	 /tweets/search/stream/rules 	Singular Nouns Found in Consecutive Nodes	Return a list of rules currently active on the streaming endpoint, either as a list or individually.
POST	 /tweets/search/stream/rules 	Singular Nouns Found in Consecutive Nodes	Add or delete rules to your stream. To create one or more rules, submit an add JSON body with an array of rules and operators. Similarly, to delete one or more rules, submit a delete JSON body with an array of list of existing rule IDs.
DELETE	 /users/:id/likes/:tweet_id 	Plural Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to unlike a Tweet. The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.
DELETE	 /users/:id/likes/:tweet_id 	Singular Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to unlike a Tweet. The request succeeds with no action when the user sends a request to a user they're not liking the Tweet or have already unliked the Tweet.
DELETE	 /users/:id/retweets/:source_tweet_id 	Plural Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to remove the Retweet of a Tweet. The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.
DELETE	 /users/:id/retweets/:source_tweet_id 	Singular Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to remove the Retweet of a Tweet. The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.
DELETE	 /users/:id/retweets/:source_tweet_id 	Singular Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to remove the Retweet of a Tweet. The request succeeds with no action when the user sends a request to a user they're not Retweeting the Tweet or have already removed the Retweet of.
GET	 /tweets/sample/stream 	Singular Nouns Found in Consecutive Nodes	Streams about 1% of all Tweets in real-time. If you are using the academic research product track, you can connect up to two redundant connections to maximize your streaming up-time.
GET	 /tweets/search/recent 	Singular Nouns Found in Consecutive Nodes	The recent search endpoint returns Tweets from the last seven days that match a search query.
GET	 /tweets/counts/recent 	Plural Nouns Found in Consecutive Nodes	The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a search query.
DELETE	 /users/:source_user_id/blocking/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to unblock another user. The request succeeds with no action when the user sends a request to a user they're not blocking or have already unblocked.
DELETE	 /users/:source_user_id/blocking/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to unblock another user. The request succeeds with no action when the user sends a request to a user they're not blocking or have already unblocked.
DELETE	 /users/:source_user_id/blocking/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to unblock another user. The request succeeds with no action when the user sends a request to a user they're not blocking or have already unblocked.
DELETE	 /users/:source_user_id/blocking/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to unblock another user. The request succeeds with no action when the user sends a request to a user they're not blocking or have already unblocked.
DELETE	 /users/:source_user_id/blocking/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user or authenticated user ID to unblock another user. The request succeeds with no action when the user sends a request to a user they're not blocking or have already unblocked.
DELETE	 /users/:source_user_id/following/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user ID to unfollow another user. The request succeeds with no action when the authenticated user sends a request to a user they're not following or have already unfollowed.
DELETE	 /users/:source_user_id/following/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user ID to unfollow another user. The request succeeds with no action when the authenticated user sends a request to a user they're not following or have already unfollowed.
DELETE	 /users/:source_user_id/following/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user ID to unfollow another user. The request succeeds with no action when the authenticated user sends a request to a user they're not following or have already unfollowed.
DELETE	 /users/:source_user_id/following/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user ID to unfollow another user. The request succeeds with no action when the authenticated user sends a request to a user they're not following or have already unfollowed.
DELETE	 /users/:source_user_id/following/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows a user ID to unfollow another user. The request succeeds with no action when the authenticated user sends a request to a user they're not following or have already unfollowed.
DELETE	 /users/:source_user_id/muting/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows an authenticated user ID to unmute the target user. The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.
DELETE	 /users/:source_user_id/muting/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows an authenticated user ID to unmute the target user. The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.
DELETE	 /users/:source_user_id/muting/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows an authenticated user ID to unmute the target user. The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.
DELETE	 /users/:source_user_id/muting/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows an authenticated user ID to unmute the target user. The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.
DELETE	 /users/:source_user_id/muting/:target_user_id 	Singular Nouns Found in Consecutive Nodes	Allows an authenticated user ID to unmute the target user. The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted.
GET	 /users/by/username/:username 	Singular Nouns Found in Consecutive Nodes	Returns a variety of information about one or more users specified by their usernames.
POST	 collections/entries/add 	Plural Nouns Found in Consecutive Nodes	Add a specified Tweet to a Collection. A collection will store up to a few thousand Tweets. Adding a Tweet to a collection beyond its allowed capacity will remove the oldest Tweet in the collection based on the time it was added to the collection.
POST	 collections/entries/add 	Controller is not a Verb	Add a specified Tweet to a Collection. A collection will store up to a few thousand Tweets. Adding a Tweet to a collection beyond its allowed capacity will remove the oldest Tweet in the collection based on the time it was added to the collection.
POST	 collections/entries/curate 	Plural Nouns Found in Consecutive Nodes	Curate a Collection by adding or removing Tweets in bulk. Updates must be limited to 100 cumulative additions or removals per request.
POST	 collections/entries/move 	Plural Nouns Found in Consecutive Nodes	Move a specified Tweet to a new position in a curation_reverse_chron ordered collection.
POST	 collections/entries/remove 	Plural Nouns Found in Consecutive Nodes	Remove the specified Tweet from a Collection.
POST	 collections/entries/remove 	Controller is not a Verb	Remove the specified Tweet from a Collection.
GET	 statuses/home_timeline 	Singular Nouns Found in Consecutive Nodes	Returns a collection of the most recent Tweets and Retweets posted by the authenticating user and the users they follow. The home timeline is central to how most users interact with the Twitter service. Up to 800 Tweets are obtainable on the home timeline. It is more volatile for users that follow many users or follow users who Tweet frequently.
GET	 statuses/mentions_timeline 	Plural Nouns Found in Consecutive Nodes	Returns the 20 most recent mentions (Tweets containing a users's @screen_name) for the authenticating user. The timeline returned is the equivalent of the one seen when you view your mentions on twitter.com. This method can only return up to 800 tweets.
GET	 statuses/user_timeline 	Singular Nouns Found in Consecutive Nodes	Returns a collection of the most recent Tweets posted by the user indicated by the screen_name or user_id parameters.  User timelines belonging to protected users may only be requested when the authenticated user either "owns" the timeline or is an approved follower of the owner. The timeline returned is the equivalent of the one seen as a user's profile on Twitter. This method can only return up to 3,200 of a user's most recent Tweets. Native retweets of other statuses by the user is included in this total, regardless of whether include_rts is set to false when requesting this resource.
GET	 lists/members/show 	Plural Nouns Found in Consecutive Nodes	Check if the specified user is a member of the specified list.
GET	 lists/subscribers/show 	Plural Nouns Found in Consecutive Nodes	Check if the specified user is a subscriber of the specified list. Returns the user if they are a subscriber.
POST	 lists/members/create 	Plural Nouns Found in Consecutive Nodes	Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists cannot have more than 5,000 members.
POST	 lists/members/create 	Controller is not a Verb	Add a member to a list. The authenticated user must own the list to be able to add members to it. Note that lists cannot have more than 5,000 members.
POST	 lists/members/create_all 	Plural Nouns Found in Consecutive Nodes	Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 5,000 members, and you are limited to adding up to 100 members to a list at a time with this method.
POST	 lists/members/create_all 	Controller is not a Verb	Adds multiple members to a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to add members to it. Note that lists can't have more than 5,000 members, and you are limited to adding up to 100 members to a list at a time with this method.
POST	 lists/members/destroy 	Plural Nouns Found in Consecutive Nodes	Removes the specified member from the list. The authenticated user must be the list's owner to remove members from the list.
POST	 lists/members/destroy_all 	Plural Nouns Found in Consecutive Nodes	Removes multiple members from a list, by specifying a comma-separated list of member ids or screen names. The authenticated user must own the list to be able to remove members from it. Note that lists can't have more than 500 members, and you are limited to removing up to 100 members to a list at a time with this method.
POST	 lists/subscribers/create 	Plural Nouns Found in Consecutive Nodes	Subscribes the authenticated user to the specified list.
POST	 lists/subscribers/create 	Controller is not a Verb	Subscribes the authenticated user to the specified list.
POST	 lists/subscribers/destroy 	Plural Nouns Found in Consecutive Nodes	Unsubscribes the authenticated user from the specified list.
GET	 friendships/no_retweets/ids 	Plural Nouns Found in Consecutive Nodes	Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.
GET	 friendships/no_retweets/ids 	Plural Nouns Found in Consecutive Nodes	Returns a collection of user_ids that the currently authenticated user does not want to receive retweets from.
GET	 account/verify_credentials 	Singular Nouns Found in Consecutive Nodes	Returns an HTTP 200 OK response code and a representation of the requesting user if authentication was successful; returns a 401 status code and an error message if not. Use this method to test if supplied user credentials are valid.
POST	 account/remove_profile_banner 	Singular Nouns Found in Consecutive Nodes	Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success.
POST	 account/remove_profile_banner 	Singular Nouns Found in Consecutive Nodes	Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success.
POST	 account/remove_profile_banner 	Singular Nouns Found in Consecutive Nodes	Removes the uploaded profile banner for the authenticating user. Returns HTTP 200 upon success.
POST	 account/update_profile 	Singular Nouns Found in Consecutive Nodes	Sets some values that users are able to set under the "Account" tab of their settings page. Only the parameters specified will be updated.
POST	 account/update_profile 	Singular Nouns Found in Consecutive Nodes	Sets some values that users are able to set under the "Account" tab of their settings page. Only the parameters specified will be updated.
POST	 account/update_profile_image 	Singular Nouns Found in Consecutive Nodes	Updates the authenticating user's profile image. Note that this method expects raw multipart data, not a URL to an image. This method asynchronously processes the uploaded file before updating the user's profile image URL. You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users / show.
POST	 account/update_profile_image 	Singular Nouns Found in Consecutive Nodes	Updates the authenticating user's profile image. Note that this method expects raw multipart data, not a URL to an image. This method asynchronously processes the uploaded file before updating the user's profile image URL. You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users / show.
POST	 account/update_profile_image 	Singular Nouns Found in Consecutive Nodes	Updates the authenticating user's profile image. Note that this method expects raw multipart data, not a URL to an image. This method asynchronously processes the uploaded file before updating the user's profile image URL. You can either update your local cache the next time you request the user's information, or, at least 5 seconds after uploading the image, ask for the updated URL using GET users / show.
POST	 saved_searches/create 	Controller is not a Verb	Create a new saved search for the authenticated user. A user may only have 25 saved searches.
DELETE	 direct_messages/events/destroy 	Plural Nouns Found in Consecutive Nodes	Deletes the direct message specified in the required ID parameter. The authenticating user must be the recipient of the specified direct message. Direct Messages are only removed from the interface of the user context provided. Other members of the conversation can still access the Direct Messages. A successful delete will return a 204 http response code with no body content.
GET	 direct_messages/events/list 	Plural Nouns Found in Consecutive Nodes	Returns all Direct Message events (both sent and received) within the last 30 days. Sorted in reverse-chronological order.
GET	 direct_messages/events/show 	Plural Nouns Found in Consecutive Nodes	Returns a single Direct Message event by the given id.
DELETE	 direct_messages/welcome_messages/rules/destroy 	Plural Nouns Found in Consecutive Nodes	Deletes a Welcome Message Rule by the given id.
POST	 direct_messages/mark_read 	Singular Nouns Found in Consecutive Nodes	Marks a message as read in the recipient’s Direct Message conversation view with the sender.
POST	 direct_messages/indicate_typing 	Singular Nouns Found in Consecutive Nodes	Displays a visual typing indicator in the recipient’s Direct Message conversation view with the sender. Each request triggers a typing indicator animation with a duration of ~3 seconds.
GET	 direct_messages/welcome_messages/rules/list 	Plural Nouns Found in Consecutive Nodes	Returns a list of Welcome Message Rules.
GET	 direct_messages/welcome_messages/rules/show 	Plural Nouns Found in Consecutive Nodes	Returns a Welcome Message Rule by the given id.
POST	 direct_messages/welcome_messages/rules/new 	Plural Nouns Found in Consecutive Nodes	Creates a new Welcome Message Rule that determines which Welcome Message will be shown in a given conversation. Returns the created rule if successful. Requires a JSON POST body and Content-Type header to be set to application/json. Setting Content-Length may also be required if it is not automatically.
POST	 oauth/invalidate_token 	Singular Nouns Found in Consecutive Nodes	Allows a registered application to revoke an issued OAuth access_token by presenting its client credentials. Once an access_token has been invalidated, new creation attempts will yield a different Access Token and usage of the invalidated token will no longer be allowed.
POST	 oauth/invalidate_token 	Singular Nouns Found in Consecutive Nodes	Allows a registered application to revoke an issued OAuth access_token by presenting its client credentials. Once an access_token has been invalidated, new creation attempts will yield a different Access Token and usage of the invalidated token will no longer be allowed.
POST	 oauth/request_token 	Singular Nouns Found in Consecutive Nodes	Allows a Consumer application to obtain an OAuth Request Token to request user authorization. This method fulfills Section 6.1 of the OAuth 1.0 authentication flow.
POST	 oauth/request_token 	Singular Nouns Found in Consecutive Nodes	Allows a Consumer application to obtain an OAuth Request Token to request user authorization. This method fulfills Section 6.1 of the OAuth 1.0 authentication flow.
POST	 oauth2/invalidate_token 	Singular Nouns Found in Consecutive Nodes	Allows a registered application to revoke an issued oAuth 2.0 Bearer Token by presenting its client credentials. Once a Bearer Token has been invalidated, new creation attempts will yield a different Bearer Token and usage of the invalidated token will no longer be allowed. Successful responses include a JSON-structure describing the revoked Bearer Token.
POST	 oauth2/invalidate_token 	Singular Nouns Found in Consecutive Nodes	Allows a registered application to revoke an issued oAuth 2.0 Bearer Token by presenting its client credentials. Once a Bearer Token has been invalidated, new creation attempts will yield a different Bearer Token and usage of the invalidated token will no longer be allowed. Successful responses include a JSON-structure describing the revoked Bearer Token.

***Patterns*** 
Count: 58
PUT	 /tweets/:id/hidden 	Cosistent Resource Archetype	Hides or unhides a reply to a Tweet.
GET	 /tweets/:id/liking_users 	Cosistent Resource Archetype	Allows you to get information about a Tweet’s liking users.
GET	 /users/:id/liked_tweets 	Cosistent Resource Archetype	Allows you to get information about a user’s liked Tweets.
POST	 /users/:id/likes 	Cosistent Resource Archetype	Causes the user ID identified in the path parameter to Like the target Tweet.
GET	 /tweets/:id/retweeted_by 	Cosistent Resource Archetype	Allows you to get information about who has Retweeted a Tweet.
POST	 /users/:id/retweets 	Cosistent Resource Archetype	Causes the user ID identified in the path parameter to Retweet the target Tweet.
GET	 /tweets/search/all 	Cosistent Resource Archetype	This endpoint is only available to those users who have been approved for the Academic Research product track. The full-archive search endpoint returns the complete history of public Tweets matching a search query; since the first Tweet was created March 26, 2006.
GET	 /users/:id/mentions 	Cosistent Resource Archetype	Returns Tweets mentioning a single user specified by the requested user ID. By default, the most recent ten Tweets are returned per request. Using pagination, up to the most recent 800 Tweets can be retrieved.
GET	 /users/:id/tweets 	Cosistent Resource Archetype	Returns Tweets composed by a single user, specified by the requested user ID. By default, the most recent ten Tweets are returned per request. Using pagination, the most recent 3,200 Tweets can be retrieved.
GET	 /tweets/counts/all 	Cosistent Resource Archetype	This endpoint is only available to those users who have been approved for the Academic Research product track. The full-archive search endpoint returns the complete history of public Tweets matching a search query; since the first Tweet was created March 26, 2006.
GET	 /tweets 	Cosistent Resource Archetype	Returns a variety of information about the Tweet specified by the requested ID or list of IDs.
GET	 /tweets/:id 	Cosistent Resource Archetype	Returns a variety of information about a single Tweet specified by the requested ID.
GET	 /users/:id/blocking 	Cosistent Resource Archetype	Returns a list of users who are blocked by the specified user ID.
POST	 /users/:id/blocking 	Cosistent Resource Archetype	Causes the user (in the path) to block the target user. The user (in the path) must match the user context authorizing the request.
GET	 /users/:id/followers 	Cosistent Resource Archetype	Returns a list of users who are followers of the specified user ID.
GET	 /users/:id/following 	Cosistent Resource Archetype	Returns a list of users the specified user ID is following.
POST	 /users/:id/following 	Cosistent Resource Archetype	Allows a user ID to follow another user. If the target user does not have public Tweets, this endpoint will send a follow request. The request succeeds with no action when the authenticated user sends a request to a user they're already following, or if they're sending a follower request to a user that does not have public Tweets.
POST	 /users/:id/muting 	Cosistent Resource Archetype	Allows an authenticated user ID to mute the target user.
GET	 /users 	Cosistent Resource Archetype	Returns a variety of information about one or more users specified by the requested IDs.
GET	 /users/:id 	Cosistent Resource Archetype	Returns a variety of information about a single user specified by the requested ID.
GET	 /users/by 	Cosistent Resource Archetype	Returns a variety of information about one or more users specified by their usernames.
GET	 collections/entries 	Cosistent Resource Archetype	Retrieve the identified Collection, presented as a list of the Tweets curated within. The response structure of this method differs significantly from timelines you may be used to working with elsewhere in the Twitter API. To navigate a Collection, use the position object of a response, which includes attributes for max_position, min_position, and was_truncated. was_truncated indicates whether additional Tweets exist in the collection outside of the range of the current request. To retrieve Tweets further back in time, use the value of min_position found in the current response as the max_position parameter in the next call to this endpoint.
GET	 collections/list 	Cosistent Resource Archetype	Find Collections created by a specific user or containing a specific curated Tweet. Results are organized in a cursored collection.
POST	 collections/create 	Cosistent Resource Archetype	Create a Collection owned by the currently authenticated user. The API endpoint may refuse to complete the request if the authenticated user has exceeded the total number of allowed collections for their account.
GET	 favorites/list 	Cosistent Resource Archetype	Returns the 20 most recent Tweets liked by the authenticating or specified user.
GET	 statuses/retweets_of_me 	Cosistent Resource Archetype	Returns the most recent Tweets authored by the authenticating user that have been retweeted by others. This timeline is a subset of the user's GET statuses / user_timeline.
POST	 statuses/destroy/:id 	Cosistent Resource Archetype	Destroys the status specified by the required ID parameter. The authenticating user must be the author of the specified status. Returns the destroyed status if successful.
POST	 statuses/update 	Cosistent Resource Archetype	Updates the authenticating user's current status, also known as Tweeting. For each update attempt, the update text is compared with the authenticating user's recent Tweets. Any attempt that would result in duplication will be blocked, resulting in a 403 error. A user cannot submit the same status twice in a row. While not rate limited by the API, a user is limited in the number of Tweets they can create at a time. If the number of updates posted by the user reaches the current allowed limit this method will return an HTTP 403 error.
GET	 lists/list 	Cosistent Resource Archetype	Returns all lists the authenticating or specified user subscribes to, including their own. The user is specified using the user_id or screen_name parameters. If no user is given, the authenticating user is used.
GET	 lists/members 	Cosistent Resource Archetype	Returns the members of the specified list. Private list members will only be shown if the authenticated user owns the specified list.
GET	 lists/memberships 	Cosistent Resource Archetype	Returns the lists the specified user has been added to. If user_id or screen_name are not provided, the memberships for the authenticating user are returned.
GET	 lists/ownerships 	Cosistent Resource Archetype	Returns the lists owned by the specified Twitter user. Private lists will only be shown if the authenticated user is also the owner of the lists.
GET	 lists/show 	Cosistent Resource Archetype	Returns the specified list. Private lists will only be shown if the authenticated user owns the specified list.
GET	 lists/statuses 	Cosistent Resource Archetype	Returns a timeline of tweets authored by members of the specified list. Retweets are included by default. Use the include_rts=false parameter to omit retweets.
GET	 lists/subscriptions 	Cosistent Resource Archetype	Obtain a collection of the lists the specified user is subscribed to, 20 lists per page by default. Does not include the user's own lists.
POST	 lists/create 	Cosistent Resource Archetype	Creates a new list for the authenticated user. Note that you can create up to 1000 lists per account.
GET	 followers/list 	Cosistent Resource Archetype	Returns a cursored collection of user objects for users following the specified user.
GET	 friends/list 	Cosistent Resource Archetype	Returns a cursored collection of user objects for every user the specified user is following (otherwise known as their "friends").
GET	 friendships/incoming 	Cosistent Resource Archetype	Returns a collection of numeric IDs for every user who has a pending request to follow the authenticating user.
GET	 friendships/outgoing 	Cosistent Resource Archetype	Returns a collection of numeric IDs for every protected user for whom the authenticating user has a pending follow request.
GET	 friendships/show 	Cosistent Resource Archetype	Returns detailed information about the relationship between two arbitrary users.
GET	 users/search 	Cosistent Resource Archetype	Provides a simple, relevance-based search interface to public user accounts on Twitter. Try querying by topical interest, full name, company name, location, or other criteria. Exact match searches are not supported. Only the first 1,000 matching results are available.
POST	 friendships/create 	Cosistent Resource Archetype	Allows the authenticating user to follow (friend) the user specified in the ID parameter. Returns the followed user when successful. Returns a string describing the failure condition when unsuccessful. If the user is already friends with the user a HTTP 403 may be returned, though for performance reasons this method may also return a HTTP 200 OK message even if the follow relationship already exists. Actions taken in this method are asynchronous. Changes will be eventually consistent.
POST	 friendships/destroy 	Cosistent Resource Archetype	Allows the authenticating user to unfollow the user specified in the ID parameter. Returns the unfollowed user when successful. Returns a string describing the failure condition when unsuccessful. Actions taken in this method are asynchronous. Changes will be eventually consistent.
GET	 account/settings 	Cosistent Resource Archetype	Returns settings (including current trend, geo and sleep time information) for the authenticating user.
GET	 saved_searches/show/:id 	Cosistent Resource Archetype	Retrieve the information for the saved search represented by the given id. The authenticating user must be the owner of saved search ID being requested.
POST	 account/settings 	Cosistent Resource Archetype	Updates the authenticating user's settings.
POST	 saved_searches/destroy/:id 	Cosistent Resource Archetype	Destroys a saved search for the authenticating user. The authenticating user must be the owner of saved search id being destroyed.
DELETE	 custom_profiles/destroy.json 	Cosistent Resource Archetype	Deletes a custom profile that was created with POST custom_profiles/new.json.
GET	 custom_profiles/:id 	Cosistent Resource Archetype	Returns a custom profile that was created with POST custom_profiles/new.json.
GET	 custom_profiles/list 	Cosistent Resource Archetype	Retrieves all custom profiles for the authenticated account. Default page size is 20.
POST	 custom_profiles/new.json 	Cosistent Resource Archetype	Creates a new custom profile. The returned ID should be used with when publishing a new message with POST direct_messages/events/new.
DELETE	 direct_messages/welcome_messages/destroy 	Cosistent Resource Archetype	Deletes a Welcome Message by the given id.
GET	 direct_messages/welcome_messages/list 	Cosistent Resource Archetype	Returns a list of Welcome Messages.
GET	 direct_messages/welcome_messages/show 	Cosistent Resource Archetype	Returns a Welcome Message by the given id.
POST	 direct_messages/welcome_messages/new 	Cosistent Resource Archetype	Creates a new Welcome Message that will be stored and sent in the future from the authenticating user in defined circumstances. Returns the message template if successful. Supports publishing with the same elements as Direct Messages (e.g. Quick Replies, media attachments). Requires a JSON POST body and Content-Type header to be set to application/json. Setting Content-Length may also be required if it is not automatically.
POST	 oauth/access_token 	Cosistent Resource Archetype	Allows a Consumer application to exchange the OAuth Request Token for an OAuth Access Token. This method fulfills Section 6.3 of the OAuth 1.0 authentication flow.
POST	 oauth2/token 	Cosistent Resource Archetype	Allows a registered application to obtain an OAuth 2 Bearer Token, which can be used to make API requests on an application's own behalf, without a user context. This is called Application-only authentication. A Bearer Token may be invalidated using oauth2/invalidate_token. Once a Bearer Token has been invalidated, new creation attempts will yield a different Bearer Token and usage of the previous token will no longer be allowed. Only one bearer token may exist outstanding for an application, and repeated requests to this method will yield the same already-existent token until it has been invalidated. Successful responses include a JSON-structure describing the awarded Bearer Token. Tokens received by this method should be cached. If attempted too frequently, requests will be rejected with a HTTP 403 with code 99.
