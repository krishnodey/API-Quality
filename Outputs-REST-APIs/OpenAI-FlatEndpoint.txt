***Anti-Pattern*** 
Count: 0

***Patterns*** 
Count: 67
POST	 /v1/audio/speech 	Structed Endpoint	Generates audio from the input text.
POST	 /v1/audio/transcriptions 	Structed Endpoint	Transcribes audio into the input language.
POST	 /v1/audio/translations 	Structed Endpoint	Translates audio into English.
POST	 /v1/chat/completions 	Structed Endpoint	Creates a model response for the given chat conversation.
POST	 /v1/embeddings 	Structed Endpoint	Creates an embedding vector representing the input text.
POST	 /v1/fine_tuning/jobs 	Structed Endpoint	Creates a fine-tuning job which begins the process of creating a new model from a given dataset.
GET	 /v1/fine_tuning/jobs 	Structed Endpoint	List your organization's fine-tuning jobs
GET	 /v1/fine_tuning/jobs/{fine_tuning_job_id}/events 	Structed Endpoint	Get status updates for a fine-tuning job.
GET	 /v1/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints 	Structed Endpoint	List checkpoints for a fine-tuning job.
GET	 /v1/fine_tuning/jobs/{fine_tuning_job_id} 	Structed Endpoint	Get info about a fine-tuning job.
POST	 /v1/fine_tuning/jobs/{fine_tuning_job_id}/cancel 	Structed Endpoint	Immediately cancel a fine-tune job.
POST	 /v1/batches 	Structed Endpoint	Creates and executes a batch from an uploaded file of requests
GET	 /v1/batches/{batch_id} 	Structed Endpoint	Retrieves a batch.
POST	 /v1/batches/{batch_id}/cancel 	Structed Endpoint	Cancels an in-progress batch. The batch will be in status cancelling for up to 10 minutes, before changing to cancelled, where it will have partial results (if any) available in the output file
GET	 /v1/batches 	Structed Endpoint	List your organization's batches.
POST	 /v1/files 	Structed Endpoint	Upload a file that can be used across various endpoints. Individual files can be up to 512 MB, and the size of all files uploaded by one organization can be up to 100 GB.
GET	 /v1/files 	Structed Endpoint	Returns a list of files that belong to the user's organization.
GET	 /v1/files/{file_id} 	Structed Endpoint	Returns information about a specific file.
DELETE	 /v1/files/{file_id} 	Structed Endpoint	Delete a file.
GET	 /v1/files/{file_id}/content 	Structed Endpoint	Returns the contents of the specified file.
POST	 /v1/uploads 	Structed Endpoint	Creates an intermediate Upload object that you can add Parts to. Currently, an Upload can accept at most 8 GB in total and expires after an hour after you create it.
POST	 /v1/uploads/{upload_id}/parts 	Structed Endpoint	Adds a Part to an Upload object. A Part represents a chunk of bytes from the file you are trying to upload. Each Part can be at most 64 MB, and you can add Parts until you hit the Upload maximum of 8 GB.
POST	 /v1/uploads/{upload_id}/complete 	Structed Endpoint	Completes the Upload. Within the returned Upload object, there is a nested File object that is ready to use in the rest of the platform. You can specify the order of the Parts by passing in an ordered list of the Part IDs.
POST	 /v1/uploads/{upload_id}/cancel 	Structed Endpoint	Cancels the Upload. No Parts may be added after an Upload is cancelled.
POST	 /v1/images/generations 	Structed Endpoint	Creates an image given a prompt.
POST	 /v1/images/edits 	Structed Endpoint	Creates an edited or extended image given an original image and a prompt.
POST	 /v1/images/variations 	Structed Endpoint	Creates a variation of a given image.
GET	 /v1/models 	Structed Endpoint	Lists the currently available models, and provides basic information about each one such as the owner and availability.
GET	 /v1/models/{model} 	Structed Endpoint	Retrieves a model instance, providing basic information about the model such as the owner and permissioning.
DELETE	 /v1/models/{model} 	Structed Endpoint	Delete a fine-tuned model. You must have the Owner role in your organization to delete a model.
POST	 /v1/moderations 	Structed Endpoint	Classifies if text is potentially harmful.
POST	 /v1/assistants 	Structed Endpoint	Create an assistant with a model and instructions.
GET	 /v1/assistants 	Structed Endpoint	Returns a list of assistants.
GET	 /v1/assistants/{assistant_id} 	Structed Endpoint	Retrieves an assistant.
POST	 /v1/assistants/{assistant_id} 	Structed Endpoint	Modifies an assistant.
DELETE	 /v1/assistants/{assistant_id} 	Structed Endpoint	Delete an assistant.
POST	 /v1/threads 	Structed Endpoint	Create a thread.
GET	 /v1/threads/{thread_id} 	Structed Endpoint	Retrieves a thread.
POST	 /v1/threads/{thread_id} 	Structed Endpoint	Modifies a thread.
DELETE	 /v1/threads/{thread_id} 	Structed Endpoint	Delete a thread.
POST	 /v1/threads/{thread_id}/messages 	Structed Endpoint	Create a message.
GET	 /v1/threads/{thread_id}/messages 	Structed Endpoint	Returns a list of messages for a given thread.
GET	 /v1/threads/{thread_id}/messages/{message_id} 	Structed Endpoint	Retrieve a message.
POST	 /v1/threads/{thread_id}/messages/{message_id} 	Structed Endpoint	Modifies a message.
DELETE	 /v1/threads/{thread_id}/messages/{message_id} 	Structed Endpoint	Deletes a message.
POST	 /v1/threads/{thread_id}/runs 	Structed Endpoint	Create a run.
POST	 /v1/threads/runs 	Structed Endpoint	Create a thread and run it in one request.
GET	 /v1/threads/{thread_id}/runs 	Structed Endpoint	Returns a list of runs belonging to a thread.
GET	 /v1/threads/{thread_id}/runs/{run_id} 	Structed Endpoint	Retrieves a run.
POST	 /v1/threads/{thread_id}/runs/{run_id} 	Structed Endpoint	Modifies a run.
POST	 /v1/threads/{thread_id}/runs/{run_id}/submit_tool_outputs 	Structed Endpoint	When a run has the status: "requires_action" and required_action.type is submit_tool_outputs, this endpoint can be used to submit the outputs from the tool calls once they're all completed. All outputs must be submitted in a single request.
POST	 /v1/threads/{thread_id}/runs/{run_id}/cancel 	Structed Endpoint	Cancels a run that is in_progress.
GET	 /v1/threads/{thread_id}/runs/{run_id}/steps 	Structed Endpoint	Returns a list of run steps belonging to a run.
GET	 /v1/threads/{thread_id}/runs/{run_id}/steps/{step_id} 	Structed Endpoint	Retrieves a run step.
POST	 /v1/vector_stores 	Structed Endpoint	Create a vector store.
GET	 /v1/vector_stores 	Structed Endpoint	Returns a list of vector stores.
GET	 /v1/vector_stores/{vector_store_id} 	Structed Endpoint	Retrieves a vector store.
POST	 /v1/vector_stores/{vector_store_id} 	Structed Endpoint	Modifies a vector store.
DELETE	 /v1/vector_stores/{vector_store_id} 	Structed Endpoint	Delete a vector store.
POST	 /v1/vector_stores/{vector_store_id}/files 	Structed Endpoint	Create a vector store file by attaching a File to a vector store.
GET	 /v1/vector_stores/{vector_store_id}/files 	Structed Endpoint	Returns a list of vector store files.
GET	 /v1/vector_stores/{vector_store_id}/files/{file_id} 	Structed Endpoint	Retrieves a vector store file.
DELETE	 /v1/vector_stores/{vector_store_id}/files/{file_id} 	Structed Endpoint	Delete a vector store file. This will remove the file from the vector store but the file itself will not be deleted. To delete the file, use the delete file endpoint.
POST	 /v1/vector_stores/{vector_store_id}/file_batches 	Structed Endpoint	Create a vector store file batch.
GET	 /v1/vector_stores/{vector_store_id}/file_batches/{batch_id} 	Structed Endpoint	Retrieves a vector store file batch.
POST	 /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}/cancel 	Structed Endpoint	Cancel a vector store file batch. This attempts to cancel the processing of files in this batch as soon as possible.
GET	 /v1/vector_stores/{vector_store_id}/file_batches/{batch_id}/files 	Structed Endpoint	Returns a list of vector store files in a batch.
