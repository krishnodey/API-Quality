
1. Tidy vs. Amorphous (done)

AMORPHOUS-URI(Request-URI):
    if uppercase or underscore or trailing_slash or File-Extensions Є Request-URI 
        retrun 'Amorphous URI' antipattern
    end if
    retrun 'Tidy URI' pattern



2. ContextLess and Contextual

CONTEXTLESS-RESOURCE (Request-URI, API-Documentation) 
    TopicsModel <- EXTRACT-TOPICS (API-Documentation) 
    URINodes <- EXTRACT-URI-NODES (Request-URI)
    Similarity-Value <- CALCULATE-COSINE-SIMILARITY-SCORE (URINodes, TopicsModel) 
    if Similarity-Value < threshold
        return 'ContextLess Resource Names' antipattern
    end if
    return 'Contextual Resource Names' pattern



3. Versioned vs unversioned

UNVERSIONED-URI(Request-URI):
    if Version-Information Є Request-URI
        retrun 'Versioned URI' pattern
    end if
    return 'Unversioned URI' antipattern 
    



4. Inconsistent Documentation

INCONSISTENT-DOCUMENTATION(HTTP-Method, Request-URI, Documentation) 
    Documentation <- REMOVE-STOP-WORDS (Documentation)
    Tokens <- TOKENISE (Documentation)
    if HTTP-Method = 'POST' and SYNONYMS (Delete or Update or Get) Є Tokens
        return "Inconsistent Documentation" antipattern
    else if HTTP-Method = 'DELETE' and SYNONYMS (Create or Update or Get) Є Tokens
        return "Inconsistent Documentation" antipattern
    else if HTTP-Method = 'PUT' and SYNONYMS (Create or Delete or Get) Є Tokens
        return "Inconsistent Documentation" antipattern
    else if HTTP-Method = 'GET' and SYNONYMS (Delete or Update or Create) Є Tokens 
	    return "Inconsistent Documentation" antipattern
    endif 
    return "Consistent Documentation" pattern
    


5. Pertinent vs Non-pertinent Documentation (Not complete)

NON-PERTINENT-DOCUMENTATION(Request-URI, Documentation):
    Documentation <- REMOVE-STOP-WORDS (Documentation)
    Tokens <- LEMMATISE-TOKENISE (Documentation)
    TopicsModel <- EXTRACT-TOPICS (API-Documentation)
    URINodes <- EXTRACT-URI-NODES (Request-URI)
    Similarity-Value <- CALCULATE-COSINE-SIMILARITY-SCORE (URINodes, TopicsModel)
    if Similarity-Value < threshold
        retrun 'Non-Pertinent Documentation' (Anti-Pattern)
    endif
    retrun "Pertinent Documentation" (Pattern)



6. Pluralised vs Singularised


PLURALISED-NODES(Request-URI, HTTP-Mehtod)   
    Last-Node <- Extract-Last-Node(Request-URI)
    if HTTP-Method = 'PUT' or 'DELETE' and Last-Node is Singular
        return 'Singularized Nodes' pattern
    else if HTTP-Method = 'POST' and Last-Node is Plural
        retrun 'Singularized Nodes' pattern
    end if
    return 'Pluralized Nodes' antipattern


7. Hierarchical Nodes vs Non-hierarchical Nodes (Not complete)

NonHierarchicalNodes(Request-URI):   
    Nodes <- Split(Request-URI)     
    Relationship_Type <- Hierarchical-Metrics(Nodes)
    if Relationship_Type not in Reversed-Hierarchy
	    return 'Hierarchical' pattern
    end if
    retunr 'Non-Hierarchical' pattern
                       

8. CRUDY Verb vs Verbless

CRUDy-URI(Request-URI, HTTP-Verb):
    if Crudywords Є Request-URI 
        return 'CRUDY URI' antipattern
    end if
    return 'Vebrless URI' pattern
   
    


9. Standard vs Non-Standard

NON-STANDARD-RESOURCE(Request-URI):
    if Non-English-Characters or Space or Double-Hyphens or Unknown-Characters Є Rquest-URI
        retrun 'Non-Standard URI' antipattern
    end if
    retrun 'Standard URI' pattern
   

    

10. Non descriptive URI

NON-DESCRIPTIVE-RESOURCE(Request-URI)
    Nodes <- Break-Down-Compound-Words(Request-URI)
    Nodes <- Abbribriate-Acronyms(Nodes)
    hasValidWord = False
    For each word in nodes:
        If PerformWordLookup(word):
            hasValidWord = hasValidWord or True
        else 
            hasValidWord = hasValidWord or False
    if hasValidWord:
        retrun 'Descriptive-URI' antipattern
    endif
    retrun 'Non-Descriptive-URI' antipattern


11. Use of query and path parameters in uris

Non-SPF-URI(Request-URI)
    keywords <- [sort, page, pageSize, type]
    if "?" and keywords not in Request-URI:
        return 'Non-Filtering-URI' antipattern
    endif


12. Doucment should be singular/noun, Collections and store should be pluarl, Controller should be a verb.

Improper-POS(Request-URI)
    Nodes <- Split(Request-URI)
    Documnet, Collections, Store, Controller <- CatagorizeNodes(Nodes)
    if Doucment is not singular:
        return 'antipattern'
    elseif Collections and Store not pluarl:
        retrun 'antipattern'
    elseif Controller not Verb:
        retrun antipattern
    endif

13. Tunneling of Parameters (When to use Parameters vs. Query Parameters)

PARAMETERS_TUNNELING(Request-URI, Documentation):
    Documentation <- REMOVE-STOP-WORDS (Documentation)
    Tokens <- LEMMATISE-TOKENISE (Documentation)
    Intention <- Extract-Intention(API-Documentation)
    if Intention is Sorting or Filtering or Pagination and "?" in Request_URI:
        return 'pattern'
    elseif Intention is Delete or Update and "?" not in Request-URI:
        return 'pattern'
    else:
        return Parameters_Tunneling'antipattern'
    