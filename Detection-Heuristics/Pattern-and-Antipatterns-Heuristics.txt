
1. Amorphous vs. Tidy

AMORPHOUS-ENDPOINT(Request-Endpoint):
    if uppercase or underscore or trailing_slash or File-Extensions Є Request-Endpoint 
        retrun 'Amorphous Endpoint' antipattern
    end if
    retrun 'Tidy Endpoint' pattern

2. ContextLess and Contextual

CONTEXTLESS-RESOURCE (Request-Endpoint, API-Documentation) 
    TopicsModel <- EXTRACT-TOPICS (API-Documentation) 
    EndpointNodes <- EXTRACT-Endpoint-NODES (Request-Endpoint)
    Similarity-Value <- CALCULATE-COSINE-SIMILARITY-SCORE (EndpointNodes, TopicsModel) 
    if Similarity-Value < threshold
        return 'ContextLess Resource Names' antipattern
    end if
    return 'Contextual Resource Names' pattern


3. CRUDY Verb vs Verbless Endpoint

CRUDy-ENDPOINT(Request-Endpoint, HTTP-Verb):
    if Crudywords Є Request-Endpoint 
        return 'CRUDY Endpoint' antipattern
    end if
    return 'Vebrless Endpoint' pattern
    

4. Inconsistent vs Consistent Documentation

INCONSISTENT-DOCUMENTATION(HTTP-Method, Request-Endpoint, Documentation) 
    Documentation <- REMOVE-STOP-WORDS (Documentation)
    Tokens <- TOKENISE (Documentation)
    if HTTP-Method = 'POST' and SYNONYMS (Delete or Update or Get) Є Tokens
        return "Inconsistent Documentation" antipattern
    else if HTTP-Method = 'DELETE' and SYNONYMS (Create or Update or Get) Є Tokens
        return "Inconsistent Documentation" antipattern
    else if HTTP-Method = 'PUT' and SYNONYMS (Create or Delete or Get) Є Tokens
        return "Inconsistent Documentation" antipattern
    else if HTTP-Method = 'GET' and SYNONYMS (Delete or Update or Create) Є Tokens 
	    return "Inconsistent Documentation" antipattern
    endif 
    return "Consistent Documentation" pattern
    

5. Non-descriptive vs. Descriptive Endpoint

NON-DESCRIPTIVE-RESOURCE(Request-Endpoint)
    Nodes <- Break-Down-Compound-Words(Request-Endpoint)
    Nodes <- Abbribriate-Acronyms(Nodes)
    hasValidWord = False
    For each word in nodes:
        If PerformWordLookup(word):
            hasValidWord = hasValidWord or True
        else 
            hasValidWord = hasValidWord or False
    if hasValidWord:
        retrun 'Descriptive-Endpoint' antipattern
    endif
    retrun 'Non-Descriptive-Endpoint' pattern



6. Non-hierarchical vs Hierarchical Nodes (Not complete)

NonHierarchicalNodes(Request-Endpoint):   
    Nodes <- Split(Request-Endpoint)     
    Relationship_Type <- Hierarchical-Metrics(Nodes)
    if Relationship_Type not in Reversed-Hierarchy
	    return 'Hierarchical' pattern
    end if
    retunr 'Non-Hierarchical' pattern
                       


7. Non-pertinent vs Pertinent Documentation

NON-PERTINENT-DOCUMENTATION(Request-Endpoint, Documentation):
    Documentation <- REMOVE-STOP-WORDS (Documentation)
    Tokens <- LEMMATISE-TOKENISE (Documentation)
    TopicsModel <- EXTRACT-TOPICS (API-Documentation)
    EndpointNodes <- EXTRACT-Endpoint-NODES (Request-Endpoint)
    Similarity-Value <- CALCULATE-COSINE-SIMILARITY-SCORE (EndpointNodes, TopicsModel)
    if Similarity-Value < threshold
        retrun 'Non-Pertinent Documentation' (Anti-Pattern)
    endif
    retrun "Pertinent Documentation" (Pattern)

8. Non-Standard vs Standard

NON-STANDARD-RESOURCE(Request-Endpoint):
    if Non-English-Characters or Space or Double-Hyphens or Unknown-Characters Є Rquest-Endpoint
        retrun 'Non-Standard Endpoint' antipattern
    end if
    retrun 'Standard Endpoint' pattern

9. Pluralized vs Singularized

PLURALIZED-NODES(Request-Endpoint, HTTP-Mehtod)   
    Last-Node <- Extract-Last-Node(Request-Endpoint)
    if HTTP-Method = 'PUT' or 'DELETE' and Last-Node is Singular
        return 'Singularized Nodes' pattern
    else if HTTP-Method = 'POST' and Last-Node is Plural
        retrun 'Singularized Nodes' pattern
    end if
    return 'Pluralized Nodes' antipattern
   

10. Versioned vs unversioned

UNVERSIONED-ENDPOINT(Request-Endpoint):
    if Version-Information Є Request-Endpoint
        retrun 'Versioned Endpoint' pattern
    end if
    return 'Unversioned Endpoint' antipattern 


11. Non Filtering vs Filtering Endpoint (Use of query and path parameters in Endpoints)

NON-FILTERING-ENDPOINT(HTTP-Method, Request-Endpoint)
    Intention <- Extract-Intention(API-Documentation)
    FetchIntention <- "Fetch" or "Return" in Intention
    HasParam <- Parameter in Request-Endpoint
    if (FetchIntention and not HasParam) or (not FetchIntention and HasParam):
        return 'Non-Filtering Endpoint' antipattern
    elseif FetchIntention and HasParam:
        return 'Filtering Endpoint' pattern
    endif


12. Parameters Tunneling vs Parameters Adherence (When to use Path-Parameters vs. Query-Parameters)
    
PARAMETERS-TUNNELING(Request-Endpoint, API-Documentation):
    Intention <- Extract-Intention(API-Documentation)
    HasQueryParam <- Query Parameter in Request-Endpoint
    HasPathParam <- Path Parameter in Request-Endpoint
    SortIntention <- Intention in ["Sorting", "Filtering", "Pagination"]
    IdentifyIntention <- Intention in ["Delete", "Update", 'Get', 'Fetch', 'Return']

    if HasQueryParam and SortIntention:
        return 'Parameter Adherence' pattern
    elseif HasPathParam and IdentifyIntention:
        return 'Parameter Adherence' pattern
    elseif (HasQueryParam and IdentifyIntention) or (HasPathPram and SortIntention) :
        return 'Parameters Tunneling' antipattern
    elseif (Intention and not HasParam) or (not Intention and HasParam))
        return 'Parameters Tunneling' antipattern
    endif
    

13. Inconsistent vs Consistent Resource Archetype Names (Doucment should be singular noun and Collections should be plural)

INCONSISTENT_ARCHETYPE(Request-Endpoint)
    Nodes <- Split(Request-Endpoint)
    Document, Collections <- CatagorizeNodes(Nodes)
    if Document is singular:
        return 'Consistent Resource Archetype' pattern
    elseif Collections or Stores are plural:
        return 'Consistent Resource Archetype' pattern
    elseif Controller is Verb:  
        return 'Consistent Resource Archetype' pattern
    endif
    return 'Inconsistent Resource Archetype' antipattern
    

14. Identifier Ambiguity vs Identifier Annotation

IDENTIFIER_AMBIGUITY(Request-Endpoint)
	Indentifier -> Extract_Identifiers(Request-Endpoint)
	if Indentifier enclosed in "{}" or "<>" or starts with ":":
		return  "Identifier Annotation" pattern
	endif
	return "Identifier Ambiguity" antipattern


15. Flat vs Structured Endpoint
FLAT_ENDPOINT(Request-Endpoint) 
    Nodes <- Split(Request-Endpoint) on "/"
    for each Node in Nodes:
        SplittedNodes <- Split(Node)
        if SplittedNodes > 2: 
            return "Flat Endpoint" antipattern
        endif
    endfor
    retrun "Structured Endpoint" pattern    


