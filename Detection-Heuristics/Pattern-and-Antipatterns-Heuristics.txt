
1. Amorphous vs. Tidy

AMORPHOUS-ENDPOINT(Request-Endpoint):
    if uppercase or underscore or trailing_slash or File-Extensions Є Request-Endpoint 
        retrun 'Amorphous Endpoint' antipattern
    end if
    retrun 'Tidy Endpoint' pattern

2. ContextLess and Contextual

CONTEXTLESS-RESOURCE (Request-Endpoint, API-Documentation) 
    TopicsModel <- EXTRACT-TOPICS (API-Documentation) 
    EndpointNodes <- EXTRACT-Endpoint-NODES (Request-Endpoint)
    Similarity-Value <- CALCULATE-COSINE-SIMILARITY-SCORE (EndpointNodes, TopicsModel) 
    if Similarity-Value < threshold
        return 'ContextLess Resource Names' antipattern
    end if
    return 'Contextual Resource Names' pattern


3. CRUDY Verb vs Verbless Endpoint

CRUDy-ENDPOINT(Request-Endpoint, HTTP-Verb):
    if Crudywords Є Request-Endpoint 
        return 'CRUDY Endpoint' antipattern
    end if
    return 'Vebrless Endpoint' pattern
    

4. Inconsistent vs Consistent Documentation

INCONSISTENT-DOCUMENTATION(HTTP-Method, Request-Endpoint, Documentation) 
    Documentation <- REMOVE-STOP-WORDS (Documentation)
    Tokens <- TOKENISE (Documentation)
    if HTTP-Method = 'POST' and SYNONYMS (Delete or Update or Get) Є Tokens
        return "Inconsistent Documentation" antipattern
    else if HTTP-Method = 'DELETE' and SYNONYMS (Create or Update or Get) Є Tokens
        return "Inconsistent Documentation" antipattern
    else if HTTP-Method = 'PUT' and SYNONYMS (Create or Delete or Get) Є Tokens
        return "Inconsistent Documentation" antipattern
    else if HTTP-Method = 'GET' and SYNONYMS (Delete or Update or Create) Є Tokens 
	    return "Inconsistent Documentation" antipattern
    endif 
    return "Consistent Documentation" pattern
    

5. Non-descriptive vs. Descriptive Endpoint

NON-DESCRIPTIVE-RESOURCE(Request-Endpoint)
    Nodes <- Break-Down-Compound-Words(Request-Endpoint)
    Nodes <- Abbribriate-Acronyms(Nodes)
    hasValidWord = False
    For each word in nodes:
        If PerformWordLookup(word):
            hasValidWord = hasValidWord or True
        else 
            hasValidWord = hasValidWord or False
    if hasValidWord:
        retrun 'Descriptive-Endpoint' antipattern
    endif
    retrun 'Non-Descriptive-Endpoint' pattern



6. Non-hierarchical vs Hierarchical Nodes (Not complete)

NonHierarchicalNodes(Request-Endpoint):   
    Nodes <- Split(Request-Endpoint)     
    Relationship_Type <- Hierarchical-Metrics(Nodes)
    if Relationship_Type not in Reversed-Hierarchy
	    return 'Hierarchical' pattern
    end if
    retunr 'Non-Hierarchical' pattern
                       


7. Non-pertinent vs Pertinent Documentation

NON-PERTINENT-DOCUMENTATION(Request-Endpoint, Documentation):
    Documentation <- REMOVE-STOP-WORDS (Documentation)
    Tokens <- LEMMATISE-TOKENISE (Documentation)
    TopicsModel <- EXTRACT-TOPICS (API-Documentation)
    EndpointNodes <- EXTRACT-Endpoint-NODES (Request-Endpoint)
    Similarity-Value <- CALCULATE-COSINE-SIMILARITY-SCORE (EndpointNodes, TopicsModel)
    if Similarity-Value < threshold
        retrun 'Non-Pertinent Documentation' (Anti-Pattern)
    endif
    retrun "Pertinent Documentation" (Pattern)

8. Non-Standard vs Standard

NON-STANDARD-RESOURCE(Request-Endpoint):
    if Non-English-Characters or Space or Double-Hyphens or Unknown-Characters Є Rquest-Endpoint
        retrun 'Non-Standard Endpoint' antipattern
    end if
    retrun 'Standard Endpoint' pattern

9. Pluralized vs Singularized

PLURALIZED-NODES(Request-Endpoint, HTTP-Mehtod)   
    Last-Node <- Extract-Last-Node(Request-Endpoint)
    if HTTP-Method = 'PUT' or 'DELETE' and Last-Node is Singular
        return 'Singularized Nodes' pattern
    else if HTTP-Method = 'POST' and Last-Node is Plural
        retrun 'Singularized Nodes' pattern
    end if
    return 'Pluralized Nodes' antipattern
   

10. Versioned vs unversioned

UNVERSIONED-ENDPOINT(Request-Endpoint):
    if Version-Information Є Request-Endpoint
        retrun 'Versioned Endpoint' pattern
    end if
    return 'Unversioned Endpoint' antipattern 


11. Non Filtering vs Filtering Endpoint (Use of query and path parameters in Endpoints)

NON-FILTERING-ENDPOINT(HTTP-Method, Request-Endpoint)
    Intention <- Extract-Intention(API-Documentation)
    if Inention is "Fetch" or "Return" Reosurces and Query-Parameter not in Request-Endpoint:
        return 'Non-Filtering Endpoint' pattern
    elseif Inention is "Fetch" or "Return" Reosurces and Query-Parameter in Request-Endpoint: 
        return 'Filtering Endpoint' antipattern
    endif
    return "Regular Endpoint" 


12. Parameters Tunneling vs Parameters Adherence (When to use Path-Parameters vs. Query-Parameters)

PARAMETERS-TUNNELING(Request-Endpoint, API-Documentation):
    Intention <- Extract-Intention(API-Documentation)
    if Parameter Є Request-Endpoint: 
        if Query-Parameter Є Request-Endpoint and Intention is "Sorting" or "Filtering" or "Pagination":
            return 'Parameter Adherence' pattern
        elseif Path-Parameter Є Request-Endpoint and Intention is "Delete" or "Update":
            return 'Parameter Adherence' pattern
        endif
        return 'Parameters Tunneling' antipattern
    endif
    return 'Regular Endpoints' pattern
        


13. Verb-Oriented vs Noun-Oriented Endpoint

VERB-ORIENTED-ENDPOINT(Request-Endpoint):
    Verbs <- POS-Tagging(Request-Endpoint)
    if Verbs is not NULL:
        return 'Verb Endpoint' antipattern
    end if
    return 'Noun Endpoint' pattern


14. Inconsistent vs Consistent Resource Archetype Names (Doucment should be singular noun and Collections should be plural)

IMPROPER_NOUN(Request-Endpoint)
    Nodes <- Split(Request-Endpoint)
    Document, Collections <- CatagorizeNodes(Nodes) #based on the positions of the nodes.# 
    if Document is singular:
        return 'Consistent Resource Archetype' pattern
    elseif Collections is plural:
        return 'Consistent Resource Archetype' pattern
    endif
    return 'Inconsistent Resource Archetype' antipattern
    

15. Identifier Ambiguity vs Identifier Annotation

IDENTIFIER_AMBIGUITY(Request-Endpoint)
	Indentifier -> Extract_Identifiers(Request-Endpoint)
	if Indentifier enclosed in "{}" or "<>" or starts with ":":
		return  "Identifier Annotation" pattern
	endif
	return "Identifier Ambiguity" antipattern
