1) Filerting-Endpoint vs Non-Filerting-Endpoint [book, a, b]

Endpoints should always incorporate SPF (Sorting, Pagination, and Filtering) factors. Users often try to fetch large amounts of data, and SPF helps limit the number of collections that can be retrieved from a list of resources. Further, SPF allows API consumers to filter collections according to their needs. This reduces data loading time, makes responses easier to handle, and reduces network traffic. An endpoint that incorporates SPF factors is known as a Filtering-Endpoint pattern, while an endpoint that does not incorporate SPF factors is known as a Non-Filtering-Endpoint antipattern.

Pattern: (from Cisco Flare)
/environments?latitude={latitude}&longitude={longitude} Gets a list of all environments. Params can include the following: If latitude and longitude are specified, gets a list of environments whose geofence contains the given point. The geofence of each environment includes all points within a particular distance from a point on earth.

/environments?key={key}&value={value} Gets a list of all environments. Params can include the following: If key and value are specified, returns environments whose data objects contain the given key/value pair.

Anti-pattern:
/environments List environments. Gets a list of all environments.


2)  Parameter Adherence vs  Parameter Tunneling [d]

Web APIs often have path parameters and query parameters to file specific resources. Path parameters (e.g., /api/books/{id})  are used to identify or retrieve a specific resource, while query parameters (e.g., /api/books?category=fiction) are used for sorting, filtering, and pagination of the request data. Path parameters should be used to identify resources (e.g. delete, update, create, etc). In contrast, query parameters should be used for sorting, filtering, and pagination of resources. Parameter Tunneling antipattern occurs if path parameters are used for sorting, filtering, and pagination, or query parameters are used for identifying resources. Consistent use of path and query parameters would result in a Parameter Adherence pattern.

Pattern:
/desserts?type=cake&seller-id=1234   Return all the resource types cakes with seller-id of 11234 
/v1/me/ratings/albums/{id}    Remove a user’s album rating by using the album’s identifier.

Anti-Pattern:
/desserts?page=5&pageSize=25 Update the resource desserts



3) Consistent Resource Archetype Names vs Inconsistent Resource Archetype Names [Book, b]

Resource archetypes are the basic building blocks of API endpoints. Two of the most commonly used resource archetypes are Document and Collection. The Document archetype usually includes fields filled with values that describe a resource, while a Collection resource is a list of document resources. To maintain clarity, singular nouns should be used for naming Documents, while plural nouns should be used for naming Collections. Adhering to these rules results in the Consistent Resource Archetype Names pattern. In contrast, the Inconsistent Resource Archetype Names antipattern occurs if plural nouns are used for naming documents or singular nouns are used for naming collections.

Pattern:
GET /recipes/desserts/apple-pie

Anti-Pattern: 
GET /recipe/dessert/apple-pies

4) Identifier Annotation vs Identifier Ambiguity

Path parameters or resource identifiers used in endpoints should be enclosed in curly braces, angle brackets, or followed by a colon sign. Using such symbols in endpoint design is referred to as Identifier Annotation pattern, which improves endpoint readability and understandability. In contrast, the absence of curly braces, angle brackets, or colon to represent resource identifiers would result in an Identifier Ambiguity antipattern.

Pattern:
/v2/lists/:id/members
/appInstallation/{id}
/rules/<ruleID>

Anti-Pattern:
/rules/ruleKey
/idFromLegacyId


5) Flat vs Structured Endpoint [e]

Forward slash (/) must be used to separate nodes of an endpoint and indicate a hierarchical relationship. A structured Endpoint pattern occurs when forward slashes are used to break down complex resource names to improve the readability and understandability of the endpoint. In contrast, a Flat Endpoint antipattern occurs when complex or large resource names are not broken down with forward slashes.

Pattern: 
/requests/{request_id}/receipt
/requests/{request_id}/map

Anti-Pattern:
/requestFirmwareUpdateFromInStoreReader
/requestItemDisplayFromInStoreReader


a. https://medium.com/@liams_o/15-fundamental-tips-on-rest-api-design-9a05bcd42920
b. https://leapwise.co/blog/31-tip-that-make-our-rest-apis-easy-to-use/
c. https://www.freecodecamp.org/news/rest-api-best-practices-rest-endpoint-design-examples/
d. https://www.getambassador.io/blog/7-rest-api-design-best-practices
e. API Design Rulebook

 