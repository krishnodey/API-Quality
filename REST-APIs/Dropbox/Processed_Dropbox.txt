{"http_verb": "POST ", "uri": " /2/account/set_profile_photo ", "processed_uri": ["account", "set", "profile", "photo"], "description": " Sets a user's profile photo. ", "parameter": "", "processed_des_para": ["set", "user", "profile", "photo"]}
{"http_verb": "POST ", "uri": " /2/auth/token/revoke ", "processed_uri": ["authentication", "token", "revoke"], "description": "  Disables the access token used to authenticate the call. If there is a corresponding refresh token for the access token, this disables that refresh token, as well as any other access tokens for that refresh token.", "parameter": "\n", "processed_des_para": ["disable", "access", "token", "use", "authenticate", "call", "corresponding", "refresh", "token", "access", "token", "disable", "refresh", "token", "well", "access", "token", "refresh", "token"]}
{"http_verb": "POST ", "uri": " /2/check/app ", "processed_uri": ["check", "application"], "description": " This endpoint performs App Authentication, validating the supplied app key and secret, and returns the supplied string, to allow you to test your code and connection to the Dropbox API. It has no other effect. If you receive an HTTP 200 response with the supplied query, it indicates at least part of the Dropbox API infrastructure is working and that the app key and secret valid.", "parameter": "\n", "processed_des_para": ["endpoint", "perform", "application", "authentication", "validate", "supply", "application", "key", "secret", "return", "supply", "string", "allow", "test", "code", "connection", "dropbox", "ap", "effect", "receive", "htt", "response", "supply", "query", "indicate", "least", "part", "dropbox", "ap", "infrastructure", "work", "application", "key", "secret", "valid"]}
{"http_verb": "POST ", "uri": " /2/check/user ", "processed_uri": ["check", "user"], "description": " This endpoint performs User Authentication, validating the supplied access token, and returns the supplied string, to allow you to test your code and connection to the Dropbox API. It has no other effect. If you receive an HTTP 200 response with the supplied query, it indicates at least part of the Dropbox API infrastructure is working and that the access token is valid. ", "parameter": "", "processed_des_para": ["endpoint", "perform", "user", "authentication", "validate", "supply", "access", "token", "return", "supply", "string", "allow", "test", "code", "connection", "dropbox", "ap", "effect", "receive", "htt", "response", "supply", "query", "indicate", "least", "part", "dropbox", "ap", "infrastructure", "working", "access", "token", "valid"]}
{"http_verb": "POST ", "uri": " /2/contacts/delete_manual_contacts ", "processed_uri": ["contacts", "delete", "manual", "contacts"], "description": " Removes all manually added contacts. You'll still keep contacts who are on your team or who you imported. New contacts will be added when you share. ", "parameter": "\n", "processed_des_para": ["remove", "manually", "add", "contact", "you", "ll", "still", "keep", "contact", "team", "import", "new", "contact", "add", "share"]}
{"http_verb": "POST ", "uri": " /2/contacts/delete_manual_contacts_batch ", "processed_uri": ["contacts", "delete", "manual", "contacts", "batch"], "description": " Removes manually added contacts from the given list. ", "parameter": "", "processed_des_para": ["remove", "manually", "add", "contact", "give", "list"]}
{"http_verb": "POST ", "uri": " /2/file_properties/properties/add ", "processed_uri": ["file", "properties", "properties", "add"], "description": " Add property groups to a Dropbox file. See templates/add_for_user or templates/add_for_team to create new templates. ", "parameter": "\n", "processed_des_para": ["add", "property", "group", "dropbox", "file", "see", "template", "add", "user", "template", "add", "team", "create", "new", "template"]}
{"http_verb": "PSOT ", "uri": " /2/file_properties/properties/overwrite ", "processed_uri": ["file", "properties", "properties", "overwrite"], "description": " Overwrite property groups associated with a file. This endpoint should be used instead of properties/update when property groups are being updated via a \"snapshot\" instead of via a \"delta\". In other words, this endpoint will delete all omitted fields from a property group, whereas properties/update will only delete fields that are explicitly marked for deletion. ", "parameter": "\n", "processed_des_para": ["overwrite", "property", "group", "associate", "file", "endpoint", "use", "instead", "property", "update", "property", "group", "update", "via", "snapshot", "instead", "via", "delta", "word", "endpoint", "delete", "omit", "field", "property", "group", "whereas", "property", "update", "delete", "field", "explicitly", "mark", "deletion"]}
{"http_verb": "PSOT ", "uri": " /2/file_properties/properties/remove ", "processed_uri": ["file", "properties", "properties", "remove"], "description": " Permanently removes the specified property group from the file. To remove specific property field key value pairs, see properties/update. To update a template, see templates/update_for_user or templates/update_for_team. To remove a template, see templates/remove_for_user or templates/remove_for_team. ", "parameter": "\n", "processed_des_para": ["permanently", "remove", "specified", "property", "group", "file", "remove", "specific", "property", "field", "key", "value", "pair", "see", "property", "update", "update", "template", "see", "template", "update", "user", "template", "update", "team", "remove", "template", "see", "template", "remove", "user", "template", "remove", "team"]}
{"http_verb": "POST ", "uri": " /2/file_properties/properties/search ", "processed_uri": ["file", "properties", "properties", "search"], "description": " Search across property templates for particular property field values. ", "parameter": "\n", "processed_des_para": ["search", "across", "property", "template", "particular", "property", "field", "value"]}
{"http_verb": "POST ", "uri": " /2/file_properties/properties/search/continue ", "processed_uri": ["file", "properties", "properties", "search", "continue"], "description": " Once a cursor has been retrieved from properties/search, use this to paginate through all search results. ", "parameter": "\n", "processed_des_para": ["cursor", "retrieve", "property", "search", "use", "paginate", "search", "result"]}
{"http_verb": "POST ", "uri": " /2/file_properties/properties/update ", "processed_uri": ["file", "properties", "properties", "update"], "description": " Add, update or remove properties associated with the supplied file and templates. This endpoint should be used instead of properties/overwrite when property groups are being updated via a \"delta\" instead of via a \"snapshot\" . In other words, this endpoint will not delete any omitted fields from a property group, whereas properties/overwrite will delete any fields that are omitted from a property group. ", "parameter": "\n", "processed_des_para": ["add", "update", "remove", "property", "associate", "supply", "file", "template", "endpoint", "use", "instead", "property", "overwrite", "property", "group", "update", "via", "delta", "instead", "via", "snapshot", "word", "endpoint", "delete", "omit", "field", "property", "group", "whereas", "property", "overwrite", "delete", "field", "omit", "property", "group"]}
{"http_verb": "POST ", "uri": " /2/file_properties/templates/add_for_user ", "processed_uri": ["file", "properties", "templates", "add", "user"], "description": " Add a template associated with a user. See properties/add to add properties to a file. This endpoint can't be called on a team member or admin's behalf. ", "parameter": "\n", "processed_des_para": ["add", "template", "associate", "user", "see", "property", "add", "add", "property", "file", "endpoint", "can", "not", "call", "team", "member", "admin", "behalf"]}
{"http_verb": "POST ", "uri": " /2/file_properties/templates/get_for_user ", "processed_uri": ["file", "properties", "templates", "get", "user"], "description": " Get the schema for a specified template. This endpoint can't be called on a team member or admin's behalf. ", "parameter": "\n", "processed_des_para": ["get", "schema", "specify", "template", "endpoint", "can", "not", "call", "team", "member", "admin", "behalf"]}
{"http_verb": "POST ", "uri": " /2/file_properties/templates/list_for_user ", "processed_uri": ["file", "properties", "templates", "list", "user"], "description": " Get the template identifiers for a team. To get the schema of each template use templates/get_for_user. This endpoint can't be called on a team member or admin's behalf. ", "parameter": " \n", "processed_des_para": ["get", "template", "identifier", "team", "get", "schema", "template", "use", "template", "get", "user", "endpoint", "can", "not", "call", "team", "member", "admin", "behalf"]}
{"http_verb": "POST ", "uri": " /2/file_properties/templates/remove_for_user ", "processed_uri": ["file", "properties", "templates", "remove", "user"], "description": " Permanently removes the specified template created from templates/add_for_user. All properties associated with the template will also be removed. This action cannot be undone ", "parameter": " \n", "processed_des_para": ["permanently", "remove", "specified", "template", "create", "template", "add", "user", "property", "associate", "template", "also", "remove", "action", "undo"]}
{"http_verb": "POST ", "uri": " /2/file_properties/templates/update_for_user ", "processed_uri": ["file", "properties", "templates", "update", "user"], "description": " Update a template associated with a user. This route can update the template name, the template description and add optional properties to templates. This endpoint can't be called on a team member or admin's behalf. ", "parameter": "\n", "processed_des_para": ["update", "template", "associate", "user", "route", "update", "template", "name", "template", "description", "add", "optional", "property", "template", "endpoint", "can", "not", "call", "team", "member", "admin", "behalf"]}
{"http_verb": "POST ", "uri": " /2/file_requests/count ", "processed_uri": ["file", "requests", "count"], "description": "This namespace contains endpoints and data types for file request operations. ", "parameter": "\n", "processed_des_para": ["namespace", "contain", "endpoint", "datum", "type", "file", "request", "operation"]}
{"http_verb": "POST ", "uri": " /2/file_requests/create ", "processed_uri": ["file", "requests", "create"], "description": " Creates a file request for this user. ", "parameter": "\n", "processed_des_para": ["create", "file", "request", "user"]}
{"http_verb": "POST ", "uri": " /2/file_requests/delete ", "processed_uri": ["file", "requests", "delete"], "description": " Delete a batch of closed file requests. ", "parameter": "\n", "processed_des_para": ["delete", "batch", "close", "file", "request"]}
{"http_verb": "POST ", "uri": " /2/file_requests/delete_all_closed ", "processed_uri": ["file", "requests", "delete", "closed"], "description": " Delete all closed file requests owned by this user. ", "parameter": "\n", "processed_des_para": ["delete", "closed", "file", "request", "own", "user"]}
{"http_verb": "POST ", "uri": " /2/file_requests/get ", "processed_uri": ["file", "requests", "get"], "description": " Returns the specified file request. ", "parameter": "\n", "processed_des_para": ["return", "specify", "file", "request"]}
{"http_verb": "POST ", "uri": " /2/file_requests/list_v2 ", "processed_uri": ["file", "requests", "list"], "description": " Returns a list of file requests owned by this user. For apps with the app folder permission, this will only return file requests with destinations in the app folder. ", "parameter": " \n", "processed_des_para": ["return", "list", "file", "request", "own", "user", "application", "application", "folder", "permission", "return", "file", "request", "destination", "application", "folder"]}
{"http_verb": "POST ", "uri": " /2/file_requests/list/continue ", "processed_uri": ["file", "requests", "list", "continue"], "description": " Once a cursor has been retrieved from list:2, use this to paginate through all file requests. The cursor must come from a previous call to list:2 or list/continue. ", "parameter": "\n", "processed_des_para": ["cursor", "retrieve", "list", "use", "paginate", "file", "request", "cursor", "must", "come", "previous", "call", "list", "list", "continue"]}
{"http_verb": "POST ", "uri": " /2/file_requests/update ", "processed_uri": ["file", "requests", "update"], "description": " Update a file request. ", "parameter": "\n", "processed_des_para": ["update", "file", "request"]}
{"http_verb": "POST ", "uri": " /2/files/copy_v2 ", "processed_uri": ["files", "copy"], "description": " Copy a file or folder to a different location in the user's Dropbox. If the source path is a folder all its contents will be copied. ", "parameter": "\n", "processed_des_para": ["copy", "file", "folder", "different", "location", "user", "dropbox", "source", "path", "folder", "content", "copy"]}
{"http_verb": "POST ", "uri": " /2/files/copy_batch_v2 ", "processed_uri": ["files", "copy", "batch"], "description": " Copy multiple files or folders to different locations at once in the user's Dropbox. This route will replace copy_batch:1. The main difference is this route will return status for each entry, while copy_batch:1 raises failure if any entry fails. This route will either finish synchronously, or return a job ID and do the async copy job in background. Please use copy_batch/check:2 to check the job status. ", "parameter": "\n", "processed_des_para": ["copy", "multiple", "file", "folder", "different", "location", "user", "dropbox", "route", "replace", "copy", "batch", "main", "difference", "route", "return", "status", "entry", "copy", "batch", "raise", "failure", "entry", "fail", "route", "either", "finish", "synchronously", "return", "job", "asynchronization", "copy", "job", "background", "please", "use", "copy", "batch", "check", "check", "job", "status"]}
{"http_verb": "POST ", "uri": " /2/files/copy_batch/check_v2 ", "processed_uri": ["files", "copy", "batch", "check"], "description": " Returns the status of an asynchronous job for copy_batch:2. It returns list of results for each entry. ", "parameter": "\n", "processed_des_para": ["return", "status", "asynchronous", "job", "copy", "batch", "return", "list", "result", "entry"]}
{"http_verb": "POST ", "uri": " /2/files/copy_reference/get ", "processed_uri": ["files", "copy", "reference", "get"], "description": " Get a copy reference to a file or folder. This reference string can be used to save that file or folder to another user's Dropbox by passing it to copy_reference/save.", "parameter": " \n", "processed_des_para": ["get", "copy", "reference", "file", "folder", "reference", "string", "use", "save", "file", "folder", "another", "user", "dropbox", "pass", "copy", "reference", "save"]}
{"http_verb": "POST ", "uri": " /2/files/copy_reference/save ", "processed_uri": ["files", "copy", "reference", "save"], "description": " Save a copy reference returned by copy_reference/get to the user's Dropbox. ", "parameter": "\n", "processed_des_para": ["save", "copy", "reference", "return", "copy", "reference", "get", "user", "dropbox"]}
{"http_verb": "POST ", "uri": " /2/files/create_folder_v2 ", "processed_uri": ["files", "create", "folder"], "description": " Create a folder at a given path. ", "parameter": "\n", "processed_des_para": ["create", "folder", "give", "path"]}
{"http_verb": "POST ", "uri": " /2/files/create_folder_batch ", "processed_uri": ["files", "create", "folder", "batch"], "description": " Create multiple folders at once. This route is asynchronous for large batches, which returns a job ID immediately and runs the create folder batch asynchronously. Otherwise, creates the folders and returns the result synchronously for smaller inputs. You can force asynchronous behaviour by using the CreateFolderBatchArg.force_async flag. Use create_folder_batch/check to check the job status.", "parameter": "\n", "processed_des_para": ["create", "multiple", "folder", "route", "asynchronous", "large", "batch", "return", "job", "immediately", "run", "create", "folder", "batch", "asynchronously", "otherwise", "create", "folder", "return", "result", "synchronously", "small", "input", "force", "asynchronous", "behaviour", "use", "create", "folder", "batch", "argforce", "asynchronization", "flag", "use", "create", "folder", "batch", "check", "check", "job", "status"]}
{"http_verb": "POST ", "uri": " /2/files/create_folder_batch/check ", "processed_uri": ["files", "create", "folder", "batch", "check"], "description": " Returns the status of an asynchronous job for create_folder_batch. If success, it returns list of result for each entry. ", "parameter": "\n", "processed_des_para": ["return", "status", "asynchronous", "job", "create", "folder", "batch", "success", "return", "list", "result", "entry"]}
{"http_verb": "POST ", "uri": " /2/files/delete_v2 ", "processed_uri": ["files", "delete"], "description": " Delete the file or folder at a given path. If the path is a folder, all its contents will be deleted too. A successful response indicates that the file or folder was deleted. The returned metadata will be the corresponding FileMetadata or FolderMetadata for the item at time of deletion, and not a DeletedMetadata object. ", "parameter": "\n", "processed_des_para": ["delete", "file", "folder", "give", "path", "path", "folder", "content", "delete", "successful", "response", "indicate", "file", "folder", "delete", "return", "metadata", "correspond", "file", "metadata", "folder", "metadata", "item", "time", "deletion", "delete", "metadata", "object"]}
{"http_verb": "POST ", "uri": " /2/files/delete_batch ", "processed_uri": ["files", "delete", "batch"], "description": " Delete multiple files/folders at once. This route is asynchronous, which returns a job ID immediately and runs the delete batch asynchronously. Use delete_batch/check to check the job status. ", "parameter": "\n", "processed_des_para": ["delete", "multiple", "file", "folder", "route", "asynchronous", "return", "job", "immediately", "run", "delete", "batch", "asynchronously", "use", "delete", "batch", "check", "check", "job", "status"]}
{"http_verb": "POST ", "uri": " /2/files/delete_batch/check ", "processed_uri": ["files", "delete", "batch", "check"], "description": " Returns the status of an asynchronous job for delete_batch. If success, it returns list of result for each entry. ", "parameter": "\n", "processed_des_para": ["return", "status", "asynchronous", "job", "delete", "batch", "success", "return", "list", "result", "entry"]}
{"http_verb": "POST ", "uri": " /2/files/download ", "processed_uri": ["files", "download"], "description": " Download a file from a user's Dropbox. ", "parameter": "\n", "processed_des_para": ["download", "file", "user", "dropbox"]}
{"http_verb": "POST ", "uri": " /2/files/download_zip ", "processed_uri": ["files", "download", "zip"], "description": " Download a folder from the user's Dropbox, as a zip file. The folder must be less than 20 GB in size and any single file within must be less than 4 GB in size. The resulting zip must have fewer than 10,000 total file and folder entries, including the top level folder. The input cannot be a single file. Note: this endpoint does not support HTTP range requests. ", "parameter": "\n", "processed_des_para": ["download", "folder", "user", "dropbox", "zip", "file", "folder", "must", "less", "size", "single", "file", "within", "must", "less", "size", "result", "zip", "must", "few", "total", "file", "folder", "entry", "include", "top", "level", "folder", "input", "single", "file", "note", "endpoint", "support", "htt", "range", "request"]}
{"http_verb": "POST ", "uri": " /2/files/export ", "processed_uri": ["files", "export"], "description": " Export a file from a user's Dropbox. This route only supports exporting files that cannot be downloaded directly and whose ExportResult.file_metadata has ExportInfo.export_as populated. ", "parameter": " \n", "processed_des_para": ["export", "file", "user", "dropbox", "route", "support", "export", "file", "download", "directly", "whose", "export", "resultfile", "metadata", "export", "infoexport", "populate"]}
{"http_verb": "POST ", "uri": " /2/files/get_file_lock_batch ", "processed_uri": ["files", "get", "file", "lock", "batch"], "description": " Return the lock metadata for the given list of paths. ", "parameter": "\n", "processed_des_para": ["return", "lock", "metadata", "give", "list", "path"]}
{"http_verb": "POST ", "uri": " /2/files/get_metadata ", "processed_uri": ["files", "get", "metadata"], "description": " Returns the metadata for a file or folder. Note: Metadata for the root folder is unsupported. ", "parameter": "\n", "processed_des_para": ["return", "metadata", "file", "folder", "note", "metadata", "root", "folder", "unsupporte"]}
{"http_verb": "POST ", "uri": " /2/files/get_preview ", "processed_uri": ["files", "get", "preview"], "description": " et a preview for a file. Currently, PDF previews are generated for files with the following extensions: .ai, .doc, .docm, .docx, .eps, .gdoc, .gslides, .odp, .odt, .pps, .ppsm, .ppsx, .ppt, .pptm, .pptx, .rtf. HTML previews are generated for files with the following extensions: .csv, .ods, .xls, .xlsm, .gsheet, .xlsx. Other formats will return an unsupported extension error. ", "parameter": "\n", "processed_des_para": ["et", "preview", "file", "currently", "pd", "preview", "generate", "file", "follow", "extension", "ai", "doc", "docm", "docx", "eps", "gdoc", "gslides", "odp", "odt", "pps", "ppsm", "ppsx", "ppt", "pptm", "pptx", "rtf", "htm", "preview", "generate", "file", "follow", "extension", "od", "xls", "xlsm", "gsheet", "xlsx", "format", "return", "unsupported", "extension", "error"]}
{"http_verb": "POST ", "uri": " /2/files/get_temporary_link ", "processed_uri": ["files", "get", "temporary", "link"], "description": " Get a temporary link to stream content of a file. This link will expire in four hours and afterwards you will get 410 Gone. This URL should not be used to display content directly in the browser. The Content-Type of the link is determined automatically by the file's mime type. ", "parameter": " \n", "processed_des_para": ["get", "temporary", "stream", "content", "file", "expire", "four", "hour", "afterwards", "get", "go", "ur", "use", "display", "content", "directly", "browser", "content", "type", "determine", "automatically", "file", "mime", "type"]}
{"http_verb": "POST ", "uri": " /2/files/get_temporary_upload_link ", "processed_uri": ["files", "get", "temporary", "upload", "link"], "description": " Get a one-time use temporary upload link to upload a file to a Dropbox location. This endpoint acts as a delayed upload. The returned temporary upload link may be used to make a POST request with the data to be uploaded. The upload will then be perfomed with the CommitInfo previously provided to get_temporary_upload_link but evaluated only upon consumption. Hence, errors stemming from invalid CommitInfo with respect to the state of the user's Dropbox will only be communicated at consumption time. Additionally, these errors are surfaced as generic HTTP 409 Conflict responses, potentially hiding issue details. The maximum temporary upload link duration is 4 hours. Upon consumption or expiration, a new link will have to be generated. Multiple links may exist for a specific upload path at any given time. The POST request on the temporary upload link must have its Content-Type set to \"application/octet-stream\". Example temporary upload link consumption request: curl -X POST https://content.dropboxapi.com/apitul/1/bNi2uIYF51cVBND --header \"Content-Type: application/octet-stream\" --data-binary @local_file.txt A successful temporary upload link consumption request returns the content hash of the uploaded data in JSON format. Example successful temporary upload link consumption response: {\"content-hash\": \"599d71033d700ac892a0e48fa61b125d2f5994\"} An unsuccessful temporary upload link consumption request returns any of the following status codes: HTTP 400 Bad Request: Content-Type is not one of application/octet-stream and text/plain or request is invalid. HTTP 409 Conflict: The temporary upload link does not exist or is currently unavailable, the upload failed, or another error happened. HTTP 410 Gone: The temporary upload link is expired or consumed. Example unsuccessful temporary upload link consumption response: Temporary upload link has been recently consumed. ", "parameter": "\n", "processed_des_para": ["get", "one", "time", "use", "temporary", "upload", "upload", "file", "dropbox", "location", "endpoint", "act", "delay", "upload", "return", "temporary", "upload", "use", "make", "pos", "request", "datum", "upload", "upload", "perfome", "commit", "info", "previously", "provide", "get", "temporary", "upload", "evaluate", "upon", "consumption", "hence", "error", "stem", "invalid", "commit", "info", "respect", "state", "user", "dropbox", "communicate", "consumption", "time", "additionally", "error", "surface", "generic", "htt", "conflict", "response", "potentially", "hide", "issue", "detail", "maximum", "temporary", "upload", "duration", "hour", "upon", "consumption", "expiration", "new", "generate", "multiple", "link", "exist", "specific", "upload", "path", "give", "time", "pos", "request", "temporary", "upload", "must", "content", "type", "set", "application", "octet", "stream", "example", "temporary", "upload", "consumption", "request", "curl", "pos", "contentdropboxapicom", "apitul", "ni", "iy", "vbn", "header", "content", "type", "application", "octet", "stream", "datum", "binary", "local", "file", "successful", "temporary", "upload", "consumption", "request", "return", "content", "hash", "upload", "data", "jso", "format", "example", "successful", "temporary", "upload", "consumption", "response", "content", "hash", "ac", "fa", "unsuccessful", "temporary", "upload", "consumption", "request", "return", "follow", "status", "code", "htt", "bad", "request", "content", "type", "one", "application", "octet", "stream", "text", "plain", "request", "invalid", "htt", "conflict", "temporary", "upload", "exist", "currently", "unavailable", "upload", "fail", "another", "error", "happen", "htt", "go", "temporary", "upload", "expire", "consume", "example", "unsuccessful", "temporary", "upload", "consumption", "response", "temporary", "upload", "recently", "consume"]}
{"http_verb": "POST ", "uri": " /2/files/get_thumbnail_v2 ", "processed_uri": ["files", "get", "thumbnail"], "description": " Get a thumbnail for an image. This method currently supports files with the following file extensions: jpg, jpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail. ", "parameter": "\n", "processed_des_para": ["get", "thumbnail", "image", "method", "currently", "support", "file", "follow", "file", "extension", "jpg", "jpeg", "png", "tiff", "tif", "gif", "webp", "ppm", "bmp", "photo", "large", "size", "will", "not", "convert", "thumbnail"]}
{"http_verb": "POST ", "uri": " /2/files/get_thumbnail_batch ", "processed_uri": ["files", "get", "thumbnail", "batch"], "description": " Get thumbnails for a list of images. We allow up to 25 thumbnails in a single batch. This method currently supports files with the following file extensions: jpg, jpeg, png, tiff, tif, gif, webp, ppm and bmp. Photos that are larger than 20MB in size won't be converted to a thumbnail. ", "parameter": "\n", "processed_des_para": ["get", "thumbnail", "list", "image", "allow", "thumbnail", "single", "batch", "method", "currently", "support", "file", "follow", "file", "extension", "jpg", "jpeg", "png", "tiff", "tif", "gif", "webp", "ppm", "bmp", "photo", "large", "size", "will", "not", "convert", "thumbnail"]}
{"http_verb": "POST ", "uri": " /2/files/list_folder ", "processed_uri": ["files", "list", "folder"], "description": " Starts returning the contents of a folder. If the result's ListFolderResult.has_more field is true, call list_folder/continue with the returned ListFolderResult.cursor to retrieve more entries. If you're using ListFolderArg.recursive set to true to keep a local cache of the contents of a Dropbox account, iterate through each entry in order and process them as follows to keep your local state in sync: For each FileMetadata, store the new entry at the given path in your local state. If the required parent folders don't exist yet, create them. If there's already something else at the given path, replace it and remove all its children. For each FolderMetadata, store the new entry at the given path in your local state. If the required parent folders don't exist yet, create them. If there's already something else at the given path, replace it but leave the children as they are. Check the new entry's FolderSharingInfo.read_only and set all its children's read-only statuses to match. For each DeletedMetadata, if your local state has something at the given path, remove it and all its children. If there's nothing at the given path, ignore this entry. Note: auth.RateLimitError may be returned if multiple list_folder or list_folder/continue calls with same parameters are made simultaneously by same API app for same user. If your app implements retry logic, please hold off the retry until the previous request finishes.", "parameter": "\n", "processed_des_para": ["start", "return", "content", "folder", "result", "list", "folder", "resultha", "field", "call", "list", "folder", "continue", "return", "list", "folder", "resultcursor", "retrieve", "entry", "you", "re", "use", "list", "folder", "argrecursive", "set", "keep", "local", "cache", "content", "dropbox", "account", "iterate", "entry", "order", "process", "follow", "keep", "local", "state", "sync", "file", "metadata", "store", "new", "entry", "give", "path", "local", "state", "require", "parent", "folder", "do", "not", "exist", "yet", "create", "there", "already", "something", "else", "give", "path", "replace", "remove", "child", "folder", "metadata", "store", "new", "entry", "give", "path", "local", "state", "require", "parent", "folder", "do", "not", "exist", "yet", "create", "there", "already", "something", "else", "give", "path", "replace", "leave", "child", "check", "new", "entry", "folder", "share", "inforead", "set", "children", "read", "status", "match", "delete", "metadata", "local", "state", "something", "give", "path", "remove", "child", "there", "nothing", "give", "path", "ignore", "entry", "note", "authentication", "rate", "limit", "error", "return", "multiple", "list", "folder", "list", "folder", "continue", "call", "parameter", "make", "simultaneously", "ap", "application", "user", "application", "implement", "retry", "logic", "please", "hold", "retry", "previous", "request", "finish"]}
{"http_verb": "POST ", "uri": " /2/files/list_folder/continue ", "processed_uri": ["files", "list", "folder", "continue"], "description": " Once a cursor has been retrieved from list_folder, use this to paginate through all files and retrieve updates to the folder, following the same rules as documented for list_folder. ", "parameter": "\n", "processed_des_para": ["cursor", "retrieve", "list", "folder", "use", "paginate", "file", "retrieve", "update", "folder", "follow", "rule", "document", "list", "folder"]}
{"http_verb": "POST ", "uri": " /2/files/list_folder/get_latest_cursor ", "processed_uri": ["files", "list", "folder", "get", "latest", "cursor"], "description": " A way to quickly get a cursor for the folder's state. Unlike list_folder, list_folder/get_latest_cursor doesn't return any entries. This endpoint is for app which only needs to know about new files and modifications and doesn't need to know about files that already exist in Dropbox. ", "parameter": "\n", "processed_des_para": ["way", "quickly", "get", "cursor", "folder", "state", "unlike", "list", "folder", "list", "folder", "get", "late", "cursor", "do", "not", "return", "entry", "endpoint", "application", "need", "know", "new", "file", "modification", "do", "not", "need", "know", "file", "already", "exist", "dropbox"]}
{"http_verb": "POST ", "uri": " /2/files/list_folder/longpoll ", "processed_uri": ["files", "list", "folder", "longpoll"], "description": " A longpoll endpoint to wait for changes on an account. In conjunction with list_folder/continue, this call gives you a low-latency way to monitor an account for file changes. The connection will block until there are changes available or a timeout occurs. This endpoint is useful mostly for client-side apps. If you're looking for server-side notifications, check out our webhooks documentation. ", "parameter": "\n", "processed_des_para": ["longpoll", "endpoint", "wait", "change", "account", "conjunction", "list", "folder", "continue", "call", "give", "low", "latency", "way", "monitor", "account", "file", "change", "connection", "block", "change", "available", "timeout", "occur", "endpoint", "useful", "mostly", "client", "side", "application", "you", "re", "look", "server", "side", "notification", "check", "web", "hook", "documentation"]}
{"http_verb": "POST ", "uri": " /2/files/list_revisions ", "processed_uri": ["files", "list", "revisions"], "description": " Returns revisions for files based on a file path or a file id. The file path or file id is identified from the latest file entry at the given file path or id. This end point allows your app to query either by file path or file id by setting the mode parameter appropriately. In the ListRevisionsMode.path (default) mode, all revisions at the same file path as the latest file entry are returned. If revisions with the same file id are desired, then mode must be set to ListRevisionsMode.id. The ListRevisionsMode.id mode is useful to retrieve revisions for a given file across moves or renames. ", "parameter": " \n", "processed_des_para": ["return", "revision", "file", "base", "file", "path", "file", "identification", "file", "path", "file", "identification", "identify", "late", "file", "entry", "give", "file", "path", "identification", "end", "point", "allow", "application", "query", "either", "file", "path", "file", "identification", "set", "mode", "parameter", "appropriately", "list", "revision", "modepath", "default", "mode", "revision", "file", "path", "late", "file", "entry", "return", "revision", "file", "identification", "desire", "mode", "must", "set", "list", "revision", "modeid", "list", "revisions", "modeid", "mode", "useful", "retrieve", "revision", "give", "file", "across", "move", "rename"]}
{"http_verb": "POST ", "uri": " /2/files/lock_file_batch ", "processed_uri": ["files", "lock", "file", "batch"], "description": " Lock the files at the given paths. A locked file will be writable only by the lock holder. A successful response indicates that the file has been locked. Returns a list of the locked file paths and their metadata after this operation. ", "parameter": "\n", "processed_des_para": ["lock", "file", "give", "path", "lock", "file", "writable", "lock", "holder", "successful", "response", "indicate", "file", "lock", "return", "list", "lock", "file", "path", "metadata", "operation"]}
{"http_verb": "POST ", "uri": " /2/files/move_v2 ", "processed_uri": ["files", "move"], "description": " Move a file or folder to a different location in the user's Dropbox. If the source path is a folder all its contents will be moved. Note that we do not currently support case-only renaming. ", "parameter": " \n", "processed_des_para": ["move", "file", "folder", "different", "location", "user", "dropbox", "source", "path", "folder", "content", "move", "note", "currently", "support", "case", "rename"]}
{"http_verb": "POST ", "uri": " /2/files/move_batch_v2 ", "processed_uri": ["files", "move", "batch"], "description": " Move multiple files or folders to different locations at once in the user's Dropbox. Note that we do not currently support case-only renaming. This route will replace move_batch:1. The main difference is this route will return status for each entry, while move_batch:1 raises failure if any entry fails. This route will either finish synchronously, or return a job ID and do the async move job in background. Please use move_batch/check:2 to check the job status. ", "parameter": "\n", "processed_des_para": ["move", "multiple", "file", "folder", "different", "location", "user", "dropbox", "note", "currently", "support", "case", "rename", "route", "replace", "move", "batch", "main", "difference", "route", "return", "status", "entry", "move", "batch", "raise", "failure", "entry", "fail", "route", "either", "finish", "synchronously", "return", "job", "asynchronization", "move", "job", "background", "please", "use", "move", "batch", "check", "check", "job", "status"]}
{"http_verb": "POST ", "uri": " /2/files/move_batch/check_v2 ", "processed_uri": ["files", "move", "batch", "check"], "description": " Returns the status of an asynchronous job for move_batch:2. It returns list of results for each entry. ", "parameter": " \n", "processed_des_para": ["return", "status", "asynchronous", "job", "move", "batch", "return", "list", "result", "entry"]}
{"http_verb": "POST ", "uri": " /2/files/paper/create ", "processed_uri": ["files", "paper", "create"], "description": " Creates a new Paper doc with the provided content. ", "parameter": "\n", "processed_des_para": ["create", "new", "paper", "doc", "provide", "content"]}
{"http_verb": "POST ", "uri": " /2/files/paper/update ", "processed_uri": ["files", "paper", "update"], "description": " Updates an existing Paper doc with the provided content. ", "parameter": "\n", "processed_des_para": ["update", "exist", "paper", "doc", "provide", "content"]}
{"http_verb": "POST ", "uri": " /2/files/permanently_delete ", "processed_uri": ["files", "permanently", "delete"], "description": " Permanently delete the file or folder at a given path (see https://www.dropbox.com/en/help/40). If the given file or folder is not yet deleted, this route will first delete it. It is possible for this route to successfully delete, then fail to permanently delete. Note: This endpoint is only available for Dropbox Business apps. ", "parameter": "\n", "processed_des_para": ["permanently", "delete", "file", "folder", "give", "path", "see", "wwwdropboxcom", "en", "help", "give", "file", "folder", "yet", "delete", "route", "first", "delete", "possible", "route", "successfully", "delete", "fail", "permanently", "delete", "note", "endpoint", "available", "dropbox", "business", "application"]}
{"http_verb": "POST ", "uri": " /2/files/restore ", "processed_uri": ["files", "restore"], "description": " Restore a specific revision of a file to the given path. ", "parameter": "\n", "processed_des_para": ["restore", "specific", "revision", "file", "give", "path"]}
{"http_verb": "POST ", "uri": " /2/files/save_url ", "processed_uri": ["files", "save", "url"], "description": " Save the data from a specified URL into a file in user's Dropbox. Note that the transfer from the URL must complete within 15 minutes, or the operation will time out and the job will fail. If the given path already exists, the file will be renamed to avoid the conflict (e.g. myfile (1).txt). ", "parameter": "\n", "processed_des_para": ["save", "datum", "specify", "ur", "file", "user", "dropbox", "note", "transfer", "ur", "must", "complete", "within", "minute", "operation", "time", "job", "fail", "give", "path", "already", "exist", "file", "rename", "avoid", "conflict", "eg", "myfile"]}
{"http_verb": "POST ", "uri": " /2/files/save_url/check_job_status ", "processed_uri": ["files", "save", "url", "check", "job", "status"], "description": " Check the status of a save_url job. ", "parameter": "\n", "processed_des_para": ["check", "status", "save", "url", "job"]}
{"http_verb": "POST ", "uri": " /2/files/search_v2 ", "processed_uri": ["files", "search"], "description": " Searches for files and folders. Note: search:2 along with search/continue:2 can only be used to retrieve a maximum of 10,000 matches. Recent changes may not immediately be reflected in search results due to a short delay in indexing. Duplicate results may be returned across pages. Some results may not be returned. ", "parameter": "\n", "processed_des_para": ["search", "file", "folder", "note", "search", "along", "search", "continue", "use", "retrieve", "maximum", "match", "recent", "change", "immediately", "reflect", "search", "result", "due", "short", "delay", "indexing", "duplicate", "result", "return", "across", "page", "result", "return"]}
{"http_verb": "POST ", "uri": " /2/files/search/continue_v2 ", "processed_uri": ["files", "search", "continue"], "description": " Fetches the next page of search results returned from search:2. Note: search:2 along with search/continue:2 can only be used to retrieve a maximum of 10,000 matches. Recent changes may not immediately be reflected in search results due to a short delay in indexing. Duplicate results may be returned across pages. Some results may not be returned. ", "parameter": "\n", "processed_des_para": ["fetch", "next", "page", "search", "result", "return", "search", "note", "search", "along", "search", "continue", "use", "retrieve", "maximum", "match", "recent", "change", "immediately", "reflect", "search", "result", "due", "short", "delay", "indexing", "duplicate", "result", "return", "across", "page", "result", "return"]}
{"http_verb": "POST ", "uri": " /2/files/tags/add ", "processed_uri": ["files", "tags", "add"], "description": " Add a tag to an item. A tag is a string. The strings are automatically converted to lowercase letters. No more than 20 tags can be added to a given item. ", "parameter": " \n", "processed_des_para": ["add", "tag", "item", "tag", "string", "string", "automatically", "convert", "lowercase", "letter", "tag", "add", "give", "item"]}
{"http_verb": "POST ", "uri": " /2/files/tags/get ", "processed_uri": ["files", "tags", "get"], "description": " Get list of tags assigned to items. ", "parameter": "\n", "processed_des_para": ["get", "list", "tag", "assign", "item"]}
{"http_verb": "POST ", "uri": " /2/files/tags/remove ", "processed_uri": ["files", "tags", "remove"], "description": " Remove a tag from an item. ", "parameter": "\n", "processed_des_para": ["remove", "tag", "item"]}
{"http_verb": "POST ", "uri": " /2/files/unlock_file_batch ", "processed_uri": ["files", "unlock", "file", "batch"], "description": " Unlock the files at the given paths. A locked file can only be unlocked by the lock holder or, if a business account, a team admin. A successful response indicates that the file has been unlocked. Returns a list of the unlocked file paths and their metadata after this operation. ", "parameter": "\n", "processed_des_para": ["unlock", "file", "give", "path", "lock", "file", "unlock", "lock", "holder", "business", "account", "team", "admin", "successful", "response", "indicate", "file", "unlocked", "return", "list", "unlock", "file", "path", "metadata", "operation"]}
{"http_verb": "POST ", "uri": " /2/files/upload ", "processed_uri": ["files", "upload"], "description": " Create a new file with the contents provided in the request. Do not use this to upload a file larger than 150 MB. Instead, create an upload session with upload_session/start. Calls to this endpoint will count as data transport calls for any Dropbox Business teams with a limit on the number of data transport calls allowed per month. For more information, see the Data transport limit page. ", "parameter": "\n", "processed_des_para": ["create", "new", "file", "content", "provide", "request", "use", "upload", "file", "large", "instead", "create", "upload", "session", "upload", "session", "start", "call", "endpoint", "count", "datum", "transport", "call", "dropbox", "business", "team", "limit", "number", "datum", "transport", "call", "allow", "per", "month", "information", "see", "data", "transport", "limit", "page"]}
{"http_verb": "POST ", "uri": " /2/files/upload_session/append_v2 ", "processed_uri": ["files", "upload", "session", "append"], "description": " Append more data to an upload session. When the parameter close is set, this call will close the session. A single request should not upload more than 150 MB. The maximum size of a file one can upload to an upload session is 350 GB. Calls to this endpoint will count as data transport calls for any Dropbox Business teams with a limit on the number of data transport calls allowed per month. For more information, see the Data transport limit page. ", "parameter": " \n", "processed_des_para": ["append", "datum", "upload", "session", "parameter", "close", "set", "call", "close", "session", "single", "request", "upload", "maximum", "size", "file", "one", "upload", "upload", "session", "call", "endpoint", "count", "datum", "transport", "call", "dropbox", "business", "team", "limit", "number", "datum", "transport", "call", "allow", "per", "month", "information", "see", "data", "transport", "limit", "page"]}
{"http_verb": "POST ", "uri": " /2/files/upload_session/finish ", "processed_uri": ["files", "upload", "session", "finish"], "description": " Finish an upload session and save the uploaded data to the given file path. A single request should not upload more than 150 MB. The maximum size of a file one can upload to an upload session is 350 GB. Calls to this endpoint will count as data transport calls for any Dropbox Business teams with a limit on the number of data transport calls allowed per month. For more information, see the Data transport limit page. ", "parameter": "\n", "processed_des_para": ["finish", "upload", "session", "save", "upload", "datum", "give", "file", "path", "single", "request", "upload", "maximum", "size", "file", "one", "upload", "upload", "session", "call", "endpoint", "count", "datum", "transport", "call", "dropbox", "business", "team", "limit", "number", "datum", "transport", "call", "allow", "per", "month", "information", "see", "data", "transport", "limit", "page"]}
{"http_verb": "POST ", "uri": " /2/files/upload_session/finish_batch_v2 ", "processed_uri": ["files", "upload", "session", "finish", "batch"], "description": " This route helps you commit many files at once into a user's Dropbox. Use upload_session/start and upload_session/append:2 to upload file contents. We recommend uploading many files in parallel to increase throughput. Once the file contents have been uploaded, rather than calling upload_session/finish, use this route to finish all your upload sessions in a single request. UploadSessionStartArg.close or UploadSessionAppendArg.close needs to be true for the last upload_session/start or upload_session/append:2 call of each upload session. The maximum size of a file one can upload to an upload session is 350 GB. We allow up to 1000 entries in a single request. Calls to this endpoint will count as data transport calls for any Dropbox Business teams with a limit on the number of data transport calls allowed per month. For more information, see the Data transport limit page. ", "parameter": "\n", "processed_des_para": ["route", "help", "commit", "many", "file", "user", "dropbox", "use", "upload", "session", "start", "upload", "sessioppend", "upload", "file", "content", "recommend", "upload", "many", "file", "parallel", "increase", "throughput", "file", "content", "upload", "rather", "call", "upload", "session", "finish", "use", "route", "finish", "upload", "session", "single", "request", "upload", "session", "start", "argclose", "upload", "session", "append", "argclose", "need", "last", "upload", "session", "start", "upload", "sessioppend", "call", "upload", "session", "maximum", "size", "file", "one", "upload", "upload", "session", "allow", "entry", "single", "request", "call", "endpoint", "count", "datum", "transport", "call", "dropbox", "business", "team", "limit", "number", "datum", "transport", "call", "allow", "per", "month", "information", "see", "data", "transport", "limit", "page"]}
{"http_verb": "POST ", "uri": " /2/files/upload_session/finish_batch/check ", "processed_uri": ["files", "upload", "session", "finish", "batch", "check"], "description": " Returns the status of an asynchronous job for upload_session/finish_batch. If success, it returns list of result for each entry. ", "parameter": "\n", "processed_des_para": ["return", "status", "asynchronous", "job", "upload", "session", "finish", "batch", "success", "return", "list", "result", "entry"]}
{"http_verb": "POST ", "uri": " /2/files/upload_session/start ", "processed_uri": ["files", "upload", "session", "start"], "description": " Upload sessions allow you to upload a single file in one or more requests, for example where the size of the file is greater than 150 MB. This call starts a new upload session with the given data. You can then use upload_session/append:2 to add more data and upload_session/finish to save all the data to a file in Dropbox. A single request should not upload more than 150 MB. The maximum size of a file one can upload to an upload session is 350 GB. An upload session can be used for a maximum of 7 days. Attempting to use an UploadSessionStartResult.session_id with upload_session/append:2 or upload_session/finish more than 7 days after its creation will return a UploadSessionLookupError.not_found. Calls to this endpoint will count as data transport calls for any Dropbox Business teams with a limit on the number of data transport calls allowed per month. For more information, see the Data transport limit page. By default, upload sessions require you to send content of the file in sequential order via consecutive upload_session/start, upload_session/append:2, upload_session/finish calls. For better performance, you can instead optionally use a UploadSessionType.concurrent upload session. To start a new concurrent session, set UploadSessionStartArg.session_type to UploadSessionType.concurrent. After that, you can send file data in concurrent upload_session/append:2 requests. Finally finish the session with upload_session/finish. There are couple of constraints with concurrent sessions to make them work. You can not send data with upload_session/start or upload_session/finish call, only with upload_session/append:2 call. Also data uploaded in upload_session/append:2 call must be multiple of 4194304 bytes (except for last upload_session/append:2 with UploadSessionStartArg.close to true, that may contain any remaining data). ", "parameter": "\n", "processed_des_para": ["upload", "session", "allow", "upload", "single", "file", "one", "request", "example", "size", "file", "great", "call", "start", "new", "upload", "session", "give", "datum", "use", "upload", "sessioppend", "add", "data", "upload", "session", "finish", "save", "data", "file", "dropbox", "single", "request", "upload", "maximum", "size", "file", "one", "upload", "upload", "session", "upload", "session", "use", "maximum", "day", "attempt", "use", "upload", "session", "start", "resultsession", "identification", "upload", "sessioppend", "upload", "session", "finish", "day", "creation", "return", "upload", "session", "lookup", "errornot", "find", "call", "endpoint", "count", "datum", "transport", "call", "dropbox", "business", "team", "limit", "number", "datum", "transport", "call", "allow", "per", "month", "information", "see", "data", "transport", "limit", "page", "default", "upload", "session", "require", "send", "content", "file", "sequential", "order", "via", "consecutive", "upload", "session", "start", "upload", "sessioppend", "upload", "session", "finish", "call", "well", "performance", "instead", "optionally", "use", "upload", "session", "typeconcurrent", "upload", "session", "start", "new", "concurrent", "session", "set", "upload", "session", "start", "argsession", "type", "upload", "session", "typeconcurrent", "send", "file", "datum", "concurrent", "upload", "sessioppend", "request", "finally", "finish", "session", "upload", "session", "finish", "couple", "constraint", "concurrent", "session", "make", "work", "send", "data", "upload", "session", "start", "upload", "session", "finish", "call", "upload", "sessioppend", "call", "also", "datum", "upload", "upload", "sessioppend", "call", "must", "multiple", "byte", "except", "last", "upload", "sessioppend", "upload", "session", "start", "argclose", "contain", "remain", "datum"]}
{"http_verb": "POST ", "uri": " /2/files/upload_session/start_batch ", "processed_uri": ["files", "upload", "session", "start", "batch"], "description": " This route starts batch of upload_sessions. Please refer to `upload_session/start` usage. Calls to this endpoint will count as data transport calls for any Dropbox Business teams with a limit on the number of data transport calls allowed per month. For more information, see the Data transport limit page. ", "parameter": " ", "processed_des_para": ["route", "start", "batch", "upload", "session", "please", "refer", "upload", "session", "start", "usage", "call", "endpoint", "count", "datum", "transport", "call", "dropbox", "business", "team", "limit", "number", "datum", "transport", "call", "allow", "per", "month", "information", "see", "data", "transport", "limit", "page"]}
