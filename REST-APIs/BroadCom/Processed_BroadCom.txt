{"http_verb": "POST ", "uri": " /api/getAccess ", "processed_uri": ["application", "programming", "interface", "get", "access"], "description": " Returns the Authentication Token X-AccessToken, as part of response headers, if the provided user name and password is correct.\n", "parameter": "", "processed_des_para": ["return", "authentication", "token", "access", "token", "part", "response", "header", "provide", "user", "name", "password", "correct"]}
{"http_verb": "GET ", "uri": " /bui/getBUIAllConfig ", "processed_uri": ["return", "get", "return", "configuration"], "description": " Returns all the configuration properties for Service Point App.\n", "parameter": "", "processed_des_para": ["return", "configuration", "property", "service", "point", "application"]}
{"http_verb": "GET ", "uri": " /bui/getAllowedStatus ", "processed_uri": ["return", "get", "allowed", "status"], "description": " Returns the list of available Statuses based on allowed Status transition.\n", "parameter": "", "processed_des_para": ["return", "list", "available", "status", "base", "allow", "status", "transition"]}
{"http_verb": "GET ", "uri": " /bui/getMyTicketDetails({persid}) ", "processed_uri": ["return", "get", "ticket", "details", "persistent", "identifier"], "description": " Returns ticket details along with extra attributes provided in the $attrList parameter.\n", "parameter": "", "processed_des_para": ["return", "ticket", "detail", "along", "extra", "attribute", "provide", "attribute", "list", "parameter"]}
{"http_verb": "GET ", "uri": " /bui/getTicketsCustomData({persid}) ", "processed_uri": ["return", "get", "tickets", "custom", "datapersid"], "description": " Returns tickets summary attributes configured at SDM.\n", "parameter": "", "processed_des_para": ["return", "ticket", "summary", "attribute", "configure", "sd"]}
{"http_verb": "GET ", "uri": " /bui/getDefaultCategories ", "processed_uri": ["return", "get", "default", "categories"], "description": " Returns the default list of categories for cr factory defined in Service Desk which is configurable.\n", "parameter": "", "processed_des_para": ["return", "default", "list", "category", "cr", "factory", "define", "service", "desk", "configurable"]}
{"http_verb": "GET ", "uri": " /bui/attrInfo ", "processed_uri": ["return", "attributes", "info"], "description": " Returns the required attributes and custom attributes for cr factory defined in service point configuration at SDM admnistrative page.\n", "parameter": "", "processed_des_para": ["return", "require", "attribute", "custom", "attribute", "cr", "factory", "define", "service", "point", "configuration", "sd", "admnistrative", "page"]}
{"http_verb": "GET ", "uri": " /bui/attrCtrl ", "processed_uri": ["return", "attributes", "control"], "description": " Returns all dependent attributes for the provided ticket attribute ($attrname parameter)\n", "parameter": "", "processed_des_para": ["return", "dependent", "attribute", "provide", "ticket", "attribute", "attribute", "name", "parameter"]}
{"http_verb": "POST ", "uri": " /bui/addLogComment ", "processed_uri": ["return", "add", "log", "comment"], "description": " Add log comment to the ticket\n", "parameter": "", "processed_des_para": ["add", "log", "comment", "ticket"]}
{"http_verb": "POST ", "uri": " /bui/changeStatus/{factory}({persid}) ", "processed_uri": ["return", "change", "status", "factory", "persistent", "identifier"], "description": " Returns updated status value of the provided ticket persistent id.\n", "parameter": "", "processed_des_para": ["return", "update", "status", "value", "provide", "ticket", "persistent", "identification"]}
{"http_verb": "GET ", "uri": " /bui/allFeeds({persid}) ", "processed_uri": ["return", "feed", "persistent", "identifier"], "description": " Returns Activity Log Information for the provided ticket\n", "parameter": "", "processed_des_para": ["return", "activity", "log", "information", "provide", "ticket"]}
{"http_verb": "POST ", "uri": " /bui/attmnt ", "processed_uri": ["return", "attachment"], "description": " Upload an attachment to SDM and also links the attachment to the specified factory object if parentFactory and parentId parameter values are provided, else simply uploads the file.\n", "parameter": "", "processed_des_para": ["upload", "attachment", "sd", "also", "link", "attachment", "specify", "factory", "object", "parent", "factory", "parent", "identification", "parameter", "value", "provide", "else", "simply", "upload", "file"]}
{"http_verb": "GET ", "uri": " /bui/getBopSID ", "processed_uri": ["return", "get", "bop", "session", "indentifier"], "description": " Returns BOP session ID, which can be used to download file.\n", "parameter": "", "processed_des_para": ["return", "bop", "session", "use", "download", "file"]}
{"http_verb": "GET ", "uri": " /bui/attmnt({persid})/$value ", "processed_uri": ["return", "attachment", "persistent", "identifier", "value"], "description": " Returns an attachment as binary data.\n", "parameter": "", "processed_des_para": ["return", "attachment", "binary", "data"]}
{"http_verb": "PUT ", "uri": " /bui/updateStatusForNotification ", "processed_uri": ["return", "update", "status", "notification"], "description": " Marks the notification status as READ for the given notification persistent id\n", "parameter": "", "processed_des_para": ["mark", "notification", "status", "rea", "give", "notification", "persistent", "identification"]}
{"http_verb": "PUT ", "uri": " /bui/updateStatusForAllNotification ", "processed_uri": ["return", "update", "status", "notification"], "description": " Marks all the notifications based on the $filter value provided as READ.\n", "parameter": "", "processed_des_para": ["mark", "notification", "base", "filter", "value", "provide", "rea"]}
{"http_verb": "GET ", "uri": " /bui/getMyResources ", "processed_uri": ["return", "get", "resources"], "description": " Returns all the resources(Assets) the user is having access to\n", "parameter": "", "processed_des_para": ["return", "resource", "asset", "user", "access"]}
{"http_verb": "GET ", "uri": " /bui/getMyActiveChatSession ", "processed_uri": ["return", "get", "active", "chat", "session"], "description": " Gets the active chat session details for the logged-in Service Point user.\n", "parameter": "", "processed_des_para": ["get", "active", "chat", "session", "detail", "log", "service", "point", "user"]}
{"http_verb": "GET ", "uri": " /bui/checkActiveSessions ", "processed_uri": ["return", "check", "active", "sessions"], "description": " Checks if the logged-in Service Point user has an active chat session.\n", "parameter": "", "processed_des_para": ["check", "log", "service", "point", "user", "active", "chat", "session"]}
{"http_verb": "POST ", "uri": " /bui/createChatThread ", "processed_uri": ["return", "create", "chat", "thread"], "description": " Creates an activity log entry for initiating a chat session\n", "parameter": "", "processed_des_para": ["create", "activity", "log", "entry", "initiate", "chat", "session"]}
{"http_verb": "GET ", "uri": " /bui/getChatHistory/{roomName} ", "processed_uri": ["return", "get", "chat", "history", "room", "name"], "description": " Gets the chat history for the logged-in ServicePoint user for the passed-in ticket id (here roomName is the ticket persistent id).\n", "parameter": "", "processed_des_para": ["get", "chat", "history", "log", "service", "point", "user", "pass", "ticket", "identification", "room", "name", "ticket", "persistent", "identification"]}
{"http_verb": "GET ", "uri": " /bui/getDocument({id}) ", "processed_uri": ["return", "get", "document", "indentifier"], "description": " Returns a Knowledge Document and updates the documents hits count if $updateHits parameter is true\n", "parameter": "", "processed_des_para": ["return", "knowledge", "document", "update", "document", "hit", "count", "update", "hit", "parameter"]}
{"http_verb": "GET ", "uri": " /bui/getKDAttachments({id}) ", "processed_uri": ["return", "get", "knowledge", "document", "attachmentsid"], "description": " Returns all Knowledge Document attachments for the provided document id.\n", "parameter": "", "processed_des_para": ["return", "knowledge", "document", "attachment", "provide", "document", "identification"]}
{"http_verb": "GET ", "uri": " /bui/getKDComments({id}) ", "processed_uri": ["return", "get", "knowledge", "document", "commentsid"], "description": " Returns Knowledge Document comments for the provided document id.\n", "parameter": "", "processed_des_para": ["return", "knowledge", "document", "comment", "provide", "document", "identification"]}
{"http_verb": "POST ", "uri": " /bui/addKDComment({id}) ", "processed_uri": ["return", "add", "knowledge", "document", "commentid"], "description": " Add a comment to an Existing Knowledge Document\n", "parameter": "", "processed_des_para": ["add", "comment", "exist", "knowledge", "document"]}
{"http_verb": "POST ", "uri": " /bui/rateDocument({id}) ", "processed_uri": ["return", "rate", "document", "indentifier"], "description": " Rate an Existing Knowledge Document\n", "parameter": "", "processed_des_para": ["rate", "exist", "knowledge", "document"]}
{"http_verb": "GET ", "uri": " /bui/kdLinkInfo({id}) ", "processed_uri": ["return", "knowledge", "document", "link", "information", "identifier"], "description": " It tells whether the KD article attached to the ticket is an accepted solution for the problem mentioned in the ticket.\n", "parameter": "", "processed_des_para": ["tell", "whether", "article", "attach", "ticket", "accept", "solution", "problem", "mention", "ticket"]}
{"http_verb": "POST ", "uri": " /bui/unLinkSolution({id}) ", "processed_uri": ["return", "un", "link", "solution", "indentifier"], "description": " Marks the knowledge document as not an accepted solution for the problem mentioned in the ticket\n", "parameter": "", "processed_des_para": ["mark", "knowledge", "document", "accept", "solution", "problem", "mention", "ticket"]}
{"http_verb": "GET ", "uri": " /bui/helpAbout ", "processed_uri": ["return", "help"], "description": " Returns the help about text. First priority is tenanted if not found(text is empty or config itself is not defined), public about text is returned\n", "parameter": "", "processed_des_para": ["return", "help", "text", "first", "priority", "tenant", "foundtext", "empty", "configuration", "define", "public", "text", "return"]}
{"http_verb": "GET ", "uri": " /bui/getEEMAuth ", "processed_uri": ["return", "get", "eem", "authentication"], "description": " Returns EEM Artifact to be used for EEM integrated solutions requests (e.g. ITPAM tasks and Catalog requests)\n", "parameter": "", "processed_des_para": ["return", "eem", "artifact", "use", "eem", "integrate", "solution", "request", "eg", "itpa", "task", "catalog", "request"]}
{"http_verb": "GET ", "uri": " /bui/{factory}({persid}) ", "processed_uri": ["return", "factory", "persistent", "identifier"], "description": " Returns the object details specified by the persistent id of the mentioned factory\n", "parameter": "", "processed_des_para": ["return", "object", "detail", "specify", "persistent", "identification", "mention", "factory"]}
{"http_verb": "PUT ", "uri": " /bui/{factory}({persid}) ", "processed_uri": ["return", "factory", "persistent", "identifier"], "description": " Updates an object with passed in details as part of form data specified by the persid parameter for the provided factory.\n", "parameter": "", "processed_des_para": ["update", "object", "pass", "detail", "part", "form", "datum", "specify", "persistent", "identifier", "parameter", "provide", "factory"]}
{"http_verb": "GET ", "uri": " /bui/{factory} ", "processed_uri": ["return", "factory"], "description": " Returns the objects based on the parameters for the mentioned factory\n", "parameter": "", "processed_des_para": ["return", "object", "base", "parameter", "mention", "factory"]}
{"http_verb": "POST ", "uri": " /bui/{factory} ", "processed_uri": ["return", "factory"], "description": " Creates a new object for the provided factory with passed in details as part of form data. (We can provide multiple child details.)\n", "parameter": "", "processed_des_para": ["create", "new", "object", "provide", "factory", "pass", "detail", "part", "form", "datum", "provide", "multiple", "child", "detail"]}
{"http_verb": "GET ", "uri": " /gs/mytkt_active ", "processed_uri": ["ticket", "active"], "description": " Returns active tickets of the logged-in user. It tries to fetch maximum 100 tickets with authorization using elastic search. In case you want to fetch more, use generic factory api.\n", "parameter": "", "processed_des_para": ["return", "active", "ticket", "log", "user", "tries", "fetch", "maximum", "ticket", "authorization", "use", "elastic", "search", "case", "want", "fetch", "use", "generic", "factory", "application", "programming", "interface"]}
{"http_verb": "GET ", "uri": " /gs/mytkt_inactive ", "processed_uri": ["ticket", "inactive"], "description": " Returns inactive tickets of the logged-in user. It tries to fetch maximum 100 tickets with authorization using elastic search. In case you want to fetch more, use generic factory api.\n", "parameter": "", "processed_des_para": ["return", "inactive", "ticket", "log", "user", "tries", "fetch", "maximum", "ticket", "authorization", "use", "elastic", "search", "case", "want", "fetch", "use", "generic", "factory", "application", "programming", "interface"]}
{"http_verb": "GET ", "uri": " /getServiceRequest ", "processed_uri": ["get", "service", "request"], "description": " Returns service requests of logged in user, if Service Catalog is integrated.\n", "parameter": "", "processed_des_para": ["return", "service", "request", "log", "user", "service", "catalog", "integrate"]}
{"http_verb": "GET ", "uri": " /pcatSearch ", "processed_uri": ["catagory", "search"], "description": " Returns relevant categories(and offerings if Service Catalog is integrated) based on configured parameters in Service Point configuration.\n", "parameter": "", "processed_des_para": ["return", "relevant", "category", "offering", "service", "catalog", "integrate", "base", "configure", "parameter", "service", "point", "configuration"]}
{"http_verb": "GET ", "uri": " /getOfferings ", "processed_uri": ["get", "offerings"], "description": " Returns featured offerings for the loggedin users domain, if Service Catalog is integrated.\n", "parameter": "", "processed_des_para": ["return", "feature", "offering", "loggedin", "user", "domain", "service", "catalog", "integrate"]}
{"http_verb": "GET ", "uri": " /suggestedSolutions ", "processed_uri": ["suggested", "solutions"], "description": " Returns all probable solutions for the provided search string.", "parameter": "", "processed_des_para": ["return", "probable", "solution", "provide", "search", "string"]}
