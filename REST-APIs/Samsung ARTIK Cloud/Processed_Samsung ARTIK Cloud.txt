{"http_verb": "GET ", "uri": " /users/self ", "processed_uri": ["users", "self"], "description": " Get the current user's profile. Returns the current user's profile. The user must be authenticated with a bearer access token.\n", "parameter": "", "processed_des_para": ["get", "current", "user", "profile", "return", "current", "user", "profile", "user", "must", "authenticate", "bearer", "access", "token"]}
{"http_verb": "GET ", "uri": " /users/<userID>/properties ", "processed_uri": ["users", "user", "identification", "properties"], "description": " Returns the properties of a user's application. The call must be authenticated with a valid Authorization header. The application for which the properties are searched is the application linked to the Authorization token.\n", "parameter": "", "processed_des_para": ["return", "property", "user", "application", "call", "must", "authenticate", "valid", "authorization", "header", "application", "property", "search", "application", "link", "authorization", "token"]}
{"http_verb": "POST ", "uri": " /users/<userID>/properties ", "processed_uri": ["users", "user", "identification", "properties"], "description": " Specifies the properties of a user's application. The call must be authenticated with a valid Authorization header. The application for which the properties are created is the application linked to the Authorization token and MUST be the same as the aid parameter sent in the JSON Payload.\n", "parameter": "", "processed_des_para": ["specify", "property", "user", "application", "call", "must", "authenticate", "valid", "authorization", "header", "application", "property", "create", "application", "link", "authorization", "token", "mus", "aid", "parameter", "send", "jso", "payload"]}
{"http_verb": "PUT ", "uri": " /users/<userID>/properties ", "processed_uri": ["users", "user", "identification", "properties"], "description": " Modifies the properties of a user's application. The call must be authenticated with a valid Authorization header. The application for which the properties are updated is the application linked to the Authorization token and MUST be the same as the aid parameter sent in the JSON Payload.\n", "parameter": "", "processed_des_para": ["modify", "property", "user", "application", "call", "must", "authenticate", "valid", "authorization", "header", "application", "property", "update", "application", "link", "authorization", "token", "mus", "aid", "parameter", "send", "jso", "payload"]}
{"http_verb": "DELETE ", "uri": " /users/<userID>/properties ", "processed_uri": ["users", "user", "identification", "properties"], "description": " Deletes the properties of a user's application. The call must be authenticated with a valid Authorization header. The application for which the properties are deleted is the application linked to the Authorization token.\n", "parameter": "", "processed_des_para": ["delete", "property", "user", "application", "call", "must", "authenticate", "valid", "authorization", "header", "application", "property", "delete", "application", "link", "authorization", "token"]}
{"http_verb": "GET ", "uri": " /users/<userID>/devices ", "processed_uri": ["users", "user", "identification", "devices"], "description": " Returns all devices owned by a user and/or shared devices on the user's account.\n", "parameter": "", "processed_des_para": ["return", "device", "own", "user", "share", "device", "user", "account"]}
{"http_verb": "GET ", "uri": " /users/<userID>/devicetypes ", "processed_uri": ["users", "user", "identification", "device", "types"], "description": " Returns the device types owned by a user.\n", "parameter": "", "processed_des_para": ["return", "device", "type", "own", "user"]}
{"http_verb": "GET ", "uri": " /users/<userID>/rules ", "processed_uri": ["users", "user", "identification", "rules"], "description": " Returns the user's Rules created by the current application. This call accepts application and user tokens as the access token. Required permissions: Application has READ on source device and WRITE on target device of Rule.\n", "parameter": "", "processed_des_para": ["return", "user", "rule", "create", "current", "application", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "rea", "source", "device", "writ", "target", "device", "rule"]}
{"http_verb": "GET ", "uri": " /users/<userID>/scenes ", "processed_uri": ["users", "user", "identification", "scenes"], "description": " Returns the user's Scenes created by the current application. This call accepts application and user tokens as the access token. Required permissions: Application has READ on Scene device type and WRITE on devices used in the Scene.\n", "parameter": "", "processed_des_para": ["return", "user", "scene", "create", "current", "application", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "rea", "scene", "device", "type", "writ", "device", "use", "scene"]}
{"http_verb": "GET ", "uri": " /users/<userID>/trials ", "processed_uri": ["users", "user", "identification", "trials"], "description": " Returns the trials of a participant or administrator.\n", "parameter": "", "processed_des_para": ["return", "trial", "participant", "administrator"]}
{"http_verb": "GET ", "uri": " /devices/<deviceID> ", "processed_uri": ["devices", "device"], "description": " Returns a specific shared or owned device. Required permissions: READ on the device.\n", "parameter": "", "processed_des_para": ["return", "specific", "share", "own", "device", "permission", "rea", "device"]}
{"http_verb": "POST ", "uri": " /devices ", "processed_uri": ["devices"], "description": " Adds a device.\n", "parameter": "", "processed_des_para": ["add", "device"]}
{"http_verb": "PUT ", "uri": " /devices/<deviceID> ", "processed_uri": ["devices", "device"], "description": " Modifies a device's parameters.\n", "parameter": "", "processed_des_para": ["modify", "device", "parameter"]}
{"http_verb": "DELETE ", "uri": " /devices/<deviceID> ", "processed_uri": ["devices", "device"], "description": " Deletes a device.\n", "parameter": "", "processed_des_para": ["delete", "device"]}
{"http_verb": "GET ", "uri": " /devices/<deviceID>/tokens ", "processed_uri": ["devices", "device", "identification", "tokens"], "description": " Returns the access token of a device.\n", "parameter": "", "processed_des_para": ["return", "access", "token", "device"]}
{"http_verb": "PUT ", "uri": " /devices/<deviceID>/tokens ", "processed_uri": ["devices", "device", "identification", "tokens"], "description": " Creates a new access token for a device.\n", "parameter": "", "processed_des_para": ["create", "new", "access", "token", "device"]}
{"http_verb": "DELETE ", "uri": " /devices/<deviceID>/tokens ", "processed_uri": ["devices", "device", "identification", "tokens"], "description": " Deletes the access token of a device.\n", "parameter": "", "processed_des_para": ["delete", "access", "token", "device"]}
{"http_verb": "POST ", "uri": " /devices/<deviceID>/providerauth ", "processed_uri": ["devices", "device", "identification", "provider", "authentication"], "description": " Begins an authentication flow to grant ARTIK cloud services permissions to access a device's data on a third-party cloud. There are two ways to authenticate a Cloud Connector device. One way is to have the user provide authorization on My ARTIK Cloud. The second way is to perform the authorization within the third-party app. The app initiates the authorization by calling the API documented here. The application calling this API must support interactive redirects. This call triggers a sequence of redirections between ARTIK cloud services, the third-party cloud, and the application.\n", "parameter": "", "processed_des_para": ["begin", "authentication", "flow", "grant", "arti", "cloud", "services", "permission", "access", "device", "datum", "third", "party", "cloud", "two", "way", "authenticate", "cloud", "connector", "device", "one", "way", "user", "provide", "authorization", "arti", "cloud", "second", "way", "perform", "authorization", "within", "third", "party", "application", "application", "initiate", "authorization", "call", "ap", "document", "application", "call", "ap", "must", "support", "interactive", "redirect", "call", "trigger", "sequence", "redirection", "arti", "cloud", "services", "third", "party", "cloud", "application"]}
{"http_verb": "DELETE ", "uri": " /devices/<deviceID>/providerauth ", "processed_uri": ["devices", "device", "identification", "provider", "authentication"], "description": " Removes the stored third-party credentials and revokes all subscriptions for the device on ARTIK cloud services. After performing this call, ARTIK cloud services may no longer communicate with the third-party cloud to receive data for this device.\n", "parameter": "", "processed_des_para": ["remove", "store", "third", "party", "credential", "revoke", "subscription", "device", "arti", "cloud", "services", "perform", "call", "arti", "cloud", "services", "long", "communicate", "third", "party", "cloud", "receive", "data", "device"]}
{"http_verb": "GET ", "uri": " /devices/<deviceID>/status ", "processed_uri": ["devices", "device", "identification", "status"], "description": " Returns current status of a device.\n", "parameter": "", "processed_des_para": ["return", "current", "status", "device"]}
{"http_verb": "GET ", "uri": " /devices/status ", "processed_uri": ["devices", "status"], "description": " Returns a list of device statuses.\n", "parameter": "", "processed_des_para": ["return", "list", "device", "status"]}
{"http_verb": "PUT ", "uri": " /devices/<deviceID>/status ", "processed_uri": ["devices", "device", "identification", "status"], "description": " Modifies current status of a device.\n", "parameter": "", "processed_des_para": ["modify", "current", "status", "device"]}
{"http_verb": "GET ", "uri": " /devices/<deviceID>/certificate ", "processed_uri": ["devices", "device", "identification", "certificate"], "description": " Returns fields for a device's certificates.\n", "parameter": "", "processed_des_para": ["return", "field", "device", "certificate"]}
{"http_verb": "GET ", "uri": " /devices/<deviceID>/shares ", "processed_uri": ["devices", "device", "identification", "shares"], "description": " Returns all device shares for a device ID. Required permissions: READ on user (device owner) and READ on device.\n", "parameter": "", "processed_des_para": ["return", "device", "share", "device", "permission", "rea", "user", "device", "owner", "rea", "device"]}
{"http_verb": "GET ", "uri": " /devices/<deviceID>/shares/<shareID> ", "processed_uri": ["devices", "device", "identification", "shares", "share"], "description": " Returns a device share. Required permissions: READ on user (device owner) and READ on device.\n", "parameter": "", "processed_des_para": ["return", "device", "share", "permission", "rea", "user", "device", "owner", "rea", "device"]}
{"http_verb": "POST ", "uri": " /devices/<deviceID>/shares ", "processed_uri": ["devices", "device", "identification", "shares"], "description": " Shares a device with a recipient. Required permissions: WRITE on user (device owner) and WRITE on device.\n", "parameter": "", "processed_des_para": ["share", "device", "recipient", "permission", "writ", "user", "device", "owner", "writ", "device"]}
{"http_verb": "GET ", "uri": " /users/<userID>/shares ", "processed_uri": ["users", "user", "identification", "shares"], "description": " List all devices shared with a user. Required permissions: READ on user (device share recipient) or READ on devices owned by user (device share recipient).\n", "parameter": "", "processed_des_para": ["list", "device", "share", "user", "permission", "rea", "user", "device", "share", "recipient", "rea", "devices", "own", "user", "device", "share", "recipient"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeID> ", "processed_uri": ["device", "types", "device", "type"], "description": " Returns the device type of a device.\n", "parameter": "", "processed_des_para": ["return", "device", "type", "device"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeID> ", "processed_uri": ["device", "types", "device", "type"], "description": " Returns a list of device types.\n", "parameter": "", "processed_des_para": ["return", "list", "device", "type"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeID>/manifests/latest/properties ", "processed_uri": ["device", "types", "device", "type", "identification", "manifests", "latest", "properties"], "description": " Returns the properties for the latest Manifest version. This will return metadata about the Manifest, such as the fields and the units they are expressed in.\n", "parameter": "", "processed_des_para": ["return", "property", "late", "manifest", "version", "return", "metadata", "manifest", "field", "unit", "express"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeID>/manifests/<version>/properties ", "processed_uri": ["device", "types", "device", "type", "identification", "manifests", "version", "properties"], "description": " Returns the properties for a specific Manifest version. This will return metadata about the Manifest, such as the fields and the units they are expressed in.\n", "parameter": "", "processed_des_para": ["return", "property", "specific", "manifest", "version", "return", "metadata", "manifest", "field", "unit", "express"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeID>/availablemanifestversions ", "processed_uri": ["device", "types", "device", "type", "identification", "available", "manifest", "versions"], "description": " Returns the available Manifest versions for a device type.\n", "parameter": "", "processed_des_para": ["return", "available", "manifest", "version", "device", "type"]}
{"http_verb": "POST ", "uri": " /devicetypes/<deviceTypeId>/whitelist ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist"], "description": " Uploads an Approved List as a CSV file.\n", "parameter": "", "processed_des_para": ["upload", "approve", "list", "cs", "file"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeId>/whitelist/<uploadId>/status ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist", "upload", "identification", "status"], "description": " Returns the status of an uploaded CSV.\n", "parameter": "", "processed_des_para": ["return", "status", "upload", "cs"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeId>/whitelist/<uploadId>/rejectedRows ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist", "upload", "identification", "rejected", "rows"], "description": " Returns the rows that were rejected in an uploaded CSV.\n", "parameter": "", "processed_des_para": ["return", "row", "rejected", "upload", "cs"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeId>/whitelist ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist"], "description": " Returns the Approved List for a device type.\n", "parameter": "", "processed_des_para": ["return", "approve", "list", "device", "type"]}
{"http_verb": "DELETE ", "uri": " /devicetypes/<deviceTypeID>/whitelist/<vendorDeviceID> ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist", "vendor", "device"], "description": " Deletes a specified device from a device type's Approved List.\n", "parameter": "", "processed_des_para": ["delete", "specify", "device", "device", "type", "approve", "list"]}
{"http_verb": "PUT ", "uri": " /devicetypes/<deviceTypeID>/whitelist/enable ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist", "enable"], "description": " Enables or disables a device type's Approved List.\n", "parameter": "", "processed_des_para": ["enable", "disable", "device", "type", "approve", "list"]}
{"http_verb": "POST ", "uri": " /devicetypes/<deviceTypeID>/whitelist/certificates ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist", "certificates"], "description": " Uploads a Public X.509 certificate for a device type. This is required for device types that are not securely registered. Read the documentation for details.\n", "parameter": "", "processed_des_para": ["upload", "public", "certificate", "device", "type", "require", "device", "type", "securely", "register", "read", "documentation", "detail"]}
{"http_verb": "DELETE ", "uri": " /devicetypes/<deviceTypeID>/whitelist/certificates/<certificateID> ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist", "certificates", "certificate"], "description": " Deletes an Approved List certificate for a device type.\n", "parameter": "", "processed_des_para": ["delete", "approve", "list", "certificate", "device", "type"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeID>/whitelist/status ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist", "status"], "description": " Returns the enabled/disabled status of an Approved List.\n", "parameter": "", "processed_des_para": ["return", "enable", "disabled", "status", "approve", "list"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeID>/whitelist/certificates ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist", "certificates"], "description": " Returns details of an Approved List certificate.\n", "parameter": "", "processed_des_para": ["return", "detail", "approve", "list", "certificate"]}
{"http_verb": "GET ", "uri": " /devicetypes/<deviceTypeID>/whitelist/vdid/<vendorDeviceID> ", "processed_uri": ["device", "types", "device", "type", "identification", "whitelist", "vdid", "vendor", "device"], "description": " Returns a specified vendor device ID.\n", "parameter": "", "processed_des_para": ["return", "specify", "vendor", "device"]}
{"http_verb": "POST ", "uri": " /messages ", "processed_uri": ["messages"], "description": " Sends a message. \n", "parameter": "", "processed_des_para": ["send", "message"]}
{"http_verb": "GET ", "uri": " /messages ", "processed_uri": ["messages"], "description": " Returns normalized messages, according to one of the following parameter combinations: COMBINATION REQUIRED PARAMETERS. Get by device sdid, endDate, startDate. Get by message ID mid, uid (required for applications only) Get by device and field presence sdid, fieldPresence Get by device, filter and date range sdid, filter, endDate, startDate Common parameters order, count, offset\n", "parameter": "", "processed_des_para": ["return", "normalize", "message", "accord", "one", "follow", "parameter", "combination", "combinatio", "parameter", "get", "device", "sdid", "end", "date", "start", "date", "get", "message", "mid", "uid", "require", "application", "get", "device", "field", "presence", "sdid", "field", "presence", "get", "device", "filter", "date", "range", "sdid", "filter", "end", "date", "start", "date", "common", "parameter", "order", "count", "offset"]}
{"http_verb": "POST ", "uri": " /actions ", "processed_uri": ["actions"], "description": " Sends an Action to the specified device.\n", "parameter": "", "processed_des_para": ["send", "action", "specify", "device"]}
{"http_verb": "GET ", "uri": " /actions ", "processed_uri": ["actions"], "description": " Returns normalized Actions, according to one of the following parameter combinations: COMBINATION REQUIRED PARAMETERS Get by device and date range ddid, endDate, startDate Get by message ID mid, uid (required for applications only) Get by Action and date range action, ddid, endDate, startDate Common parameters order, count, offset\n", "parameter": "", "processed_des_para": ["return", "normalize", "action", "accord", "one", "follow", "parameter", "combination", "combinatio", "parameter", "get", "device", "date", "range", "ddid", "end", "date", "start", "date", "get", "message", "mid", "uid", "require", "application", "get", "action", "date", "range", "action", "ddid", "end", "date", "start", "date", "common", "parameter", "order", "count", "offset"]}
{"http_verb": "GET ", "uri": " /messages/last ", "processed_uri": ["messages", "last"], "description": " Returns the most recent normalized messages from a device or devices.\n", "parameter": "", "processed_des_para": ["return", "recent", "normalize", "message", "device", "device"]}
{"http_verb": "GET ", "uri": " /messages/analytics/aggregates ", "processed_uri": ["messages", "analytics", "aggregates"], "description": " Returns the sum, minimum, maximum, mean and count of message fields that are numerical. This call generates results on messages that are at least 1 minute old. Values for startDate and endDate are rounded to start of minute, and the date range between startDate and endDate is restricted to 31 days max.\n", "parameter": "", "processed_des_para": ["return", "sum", "minimum", "maximum", "mean", "count", "message", "field", "numerical", "call", "generate", "result", "message", "least", "minute", "old", "value", "start", "date", "end", "date", "rounded", "start", "minute", "date", "range", "start", "date", "end", "date", "restrict", "day", "max"]}
{"http_verb": "GET ", "uri": " /messages/analytics/histogram ", "processed_uri": ["messages", "analytics", "histogram"], "description": " Returns message aggregates over equal intervals, which can be used to draw a histogram. This call generates results on messages that are at least 1 minute old. For each interval, the sum, minimum, maximum, mean, count and variance of message fields are returned.\n", "parameter": "", "processed_des_para": ["return", "message", "aggregate", "equal", "interval", "use", "draw", "histogram", "call", "generate", "result", "message", "least", "minute", "old", "interval", "sum", "minimum", "maximum", "mean", "count", "variance", "message", "field", "return"]}
{"http_verb": "GET ", "uri": " /messages/presence ", "processed_uri": ["messages", "presence"], "description": " Returns presence of normalized messages.\n", "parameter": "", "processed_des_para": ["return", "presence", "normalize", "message"]}
{"http_verb": "GET ", "uri": " /messages/snapshots ", "processed_uri": ["messages", "snapshots"], "description": " Returns last received value for all Manifest fields (aka device state) of a device or devices.\n", "parameter": "", "processed_des_para": ["return", "last", "receive", "value", "manifest", "field", "aka", "device", "state", "device", "device"]}
{"http_verb": "GET ", "uri": " /pricing/devices/<deviceID>/revenueshare/upgradepath ", "processed_uri": ["pricing", "devices", "device", "identification", "revenue", "share", "upgrade", "path"], "description": " If a user's device is using a Monetization plan that can be upgraded, returns a URL to be called by an application working with the device. The URL opens a UI to one of three phases of the upgrade flow. This endpoint accepts a user token as the access token.\n", "parameter": "", "processed_des_para": ["user", "device", "use", "monetization", "plan", "upgrade", "return", "ur", "call", "application", "work", "device", "ur", "open", "one", "three", "phase", "upgrade", "flow", "endpoint", "accept", "user", "token", "access", "token"]}
{"http_verb": "GET ", "uri": " /pricing/devicetypes/<deviceTypeID>/pricingtiers ", "processed_uri": ["pricing", "device", "types", "device", "type", "identification", "pricing", "tiers"], "description": " Returns Monetization Tiers (if any) of a device type. This endpoint accepts a user token as the access token.\n", "parameter": "", "processed_des_para": ["return", "monetization", "tier", "device", "type", "endpoint", "accept", "user", "token", "access", "token"]}
{"http_verb": "GET ", "uri": " /pricing/devices/<deviceID>/pricingtiers ", "processed_uri": ["pricing", "devices", "device", "identification", "pricing", "tiers"], "description": " Returns Monetization Tiers (if any) of a device. This endpoint accepts a user token as the access token.\n", "parameter": "", "processed_des_para": ["return", "monetization", "tier", "device", "endpoint", "accept", "user", "token", "access", "token"]}
{"http_verb": "POST ", "uri": " /messages/export ", "processed_uri": ["messages", "export"], "description": " Exports normalized messages from up to 30 days, according to one of the following parameter combinations. The maximum duration between startDate and endDate is 31 days. A confirmation message is emailed when the export request has been processed. Data can be exported in JSON or simple CSV. CSV exports sort the message metadata into separate columns and the data payload into a unique column.\n", "parameter": "", "processed_des_para": ["export", "normalize", "message", "day", "accord", "one", "follow", "parameter", "combination", "maximum", "duration", "start", "date", "end", "date", "day", "confirmation", "message", "email", "export", "request", "process", "datum", "export", "jso", "simple", "cs", "cs", "exports", "sort", "message", "metadata", "separate", "column", "datum", "payload", "unique", "column"]}
{"http_verb": "GET ", "uri": " /messages/export/<exportID>/status ", "processed_uri": ["messages", "export", "export", "identification", "status"], "description": " Returns the status of the messages export.\n", "parameter": "", "processed_des_para": ["return", "status", "message", "export"]}
{"http_verb": "GET ", "uri": " /messages/export/<exportID>/result ", "processed_uri": ["messages", "export", "export", "identification", "result"], "description": " Returns the result of the export query. The result call returns the response in tgz format.\n", "parameter": "", "processed_des_para": ["return", "result", "export", "query", "result", "call", "return", "response", "tgz", "format"]}
{"http_verb": "GET ", "uri": " /messages/export/history ", "processed_uri": ["messages", "export", "history"], "description": " Returns a list of export queries that have been performed.\n", "parameter": "", "processed_des_para": ["return", "list", "export", "query", "perform"]}
{"http_verb": "POST ", "uri": " /subscriptions ", "processed_uri": ["subscriptions"], "description": " Subscribes a client to receive notifications of messages for a user's devices. The devices are specified according to one of the following parameter combinations.\n", "parameter": "", "processed_des_para": ["subscribe", "client", "receive", "notification", "message", "user", "device", "device", "specify", "accord", "one", "follow", "parameter", "combination"]}
{"http_verb": "GET ", "uri": " /subscriptions ", "processed_uri": ["subscriptions"], "description": " Returns all subscriptions for the current application. This call accepts application tokens as the access token.\n", "parameter": "", "processed_des_para": ["return", "subscription", "current", "application", "call", "accept", "application", "token", "access", "token"]}
{"http_verb": "GET ", "uri": " /subscriptions/<subscriptionID> ", "processed_uri": ["subscriptions", "subscription"], "description": " Returns a subscription. This call accepts application and user tokens as the access token.\n", "parameter": "", "processed_des_para": ["return", "subscription", "call", "accept", "application", "user", "token", "access", "token"]}
{"http_verb": "POST ", "uri": " /subscriptions/<subscriptionID>/validate ", "processed_uri": ["subscriptions", "subscription", "identification", "validate"], "description": " Validates a subscription with ARTIK cloud services. If successful, subscription will be set to active status. This call does not require an access token.\n", "parameter": "", "processed_des_para": ["validate", "subscription", "arti", "cloud", "services", "successful", "subscription", "set", "active", "status", "call", "require", "access", "token"]}
{"http_verb": "GET ", "uri": " /notifications/<notificationID>/messages ", "processed_uri": ["notifications", "notification", "identification", "messages"], "description": " Returns messages associated with a notification. The notification ID is obtained from the notification payload sent to the client's callback URL. This call accepts application and user tokens as the access token.\n", "parameter": "", "processed_des_para": ["return", "message", "associate", "notification", "notification", "obtain", "notification", "payload", "send", "client", "callback", "ur", "call", "accept", "application", "user", "token", "access", "token"]}
{"http_verb": "GET ", "uri": " /rules/<ruleID> ", "processed_uri": ["rules", "rule"], "description": " Returns a Rule. This call accepts application and user tokens as the access token. Required permissions: Application has READ on source device and WRITE on target device of Rule.\n", "parameter": "", "processed_des_para": ["return", "rule", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "rea", "source", "device", "writ", "target", "device", "rule"]}
{"http_verb": "POST ", "uri": " /rules ", "processed_uri": ["rules"], "description": " Adds a Rule. This call accepts application and user tokens as the access token. Required permissions: Application has READ on source device and WRITE on target device of Rule.\n", "parameter": "", "processed_des_para": ["add", "rule", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "rea", "source", "device", "writ", "target", "device", "rule"]}
{"http_verb": "PUT ", "uri": " /rules/<ruleID> ", "processed_uri": ["rules", "rule"], "description": " Modifies parameters of a Rule. This call accepts application and user tokens as the access token. Required permissions: Application has READ on source device and WRITE on target device of Rule.\n", "parameter": "", "processed_des_para": ["modify", "parameter", "rule", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "rea", "source", "device", "writ", "target", "device", "rule"]}
{"http_verb": "DELETE ", "uri": " /rules/<ruleID> ", "processed_uri": ["rules", "rule"], "description": " Deletes a Rule. This call accepts application and user tokens as the access token. Required permissions: Application has READ on source device and WRITE on target device of Rule.\n", "parameter": "", "processed_des_para": ["delete", "rule", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "rea", "source", "device", "writ", "target", "device", "rule"]}
{"http_verb": "GET ", "uri": " /rules/<ruleID>/executions ", "processed_uri": ["rules", "rule", "identification", "executions"], "description": " Returns statistics for executions of a Rule. This call accepts application and user tokens as the access token. Required permissions: Application has READ on source device and WRITE on target device of Rule.\n", "parameter": "", "processed_des_para": ["return", "statistic", "execution", "rule", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "rea", "source", "device", "writ", "target", "device", "rule"]}
{"http_verb": "POST ", "uri": " /rules/<ruleID>/actions ", "processed_uri": ["rules", "rule", "identification", "actions"], "description": " Runs an Action in a Rule. This call accepts application and user tokens as the access token. Required permissions: Application has WRITE on target device of Rule. Any testable Actions will actually be sent to your device, so be prepared! An Action is testable if the definition of the Action is static.\n", "parameter": "", "processed_des_para": ["run", "action", "rule", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "writ", "target", "device", "rule", "testable", "action", "actually", "send", "device", "prepare", "action", "testable", "definition", "action", "static"]}
{"http_verb": "GET ", "uri": " /rules/<ruleID>/actions ", "processed_uri": ["rules", "rule", "identification", "actions"], "description": " Checks whether at least one Action can be run for test. This call accepts application and user tokens as the access token.\n", "parameter": "", "processed_des_para": ["check", "whether", "least", "one", "action", "run", "test", "call", "accept", "application", "user", "token", "access", "token"]}
{"http_verb": "POST ", "uri": " /scenes ", "processed_uri": ["scenes"], "description": " Creates a Scene with Actions specified for one or more devices. This call accepts application and user tokens as the access token.\n", "parameter": "", "processed_des_para": ["create", "scene", "action", "specify", "one", "device", "call", "accept", "application", "user", "token", "access", "token"]}
{"http_verb": "PUT ", "uri": " /scenes/<sceneID> ", "processed_uri": ["scenes", "scene"], "description": " Modifies the parameters of a Scene (with the exception of uid). This call accepts application and user tokens as the access token. Required permissions: Application has WRITE on Scene device type and WRITE on devices used in the Scene.\n", "parameter": "", "processed_des_para": ["modify", "parameter", "scene", "exception", "uid", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "writ", "scene", "device", "type", "writ", "device", "use", "scene"]}
{"http_verb": "GET ", "uri": " /scenes/<sceneID> ", "processed_uri": ["scenes", "scene"], "description": " Returns a Scene. This call accepts application and user tokens as the access token. Required permissions: Application has READ on Scene device type and WRITE on devices used in the Scene.\n", "parameter": "", "processed_des_para": ["return", "scene", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "rea", "scene", "device", "type", "writ", "device", "use", "scene"]}
{"http_verb": "GET ", "uri": " /scenes ", "processed_uri": ["scenes"], "description": " Returns a list of Scenes created by the current application. This call accepts a user token as the access token. Required permissions: Application has READ on Scene device type and WRITE on devices used in the Scene.\n", "parameter": "", "processed_des_para": ["return", "list", "scene", "create", "current", "application", "call", "accept", "user", "token", "access", "token", "permission", "application", "rea", "scene", "device", "type", "writ", "device", "use", "scene"]}
{"http_verb": "DELETE ", "uri": " /scenes/<sceneID> ", "processed_uri": ["scenes", "scene"], "description": " Deletes a Scene. This call accepts application and user tokens as the access token. Required permissions: Application has WRITE on devices used in the Scene.\n", "parameter": "", "processed_des_para": ["delete", "scene", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "writ", "device", "use", "scene"]}
{"http_verb": "POST ", "uri": " /scenes/<sceneID> ", "processed_uri": ["scenes", "scene"], "description": " Runs the Actions in a Scene. This call accepts application and user tokens as the access token. Required permissions: Application has WRITE on devices used in the Scene.\n", "parameter": "", "processed_des_para": ["run", "action", "scene", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "writ", "device", "use", "scene"]}
{"http_verb": "POST ", "uri": " /ml/models ", "processed_uri": ["models"], "description": " Creates a prediction or anomaly detection model that learns a device's data usage. Required permissions: Application has READ on source device specified in the model.\n", "parameter": "", "processed_des_para": ["create", "prediction", "anomaly", "detection", "model", "learn", "device", "datum", "usage", "permission", "application", "rea", "source", "device", "specify", "model"]}
{"http_verb": "POST ", "uri": " /ml/models/<modelID>/predict ", "processed_uri": ["models", "model", "identification", "predict"], "description": " Returns the predicted output for a machine learning model.\n", "parameter": "", "processed_des_para": ["return", "predict", "output", "machine", "learning", "model"]}
{"http_verb": "GET ", "uri": " /ml/models/<modelID> ", "processed_uri": ["models", "model"], "description": " Returns a model.", "parameter": "", "processed_des_para": ["return", "model"]}
