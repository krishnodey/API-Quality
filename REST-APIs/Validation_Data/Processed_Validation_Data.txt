{"http_verb": "PUT", "uri": "/v1/me/ratings/songs/{id}", "processed_uri": ["ratings", "songs", "identifer"], "description": "Add a user's song rating by using the song's identifier.", "parameter": "id string (Required) The unique identifier for the song.", "processed_des_para": ["add", "user", "song", "rating", "use", "song", "identifier", "identifer", "string", "unique", "identifier", "song"]}
{"http_verb": "GET", "uri": "/admin/resources/chassis_management_modules", "processed_uri": ["admin", "resources", "chassis", "management", "modules"], "description": "Get all chassis management modules", "parameter": "", "processed_des_para": ["get", "chassis", "management", "module"]}
{"http_verb": "DELETE", "uri": "/v1/me/ratings/playlists/{id}", "processed_uri": ["ratings", "playlists", "identifer"], "description": "Remove a user's playlist rating by using the playlist'ss identifier.", "parameter": "id string (Required) The unique identifier for the playlist.", "processed_des_para": ["remove", "user", "playlist", "rating", "use", "playlistss", "identifier", "identifer", "string", "unique", "identifier", "playlist"]}
{"http_verb": "POST", "uri": "/files/get_file_lock_batch", "processed_uri": ["files", "get", "file", "lock", "batch"], "description": "Return the lock metadata for the given list of paths.", "parameter": "", "processed_des_para": ["return", "lock", "metadata", "give", "list", "path"]}
{"http_verb": "POST", "uri": "/files/create_folder_batch/check", "processed_uri": ["files", "create", "folder", "batch", "check"], "description": "Returns the status of an asynchronous job for create_folder_batch. If success, it returns list of result for each entry.", "parameter": "", "processed_des_para": ["return", "status", "asynchronous", "job", "create", "folder", "batch", "success", "return", "list", "result", "entry"]}
{"http_verb": "GET", "uri": "/v1/me/library/playlist-folders/{id}/{relationship}", "processed_uri": ["library", "playlist", "folders", "identifer", "relationship"], "description": "Fetch a library playlist folder's relationship by using its identifier.", "parameter": "id string (Required) A unique identifier for the library playlist folder. relationship string (Required) The name of the relationship you want to fetch for this resource. Possible Values: children, parent", "processed_des_para": ["fetch", "library", "playlist", "folder", "relationship", "use", "identifier", "identifer", "string", "unique", "identifier", "library", "playlist", "folder", "relationship", "string", "name", "relationship", "want", "fetch", "resource", "possible", "value", "child", "parent"]}
{"http_verb": "GET", "uri": "/capacities/{capacityId}/Workloads", "processed_uri": ["capacities", "capacity", "identifer", "workloads"], "description": "Returns the current state of the specified capacity workloads, if a workload is enabled also returns the maximum memory percentage that the workload can consume.", "parameter": "", "processed_des_para": ["return", "current", "state", "specify", "capacity", "workload", "workload", "enable", "also", "return", "maximum", "memory", "percentage", "workload", "consume"]}
{"http_verb": "GET", "uri": "/shop/admin/shipping_categories/:id", "processed_uri": ["shop", "admin", "shipping", "categories", "identifer"], "description": "Retrieve Shipping category", "parameter": "", "processed_des_para": ["retrieve", "shipping", "category"]}
{"http_verb": "POST", "uri": "/devicetypes/<deviceTypeID>/whitelist/certificates", "processed_uri": ["device", "types", "device", "type", "identifer", "whitelist", "certificates"], "description": "Uploads a Public X.509 certificate for a device type. This is required for device types that are not securely registered. Read the documentation for details.", "parameter": "", "processed_des_para": ["upload", "public", "certificate", "device", "type", "require", "device", "type", "securely", "register", "read", "documentation", "detail"]}
{"http_verb": "GET", "uri": "/jobs", "processed_uri": ["jobs"], "description": "All jobs on this GitLab instance. Returns an empty result for users without administrator access.  n/a", "parameter": "", "processed_des_para": ["job", "git", "lab", "instance", "return", "empty", "result", "user", "without", "administrator", "access"]}
{"http_verb": "GET", "uri": "/v2/spaces/:id/buyers", "processed_uri": ["spaces", "identifer", "buyers"], "description": "Returns a list of user who purchased a ticket to the requested Space. You must authenticate the request using the Access Token of the creator of the requested Space.  id REQUIRED string Unique identifier of the Space for which you want to request Tweets.", "parameter": "", "processed_des_para": ["return", "list", "user", "purchase", "ticket", "request", "space", "must", "authenticate", "request", "use", "access", "token", "creator", "request", "space", "identifer", "string", "unique", "identifier", "space", "want", "request", "tweet"]}
{"http_verb": "GET", "uri": "/apps/{appId}/dashboards/{dashboardId}/tiles", "processed_uri": ["applications", "application", "identifer", "dashboards", "dashboard", "identifer", "tiles"], "description": "Returns a list of tiles within the specified dashboard from the specified app.", "parameter": "", "processed_des_para": ["return", "list", "tile", "within", "specify", "dashboard", "specify", "application"]}
{"http_verb": "DELETE", "uri": "/requests/current", "processed_uri": ["requests", "current"], "description": "The Ride Request endpoint allows cancellation of the user's current trip. This endpoint behaves similarly to the DELETE /v1.2/requests/{request_id} endpoint, except you do not need to provide a request_id. If there is no trip in progress the endpoint will result in a 404 not found error. This endpoint will only work for trips requested through your app unless you have the all_trips scope.", "parameter": "", "processed_des_para": ["ride", "request", "endpoint", "allow", "cancellation", "user", "current", "trip", "endpoint", "behave", "similarly", "delet", "request", "request", "identifer", "endpoint", "except", "need", "provide", "request", "identifer", "trip", "progress", "endpoint", "result", "find", "error", "endpoint", "work", "trip", "request", "application", "unless", "trip", "scope"]}
{"http_verb": "GET", "uri": "/v2/berry-firmness/{berries}/", "processed_uri": ["berry", "firmness", "berries"], "description": "A list of the berries with this firmness.", "parameter": "", "processed_des_para": ["list", "berry", "firmness"]}
{"http_verb": "POST", "uri": "/datasources/bulk-delete", "processed_uri": ["data", "sources", "bulk", "delete"], "description": "Bulk delete multiple data sources.", "parameter": "", "processed_des_para": ["bulk", "delete", "multiple", "datum", "source"]}
{"http_verb": "DELETE", "uri": "/shop/admin/prices/:price_id/staggered_prices/:id", "processed_uri": ["shop", "admin", "prices", "price", "identifer", "staggered", "prices", "identifer"], "description": "DELETE", "parameter": "", "processed_des_para": ["delet"]}
{"http_verb": "POST", "uri": "/createCardRelation", "processed_uri": ["create", "card", "relation"], "description": "Creates a card relation n/a", "parameter": "", "processed_des_para": ["create", "card", "relation"]}
{"http_verb": "GET", "uri": "/company/<realmID>/reports/InventoryValuationSummary?<name>=<value>", "processed_uri": ["company", "realm", "identifer", "reports", "inventory", "valuation", "summary"], "description": "Query a report", "parameter": "", "processed_des_para": ["query", "report"]}
{"http_verb": "POST", "uri": "v2/UpdateFavouriteOrder", "processed_uri": ["update", "favourite", "order"], "description": "Update the order favourites are displayed in n/a", "parameter": "", "processed_des_para": ["update", "order", "favourite", "display"]}
{"http_verb": "POST", "uri": "/createTeamDiscussionComment", "processed_uri": ["create", "team", "discussion", "comment"], "description": "Creates a new team discussion comment.clientMutationId: A unique identifier for the client performing the mutation., teamDiscussionComment: The new comment.", "parameter": "", "processed_des_para": ["create", "new", "team", "discussion", "commentclient", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "team", "discussion", "comment", "new", "comment"]}
{"http_verb": "GET", "uri": "/v18.0/{album-id}/photos", "processed_uri": ["album", "identifer", "photos"], "description": "A collection of Photos in the Album", "parameter": "", "processed_des_para": ["collection", "photo", "album"]}
{"http_verb": "POST", "uri": "/createEnterpriseOrganization", "processed_uri": ["create", "enterprise", "organization"], "description": "Creates an organization as part of an enterprise account. A personal accesstoken used to create an organization is implicitly permitted to update theorganization it created, if the organization is part of an enterprise that hasSAML enabled or uses Enterprise Managed Users. If the organization is not partof such an enterprise, and instead has SAML enabled for it individually, thetoken will then require SAML authorization to continue working against that organization.  clientMutationId: A unique identifier for the client performing the mutation., enterprise: The enterprise that owns the created organization., organization: The organization that was created.", "parameter": "", "processed_des_para": ["create", "organization", "part", "enterprise", "account", "personal", "accesstoken", "use", "create", "organization", "implicitly", "permit", "update", "theorganization", "create", "organization", "part", "enterprise", "sam", "enable", "use", "enterprise", "manage", "user", "organization", "partof", "enterprise", "instead", "sam", "enable", "individually", "thetoken", "require", "sam", "authorization", "continue", "work", "organization", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "enterprise", "enterprise", "own", "create", "organization", "organization", "organization", "create"]}
{"http_verb": "POST", "uri": "/disablePullRequestAutoMerge", "processed_uri": ["disable", "pull", "request", "auto", "merge"], "description": "Disable auto merge on the given pull request.  actor: Identifies the actor who performed the event., clientMutationId: A unique identifier for the client performing the mutation., pullRequest: The pull request auto merge was disabled on.", "parameter": "", "processed_des_para": ["disable", "auto", "merge", "give", "pull", "request", "actor", "identify", "actor", "perform", "event", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "pull", "request", "pull", "request", "auto", "merge", "disabled"]}
{"http_verb": "DELETE", "uri": "/domains/{domain}/administrator", "processed_uri": ["domains", "domain", "administrator"], "description": "Clear the administrator for this domain", "parameter": "", "processed_des_para": ["clear", "administrator", "domain"]}
{"http_verb": "PUT", "uri": "/domains/{domain}", "processed_uri": ["domains", "domain"], "description": "Update a GroupWise Domain given the Domain data", "parameter": "", "processed_des_para": ["update", "group", "wise", "domain", "give", "domain", "datum"]}
{"http_verb": "GET", "uri": "/echo", "processed_uri": ["echo"], "description": "Testing endpoint to validate the API with.", "parameter": "", "processed_des_para": ["testing", "endpoint", "validate", "ap"]}
{"http_verb": "POST", "uri": "/startRepositoryMigration", "processed_uri": ["start", "repository", "migration"], "description": "Starts a GitHub Enterprise Importer (GEI) repository migration.  clientMutationId: A unique identifier for the client performing the mutation., repositoryMigration: The new repository migration.", "parameter": "", "processed_des_para": ["start", "git", "hub", "enterprise", "importer", "ge", "repository", "migration", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "repository", "migration", "new", "repository", "migration"]}
{"http_verb": "GET", "uri": "/environments/{environment_id}/zones?key={key}&value={value}", "processed_uri": ["environments", "environment", "identifer", "zones"], "description": "Gets a list of all zones in the environment. Params can include the following: If key and value are specified, returns zones whose data objects contain the given key/value pair.", "parameter": "", "processed_des_para": ["get", "list", "zone", "environment", "param", "include", "follow", "key", "value", "specify", "return", "zone", "whose", "datum", "object", "contain", "give", "key", "value", "pair"]}
{"http_verb": "GET", "uri": "/shop/admin/prices/:price_id/staggered_prices/:id", "processed_uri": ["shop", "admin", "prices", "price", "identifer", "staggered", "prices", "identifer"], "description": "Retrieve Staggered Price", "parameter": "", "processed_des_para": ["retrieve", "staggered", "price"]}
{"http_verb": "POST", "uri": "/updateSponsorshipPreferences", "processed_uri": ["update", "sponsorship", "preferences"], "description": "Change visibility of your sponsorship and opt in or out of email updates from the maintainer.  clientMutationId: A unique identifier for the client performing the mutation., sponsorship: The sponsorship that was updated.", "parameter": "", "processed_des_para": ["change", "visibility", "sponsorship", "opt", "email", "update", "maintainer", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "sponsorship", "sponsorship", "update"]}
{"http_verb": "GET", "uri": "/devices/smoke_co_alarms/device_id/name", "processed_uri": ["devices", "smoke", "carbon", "monoxide", "alarms", "device", "identifer", "name"], "description": "Display name of the device; can be any room name from a list we provide, or a custom name.", "parameter": "", "processed_des_para": ["display", "name", "device", "room", "name", "list", "provide", "custom", "name"]}
{"http_verb": "POST", "uri": "/v2/oauth/token", "processed_uri": ["authentication", "token"], "description": "Converting Authorization Codes To Access Tokens", "parameter": "", "processed_des_para": ["convert", "authorization", "code", "access", "token"]}
{"http_verb": "GET", "uri": "/data-feeds/{dataSourceId}/plans/", "processed_uri": ["data", "feeds", "data", "source", "identifer", "plans"], "description": "Gets the list of plans under a 'Data Feed'.", "parameter": "", "processed_des_para": ["get", "list", "plan", "datum", "feed"]}
{"http_verb": "POST", "uri": "/company/<realmID>/account", "processed_uri": ["company", "realm", "identifer", "account"], "description": "Use this operation to update any of the writable fields of an existing account object. The request body must include all writable fields of the existing object as returned in a read response. Writable fields omitted from the request body are set to NULL. The ID of the object to update is specified in the request body.", "parameter": "", "processed_des_para": ["use", "operation", "update", "writable", "field", "exist", "account", "object", "request", "body", "must", "include", "writable", "field", "exist", "object", "return", "read", "response", "writable", "field", "omit", "request", "body", "set", "nul", "object", "update", "specify", "request", "body"]}
{"http_verb": "POST", "uri": "/updateOrganizationAllowPrivateRepositoryForkingSetting", "processed_uri": ["update", "organization", "allow", "private", "repository", "forking", "setting"], "description": "Sets whether private repository forks are enabled for an organization.  clientMutationId: A unique identifier for the client performing the mutation., message: A message confirming the result of updating the allow private repository forking setting., organization: The organization with the updated allow private repository forking setting.", "parameter": "", "processed_des_para": ["set", "whether", "private", "repository", "fork", "enable", "organization", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "message", "message", "confirm", "result", "update", "allow", "private", "repository", "fork", "set", "organization", "organization", "update", "allow", "private", "repository", "fork", "set"]}
{"http_verb": "GET", "uri": "/licenses", "processed_uri": ["licenses"], "description": "Return a list of known open source licenses.", "parameter": "", "processed_des_para": ["return", "list", "know", "open", "source", "license"]}
{"http_verb": "GET", "uri": "/scenes", "processed_uri": ["scenes"], "description": "Returns a list of Scenes created by the current application. This call accepts a user token as the access token. Required permissions: Application has READ on Scene device type and WRITE on devices used in the Scene.", "parameter": "", "processed_des_para": ["return", "list", "scene", "create", "current", "application", "call", "accept", "user", "token", "access", "token", "permission", "application", "rea", "scene", "device", "type", "writ", "device", "use", "scene"]}
{"http_verb": "GET", "uri": "/codeadmin/failed/{systemKey}", "processed_uri": ["code", "admin", "failed", "system", "key"], "description": "Lists failed code service runs for specified system", "parameter": "", "processed_des_para": ["list", "fail", "code", "service", "run", "specify", "system"]}
{"http_verb": "GET", "uri": "/v2/users", "processed_uri": ["users"], "description": "Returns a variety of information about one or more users specified by the requested IDs.", "parameter": "", "processed_des_para": ["return", "variety", "information", "one", "user", "specify", "request", "ds"]}
{"http_verb": "DELETE", "uri": "/price_rules/{price_rule_id}.json", "processed_uri": ["price", "rules", "price", "rule", "identifer"], "description": "Remove an existing PriceRule", "parameter": "", "processed_des_para": ["remove", "exist", "price", "rule"]}
{"http_verb": "POST", "uri": "/devices/thermostats/device_id/temperature_scale", "processed_uri": ["devices", "thermostats", "device", "identifer", "temperature", "scale"], "description": "Fahrenheit or Celsius; used with temperature display.", "parameter": "", "processed_des_para": ["fahrenheit", "celsius", "use", "temperature", "display"]}
{"http_verb": "GET", "uri": "/v1/me/library/music-videos", "processed_uri": ["library", "music", "videos"], "description": "Fetch all the library music videos in alphabetical order.  n/a", "parameter": "", "processed_des_para": ["fetch", "library", "music", "video", "alphabetical", "order"]}
{"http_verb": "DELETE", "uri": "/{page_id}/subscribed_apps.", "processed_uri": ["page", "identifer", "subscribed", "applications"], "description": "You can dissociate an Application from a Page by making a DELETE request to /{page_id}/subscribed_apps", "parameter": "", "processed_des_para": ["dissociate", "application", "page", "make", "delet", "request", "page", "identifer", "subscribe", "application"]}
{"http_verb": "POST", "uri": "/updateDiscussion", "processed_uri": ["update", "discussion"], "description": "Update a discussion.  clientMutationId: A unique identifier for the client performing the mutation., discussion: The modified discussion.", "parameter": "", "processed_des_para": ["update", "discussion", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "discussion", "modify", "discussion"]}
{"http_verb": "GET", "uri": "/publication/{id}", "processed_uri": ["publication", "identifer"], "description": "Lookup a publication by ID. id id ID! non-null The ID of the Publication to return.", "parameter": "", "processed_des_para": ["lookup", "publication", "identifer", "identifer", "non", "null", "publication", "return"]}
{"http_verb": "GET", "uri": "/devices/cameras/device_id/is_public_share_enabled", "processed_uri": ["devices", "cameras", "device", "identifer", "public", "share", "enabled"], "description": "Users can choose to share their video and make it viewable by anyone. When public share is enabled, you can read public_share_url.", "parameter": "", "processed_des_para": ["user", "choose", "share", "video", "make", "viewable", "anyone", "public", "share", "enable", "read", "public", "share", "url"]}
{"http_verb": "GET", "uri": "/organizations/{ids}", "processed_uri": ["organizations", "identifications"], "description": "Lookup organizations by their ID ids: [ID] The organizations IDs", "parameter": "", "processed_des_para": ["lookup", "organization", "identification", "organization", "ds"]}
{"http_verb": "GET", "uri": "/domains/{domain}", "processed_uri": ["domains", "domain"], "description": "Get a specific Domain given the name", "parameter": "", "processed_des_para": ["get", "specific", "domain", "give", "name"]}
{"http_verb": "GET", "uri": "v2/berry-flavor/{id or name}/", "processed_uri": ["berry", "flavor", "identifer", "name"], "description": "Flavors determine whether a Pokamon will benefit or suffer from eating a berry based on their nature.", "parameter": "", "processed_des_para": ["flavor", "determine", "whether", "pokamon", "benefit", "suffer", "eat", "berry", "base", "nature"]}
{"http_verb": "POST", "uri": "/resolveReviewThread", "processed_uri": ["resolve", "review", "thread"], "description": "Marks a review thread as resolved.  clientMutationId: A unique identifier for the client performing the mutation., thread: The thread to resolve.", "parameter": "", "processed_des_para": ["mark", "review", "thread", "resolve", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "thread", "thread", "resolve"]}
{"http_verb": "GET", "uri": "/v2/berry/{smoothness}/", "processed_uri": ["berry", "smoothness"], "description": "The smoothness of this Berry, used in making PokÃƒÂ©blocks or Poffins.", "parameter": "", "processed_des_para": ["smoothness", "berry", "use", "make", "pokblock", "poffin"]}
{"http_verb": "POST", "uri": "/deleteIssueComment", "processed_uri": ["delete", "issue", "comment"], "description": "Deletes an IssueComment object.  clientMutationId: A unique identifier for the client performing the mutation.", "parameter": "", "processed_des_para": ["delete", "issue", "comment", "object", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation"]}
{"http_verb": "GET", "uri": "/application_charges/{application_charge_id}.json", "processed_uri": ["application", "charges", "application", "charge", "identifer"], "description": "Retrieves an application charge", "parameter": "", "processed_des_para": ["retrieve", "application", "charge"]}
{"http_verb": "POST", "uri": "/sendInboxEmail", "processed_uri": ["send", "inbox", "email"], "description": "Sends an email", "parameter": "", "processed_des_para": ["send", "email"]}
{"http_verb": "GET", "uri": "/node", "processed_uri": ["node"], "description": "Fetches an object given its ID.  id: ID of the object.", "parameter": "", "processed_des_para": ["fetch", "object", "give", "identifer", "object"]}
{"http_verb": "POST", "uri": "/bui/attmnt", "processed_uri": ["return", "attachment"], "description": "Upload an attachment to SDM and also links the attachment to the specified factory object if parentFactory and parentId parameter values are provided, else simply uploads the file.", "parameter": "", "processed_des_para": ["upload", "attachment", "sd", "also", "link", "attachment", "specify", "factory", "object", "parent", "factory", "parent", "identifer", "parameter", "value", "provide", "else", "simply", "upload", "file"]}
{"http_verb": "GET", "uri": "/v19.0/{application-id}/subscribed_domains_phishing", "processed_uri": ["application", "identifer", "subscribed", "domains", "phishing"], "description": "GETGraphApplicationSubscribedDomainsPhishingEdge", "parameter": "", "processed_des_para": ["get", "graph", "application", "subscribe", "domain", "phishe", "edge"]}
{"http_verb": "GET", "uri": "/destinations/limits", "processed_uri": ["destinations", "limits"], "description": "Returns a count of the maximum number of destinations you can create.", "parameter": "", "processed_des_para": ["return", "count", "maximum", "number", "destination", "create"]}
{"http_verb": "POST", "uri": "/deletePipeRelation", "processed_uri": ["delete", "pipe", "relation"], "description": "Deletes a pipe relation", "parameter": "", "processed_des_para": ["delete", "pipe", "relation"]}
{"http_verb": "PUT", "uri": "/makeResultPublic/{id}?accessKey={accessKey}&makeResultPublic={makeResultPublic}", "processed_uri": ["make", "result", "public", "identifer"], "description": "Enable or disable the ability to view survey results by non autorized user via direct link.", "parameter": "", "processed_des_para": ["enable", "disable", "ability", "view", "survey", "result", "non", "autorize", "user", "via", "direct"]}
{"http_verb": "GET", "uri": "/explainVulnerabilityPrompt/{vulnerabilityId}", "processed_uri": ["explain", "vulnerability", "prompt", "vulnerability", "identifer"], "description": "GitLab Duo Vulnerability summary prompt for a specified vulnerability. vulnerabilityId VulnerabilityID! Vulnerability to generate a prompt for.", "parameter": "", "processed_des_para": ["git", "lab", "duo", "vulnerability", "summary", "prompt", "specify", "vulnerability", "vulnerability", "identifer", "vulnerability", "vulnerability", "generate", "prompt"]}
{"http_verb": "GET", "uri": "/api/collection/{systemKey}/{collectionName}", "processed_uri": ["application", "programming", "interface", "collection", "system", "key", "collection", "name"], "description": "fetch collection", "parameter": "", "processed_des_para": ["fetch", "collection"]}
{"http_verb": "GET", "uri": "/company/<realmID>/query?query=<selectStatement>", "processed_uri": ["company", "realm", "identifer", "query"], "description": "Query a bill", "parameter": "", "processed_des_para": ["query", "bill"]}
{"http_verb": "GET", "uri": "/codeadmin/failed", "processed_uri": ["code", "admin", "failed"], "description": "Lists failed code service runs for all systems that a developer can access", "parameter": "", "processed_des_para": ["list", "fail", "code", "service", "run", "system", "developer", "access"]}
{"http_verb": "POST", "uri": "/removeAssigneesFromAssignable", "processed_uri": ["remove", "assignees", "assignable"], "description": "Removes assignees from an assignable object.  assignable: The item that was unassigned., clientMutationId: A unique identifier for the client performing the mutation.", "parameter": "", "processed_des_para": ["remove", "assignee", "assignable", "object", "assignable", "item", "unassigne", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation"]}
{"http_verb": "GET", "uri": "/scenes/<sceneID>", "processed_uri": ["scenes", "scene", "identifer"], "description": "Returns a Scene. This call accepts application and user tokens as the access token. Required permissions: Application has READ on Scene device type and WRITE on devices used in the Scene.", "parameter": "", "processed_des_para": ["return", "scene", "call", "accept", "application", "user", "token", "access", "token", "permission", "application", "rea", "scene", "device", "type", "writ", "device", "use", "scene"]}
{"http_verb": "GET", "uri": "/v1/me/library/playlists", "processed_uri": ["library", "playlists"], "description": "Fetch one or more library playlists by using their identifiers.", "parameter": "", "processed_des_para": ["fetch", "one", "library", "playlist", "use", "identifier"]}
{"http_verb": "POST", "uri": "/deleteTableRelation", "processed_uri": ["delete", "table", "relation"], "description": "Deletes a table relation", "parameter": "", "processed_des_para": ["delete", "table", "relation"]}
{"http_verb": "GET", "uri": "/v19.0/{application-id}/button_auto_detection_device_selection", "processed_uri": ["application", "identifer", "button", "auto", "detection", "device", "selection"], "description": "to turn on auto device sampling. device_id string Device id of the given app.", "parameter": "", "processed_des_para": ["turn", "auto", "device", "sampling", "device", "identifer", "string", "device", "identifer", "give", "application"]}
{"http_verb": "GET", "uri": "/destinations/{destinationId}/mappings-by-priority/", "processed_uri": ["destinations", "destination", "identifer", "mappings", "priority"], "description": "Returns a list of destination mappings for a specific cookie destination by 'destinationId' in the ascending order of priority.", "parameter": "", "processed_des_para": ["return", "list", "destination", "mapping", "specific", "cookie", "destination", "destination", "identifer", "ascend", "order", "priority"]}
{"http_verb": "GET", "uri": "/bui/kdLinkInfo({id})", "processed_uri": ["return", "knowledge", "document", "link", "information", "identifier"], "description": "It tells whether the KD article attached to the ticket is an accepted solution for the problem mentioned in the ticket.", "parameter": "", "processed_des_para": ["tell", "whether", "article", "attach", "ticket", "accept", "solution", "problem", "mention", "ticket"]}
{"http_verb": "POST", "uri": "/ParseErrorRange", "processed_uri": ["parse", "error", "range"], "description": "A range of ShopifyQL parsing errors.", "parameter": "", "processed_des_para": ["range", "shopify", "parse", "error"]}
{"http_verb": "GET", "uri": "/ping", "processed_uri": ["ping"], "description": "Returns the literal string 'pong'.", "parameter": "", "processed_des_para": ["return", "literal", "string", "pong"]}
{"http_verb": "DELETE", "uri": "/customers/{customer_id}/addresses/{address_id}.json", "processed_uri": ["customers", "customer", "identifer", "addresses", "address", "identifer"], "description": "Removes an address from a customerÂ’s address list", "parameter": "", "processed_des_para": ["remove", "address", "customer", "address", "list"]}
{"http_verb": "GET", "uri": "/v2/lists/:id/tweets", "processed_uri": ["lists", "identifer", "tweets"], "description": "Returns a list of Tweets from the specified List.  id REQUIRED string The ID of the List whose Tweets you would like to retrieve.", "parameter": "", "processed_des_para": ["return", "list", "tweet", "specify", "list", "identifer", "string", "list", "whose", "tweet", "like", "retrieve"]}
{"http_verb": "GET", "uri": "/namespace", "processed_uri": ["namespace"], "description": "Find a namespace.", "parameter": "", "processed_des_para": ["find", "namespace"]}
{"http_verb": "GET", "uri": "/price_rules/{price_rule_id}.json", "processed_uri": ["price", "rules", "price", "rule", "identifer"], "description": "Retrieves a single price rule", "parameter": "", "processed_des_para": ["retrieve", "single", "price", "rule"]}
{"http_verb": "GET", "uri": "/devices/thermostats/device_id/device_id", "processed_uri": ["devices", "thermostats", "device", "identifer", "device", "identifer"], "description": "Nest Thermostat unique identifier.", "parameter": "", "processed_des_para": ["nest", "thermostat", "unique", "identifier"]}
{"http_verb": "PUT", "uri": "/signals/derived/{derivedSignalId}", "processed_uri": ["signals", "derived", "derived", "signal", "identifer"], "description": "Updates a single derived signal.", "parameter": "", "processed_des_para": ["update", "single", "derive", "signal"]}
{"http_verb": "POST", "uri": "/files/delete_batch/check", "processed_uri": ["files", "delete", "batch", "check"], "description": "Returns the status of an asynchronous job for delete_batch. If success, it returns list of result for each entry.", "parameter": "", "processed_des_para": ["return", "status", "asynchronous", "job", "delete", "batch", "success", "return", "list", "result", "entry"]}
{"http_verb": "POST", "uri": "/users/<userID>/properties", "processed_uri": ["users", "user", "identifer", "properties"], "description": "Specifies the properties of a user's application. The call must be authenticated with a valid Authorization header. The application for which the properties are created is the application linked to the Authorization token and MUST be the same as the aid parameter sent in the JSON Payload.", "parameter": "", "processed_des_para": ["specify", "property", "user", "application", "call", "must", "authenticate", "valid", "authorization", "header", "application", "property", "create", "application", "link", "authorization", "token", "mus", "aid", "parameter", "send", "jso", "payload"]}
{"http_verb": "GET", "uri": "/devices/thermostats/device_id/eco_temperature_high_c", "processed_uri": ["devices", "thermostats", "device", "identifer", "eco", "temperature", "high"], "description": "Maximum Eco Temperature, displayed in half degrees Celsius (0.5Â°C). Used when hvac_mode = eco.", "parameter": "", "processed_des_para": ["maximum", "eco", "temperature", "display", "half", "degree", "celsius", "use", "hvac", "mode", "eco"]}
{"http_verb": "GET", "uri": "/v1/me/library/songs", "processed_uri": ["library", "songs"], "description": "Fetch one or more library songs by using their identifiers.", "parameter": "", "processed_des_para": ["fetch", "one", "library", "song", "use", "identifier"]}
{"http_verb": "DELETE", "uri": "/deployment/resources/addresses/<addressUUID>", "processed_uri": ["deployment", "resources", "addresses", "address", "uuid"], "description": "Deleting an address. You can use the representational state transfer (REST) application programming interface (API) to delete an address.", "parameter": "", "processed_des_para": ["delete", "address", "use", "representational", "state", "transfer", "res", "application", "programming", "interface", "ap", "delete", "address"]}
{"http_verb": "GET", "uri": "/v1/me/ratings/library-albums/{id}", "processed_uri": ["ratings", "library", "albums", "identifer"], "description": "Fetch a user's rating for specific content by using the content's identifier.  id string (Required) The unique identifier for the library album.", "parameter": "", "processed_des_para": ["fetch", "user", "rate", "specific", "content", "use", "content", "identifier", "identifer", "string", "unique", "identifier", "library", "album"]}
{"http_verb": "POST", "uri": "/createTableField", "processed_uri": ["create", "table", "field"], "description": "Creates a table field", "parameter": "", "processed_des_para": ["create", "table", "field"]}
{"http_verb": "GET", "uri": "/paypalFinancingOptions", "processed_uri": ["paypal", "financing", "options"], "description": "Retrieve PayPal financing options that include payment installment plans.", "parameter": "", "processed_des_para": ["retrieve", "pay", "pal", "financing", "option", "include", "payment", "installment", "plan"]}
{"http_verb": "POST", "uri": "/customers.json", "processed_uri": ["customers"], "description": "Creates a customer", "parameter": "", "processed_des_para": ["create", "customer"]}
{"http_verb": "GET", "uri": "/getArchive?accessKey={accessKey}&ownerId={ownerId}", "processed_uri": ["get", "archive"], "description": "Returns the list of archive surveys.", "parameter": "", "processed_des_para": ["return", "list", "archive", "survey"]}
{"http_verb": "POST", "uri": "/unarchiveRepository", "processed_uri": ["unarchive", "repository"], "description": "Unarchives a repository.  clientMutationId: A unique identifier for the client performing the mutation., repository: The repository that was unarchived.", "parameter": "", "processed_des_para": ["unarchives", "repository", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "repository", "repository", "unarchive"]}
{"http_verb": "POST", "uri": "/deletePullRequestReview", "processed_uri": ["delete", "pull", "request", "review"], "description": "Deletes a pull request review.  clientMutationId: A unique identifier for the client performing the mutation., pullRequestReview: The deleted pull request review.", "parameter": "", "processed_des_para": ["deletes", "pull", "request", "review", "client", "mutation", "identifer", "unique", "identifier", "client", "perform", "mutation", "pull", "request", "review", "delete", "pull", "request", "review"]}
{"http_verb": "POST", "uri": "/api/businesses.v1/{orgId}/programs/{programId}/users", "processed_uri": ["application", "programming", "interface", "businessesv", "organization", "identifer", "programs", "program", "identifer", "users"], "description": "Update a user data in organization's program by email or externalId.", "parameter": "", "processed_des_para": ["update", "user", "datum", "organization", "program", "email", "external", "identifer"]}
{"http_verb": "GET", "uri": "/v3/events/event_id", "processed_uri": ["events", "event", "identifer"], "description": "Get the detailed information of a Yelp event. Get the event ID from /events or /events/featured.", "parameter": "", "processed_des_para": ["get", "detailed", "information", "yelp", "event", "get", "event", "event", "event", "feature"]}
{"http_verb": "POST", "uri": "/v1/delivery/store/{store_id}/update-store-prep-time", "processed_uri": ["delivery", "store", "store", "identifer", "update", "store", "prep", "time"], "description": "Updates the preptime of a given store", "parameter": "", "processed_des_para": ["update", "preptime", "give", "store"]}
