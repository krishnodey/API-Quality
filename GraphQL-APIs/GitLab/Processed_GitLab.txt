{"http_verb": "GET ", "uri": " /abuseReport/{id} ", "processed_uri": ["abuse", "report", "identification"], "description": "Find an abuse report. ", "parameter": "id\tAbuseReportID!\tID of the abuse report.\n", "processed_des_para": ["find", "abuse", "report", "identification", "abuse", "report", "abuse", "report"]}
{"http_verb": "GET ", "uri": " /abuseReportLabels ", "processed_uri": ["abuse", "report", "labels"], "description": " Abuse report labels. ", "parameter": " searchTerm\tString\tSearch term to find labels with.\n", "processed_des_para": ["abuse", "report", "label", "search", "term", "search", "term", "find", "label"]}
{"http_verb": "GET ", "uri": " /addOnPurchase/{id} ", "processed_uri": ["add", "purchase", "identification"], "description": " Retrieve the active add-on purchase. This query can be used in GitLab SaaS and self-managed environments addOnType\tGitlabSubscriptionsAddOnType!\tType of add-on for the add-on purchase. namespaceId\tNamespaceID\tID of namespace that the add-on was purchased for.\n", "parameter": "", "processed_des_para": ["retrieve", "active", "add", "purchase", "query", "use", "git", "lab", "saa", "self", "manage", "environment", "add", "type", "gitlab", "subscription", "add", "type", "type", "add", "add", "purchase", "namespace", "identification", "namespace", "namespace", "add", "purchase"]}
{"http_verb": "GET ", "uri": " /aiMessages ", "processed_uri": ["ai", "messages"], "description": " Find GitLab Duo Chat messages. ", "parameter": " requestIds\t[ID!]\tArray of request IDs to fetch. roles\t[AiMessageRole!]\tArray of roles to fetch.\n", "processed_des_para": ["find", "git", "lab", "duo", "chat", "message", "request", "identification", "array", "request", "ds", "fetch", "role", "ai", "message", "role", "array", "role", "fetch"]}
{"http_verb": "GET ", "uri": " /auditEventDefinitions ", "processed_uri": ["audit", "event", "definitions"], "description": "Definitions for all audit events available on the instance. ", "parameter": " n/a\n", "processed_des_para": ["definition", "audit", "event", "available", "instance"]}
{"http_verb": "GET ", "uri": " /auditEventsInstanceAmazonS3Configurations ", "processed_uri": ["audit", "events", "instance", "amazon", "configurations"], "description": " Instance-level Amazon S3 configurations for audit events.", "parameter": " n/a\n", "processed_des_para": ["instance", "level", "amazon", "configuration", "audit", "event"]}
{"http_verb": "GET ", "uri": " /boardList/{id} ", "processed_uri": ["board", "list", "identification"], "description": " Find an issue board list. ", "parameter": "id\tListID!\tGlobal ID of the list.\n", "processed_des_para": ["find", "issue", "board", "list", "identification", "list", "global", "list"]}
{"http_verb": "GET ", "uri": " /ciCatalogResource/{id}", "processed_uri": ["client", "catalog", "resource", "identification"], "description": " A single CI/CD Catalog resource visible to an authorized user. ", "parameter": "id\tCiCatalogResourceID\tCI/CD Catalog resource global ID.\n", "processed_des_para": ["single", "catalog", "resource", "visible", "authorize", "user", "identification", "client", "catalog", "resource", "catalog", "resource", "global", "identification"]}
{"http_verb": "GET ", "uri": " /ciCatalogResources/{projectPath}", "processed_uri": ["client", "catalog", "resources", "project", "path"], "description": " All CI/CD Catalog resources under a common namespace, visible to an authorized user. ", "parameter": "projectPath\tID\tProject with the namespace catalog.\n", "processed_des_para": ["catalog", "resource", "common", "namespace", "visible", "authorize", "user", "project", "path", "project", "namespace", "catalog"]}
{"http_verb": "GET ", "uri": " /ciConfig/{projectPath} ", "processed_uri": ["client", "configuration", "project", "path"], "description": " Linted and processed contents of a CI config. Should not be requested more than once per request ", "parameter": "projectPath\tID!\tProject of the CI config.\n", "processed_des_para": ["linted", "process", "content", "configuration", "request", "per", "request", "project", "path", "project", "configuration"]}
{"http_verb": "GET ", "uri": " /ciMinutesUsage/{namespaceId} ", "processed_uri": ["client", "minutes", "usage", "namespace", "identification"], "description": "Compute usage data for a namespace. ", "parameter": " namespaceId\tNamespaceID\tGlobal ID of the Namespace for the monthly compute usage.\n", "processed_des_para": ["compute", "usage", "datum", "namespace", "namespace", "identification", "namespace", "global", "namespace", "monthly", "compute", "usage"]}
{"http_verb": "GET ", "uri": " /ciPipelineStage/{id} ", "processed_uri": ["client", "pipeline", "stage", "identification"], "description": " Stage belonging to a CI pipeline.", "parameter": "id\tCiStageID!\tGlobal ID of the CI stage.\n", "processed_des_para": ["stage", "belong", "pipeline", "identification", "client", "stage", "global", "stage"]}
{"http_verb": "GET ", "uri": " /ciQueueingHistory ", "processed_uri": ["client", "queueing", "history"], "description": "Time it took for ci job to be picked up by runner in percentiles.", "parameter": "n/a\n", "processed_des_para": ["time", "take", "client", "job", "pick", "runner", "percentile"]}
{"http_verb": "GET ", "uri": " /ciVariables ", "processed_uri": ["client", "variables"], "description": " List of the instance’s CI/CD variables. ", "parameter": " n/a\n", "processed_des_para": ["list", "instance", "variable"]}
{"http_verb": "GET ", "uri": " /containerRepository/{id} ", "processed_uri": ["container", "repository", "identification"], "description": " Find a container repository. ", "parameter": "id\tContainerRepositoryID!\tGlobal ID of the container repository.\n", "processed_des_para": ["find", "container", "repository", "identification", "container", "repository", "global", "container", "repository"]}
{"http_verb": "GET ", "uri": " /currentLicense ", "processed_uri": ["current", "license"], "description": " Fields related to the current license. ", "parameter": "n/a\n", "processed_des_para": ["field", "relate", "current", "license"]}
{"http_verb": "GET ", "uri": " /currentUser ", "processed_uri": ["current", "user"], "description": " Get information about current user. ", "parameter": "n/a\n", "processed_des_para": ["get", "information", "current", "user"]}
{"http_verb": "GET ", "uri": " /designManagement ", "processed_uri": ["design", "management"], "description": " Fields related to design management. ", "parameter": "n/a\n", "processed_des_para": ["field", "relate", "design", "management"]}
{"http_verb": "GET ", "uri": " /devopsAdoptionEnabledNamespaces/{displayNamespaceId} ", "processed_uri": ["devops", "adoption", "enabled", "namespaces", "display", "namespace", "identification"], "description": "Get configured DevOps adoption namespaces. BETA This endpoint is subject to change without notice. ", "parameter": " displayNamespaceId\tNamespaceID\tFilter by display namespace.\n", "processed_des_para": ["get", "configure", "dev", "op", "adoption", "namespace", "bet", "endpoint", "subject", "change", "without", "notice", "display", "namespace", "identification", "namespace", "filter", "display", "namespace"]}
{"http_verb": "GET ", "uri": " /echo ", "processed_uri": ["echo"], "description": " Testing endpoint to validate the API with. ", "parameter": "n/a\n", "processed_des_para": ["testing", "endpoint", "validate", "ap"]}
{"http_verb": "GET ", "uri": " /epicBoardList/{id} ", "processed_uri": ["epic", "board", "list", "identification"], "description": " Returns EpicList. ", "parameter": " id\tBoardsEpicListID!\tGlobal ID of the list.\n", "processed_des_para": ["return", "epic", "list", "identification", "board", "epic", "list", "global", "list"]}
{"http_verb": "GET ", "uri": " /explainVulnerabilityPrompt/{vulnerabilityId} ", "processed_uri": ["explain", "vulnerability", "prompt", "vulnerability", "identification"], "description": "GitLab Duo Vulnerability summary prompt for a specified vulnerability.", "parameter": "vulnerabilityId\tVulnerabilityID!\tVulnerability to generate a prompt for.\n", "processed_des_para": ["git", "lab", "duo", "vulnerability", "summary", "prompt", "specify", "vulnerability", "vulnerability", "identification", "vulnerability", "vulnerability", "generate", "prompt"]}
{"http_verb": "GET ", "uri": " /frecentGroups ", "processed_uri": ["frecent", "groups"], "description": " A user’s frecently visited groups.", "parameter": "n/a\n", "processed_des_para": ["user", "frecently", "visit", "group"]}
{"http_verb": "GET ", "uri": " /frecentProjects ", "processed_uri": ["frecent", "projects"], "description": " A user’s frecently visited projects. ", "parameter": " n/a\n", "processed_des_para": ["user", "frecently", "visit", "project"]}
{"http_verb": "GET ", "uri": " /geoNode ", "processed_uri": ["geo", "node"], "description": " Find a Geo node ", "parameter": " n/a\n", "processed_des_para": ["find", "geo", "node"]}
{"http_verb": "GET ", "uri": " /gitpodEnabled ", "processed_uri": ["gitpod", "enabled"], "description": " Whether Gitpod is enabled in application settings. ", "parameter": "n/a\n", "processed_des_para": ["whether", "gitpod", "enable", "application", "setting"]}
{"http_verb": "GET ", "uri": " /group ", "processed_uri": ["group"], "description": " Find a group ", "parameter": " n/a\n", "processed_des_para": ["find", "group"]}
{"http_verb": "GET ", "uri": " groups ", "processed_uri": ["groups"], "description": " Find groups. ", "parameter": " n/a\n", "processed_des_para": ["find", "group"]}
{"http_verb": "GET ", "uri": " /instanceExternalAuditEventDestinations ", "processed_uri": ["instance", "external", "audit", "event", "destinations"], "description": " Instance level external audit event destinations. ", "parameter": " n/a\n", "processed_des_para": ["instance", "level", "external", "audit", "event", "destination"]}
{"http_verb": "GET ", "uri": " /instanceGoogleCloudLoggingConfigurations ", "processed_uri": ["instance", "google", "cloud", "logging", "configurations"], "description": " Instance level google cloud logging configurations. ", "parameter": " n/a\n", "processed_des_para": ["instance", "level", "google", "cloud", "log", "configuration"]}
{"http_verb": "GET ", "uri": " /instanceSecurityDashboard ", "processed_uri": ["instance", "security", "dashboard"], "description": " Fields related to Instance Security Dashboard.", "parameter": "n/a\n", "processed_des_para": ["field", "relate", "instance", "security", "dashboard"]}
{"http_verb": "GET ", "uri": " /issue/{id} ", "processed_uri": ["issue", "identification"], "description": " Find an issue. ", "parameter": " id\tIssueID!\tGlobal ID of the issue.\n", "processed_des_para": ["find", "issue", "identification", "issue", "global", "issue"]}
{"http_verb": "GET ", "uri": " /issues/{assigneeId} ", "processed_uri": ["issues", "assignee", "identification"], "description": " Find issues visible to the current user. At least one filter must be provided.", "parameter": "assigneeId\tString\tID of a user assigned to the issues.\n", "processed_des_para": ["find", "issue", "visible", "current", "user", "least", "one", "filter", "must", "provide", "assignee", "identification", "user", "assign", "issue"]}
{"http_verb": "GET ", "uri": " /iteration/{id} ", "processed_uri": ["iteration", "identification"], "description": " Find an iteration. ", "parameter": " id\tIterationID!\tFind an iteration by its ID.\n", "processed_des_para": ["find", "iteration", "identification", "iteration", "find", "iteration", "identification"]}
{"http_verb": "GET ", "uri": " /jobs ", "processed_uri": ["jobs"], "description": " All jobs on this GitLab instance. Returns an empty result for users without administrator access. ", "parameter": "n/a\n", "processed_des_para": ["job", "git", "lab", "instance", "return", "empty", "result", "user", "without", "administrator", "access"]}
{"http_verb": "GET ", "uri": " /licenseHistoryEntries ", "processed_uri": ["license", "history", "entries"], "description": "Fields related to entries in the license history. ", "parameter": " n/a\n", "processed_des_para": ["field", "relate", "entry", "license", "history"]}
{"http_verb": "GET ", "uri": " /memberRole/{id} ", "processed_uri": ["member", "role", "identification"], "description": " Finds a single custom role. ", "parameter": "id\tMemberRoleID\tGlobal ID of the member role to look up.\n", "processed_des_para": ["find", "single", "custom", "role", "identification", "member", "role", "global", "member", "role", "look"]}
{"http_verb": "GET ", "uri": " /memberRolePermissions ", "processed_uri": ["member", "role", "permissions"], "description": "List of all customizable permissions.", "parameter": "n/a\n", "processed_des_para": ["list", "customizable", "permission"]}
{"http_verb": "GET ", "uri": " /memberRoles/{id} ", "processed_uri": ["member", "roles", "identification"], "description": " Member roles available for the instance.", "parameter": "id\tMemberRoleID\tGlobal ID of the member role to look up.\n", "processed_des_para": ["member", "role", "available", "instance", "identification", "member", "role", "global", "member", "role", "look"]}
{"http_verb": "GET ", "uri": " /mergeRequest/{id} ", "processed_uri": ["merge", "request", "identification"], "description": "Find a merge request. ", "parameter": " id\tMergeRequestID!\tGlobal ID of the merge request.\n", "processed_des_para": ["find", "merge", "request", "identification", "merge", "request", "global", "merge", "request"]}
{"http_verb": "GET ", "uri": " /metadata ", "processed_uri": ["metadata"], "description": " Metadata about GitLab. ", "parameter": " n/a\n", "processed_des_para": ["metadata", "git", "lab"]}
{"http_verb": "GET ", "uri": " /milestone/{id} ", "processed_uri": ["milestone", "identification"], "description": " Find a milestone. ", "parameter": " id\tMilestoneID!\tFind a milestone by its ID.\n", "processed_des_para": ["find", "milestone", "identification", "milestone", "find", "milestone", "identification"]}
{"http_verb": "GET ", "uri": " /mlModel/{id} ", "processed_uri": ["machine", "learning", "model", "identification"], "description": " Find machine learning models. ", "parameter": " id\tMlModelID!\tID of the model.\n", "processed_des_para": ["find", "machine", "learning", "model", "identification", "machine", "learning", "model", "model"]}
{"http_verb": "GET ", "uri": " /namespace ", "processed_uri": ["namespace"], "description": " Find a namespace.", "parameter": "n/a\n", "processed_des_para": ["find", "namespace"]}
{"http_verb": "GET ", "uri": " /note/{id} ", "processed_uri": ["note", "identification"], "description": " Find a note. ", "parameter": " n/a\n", "processed_des_para": ["find", "note"]}
{"http_verb": "GET ", "uri": " /organization/{id} ", "processed_uri": ["organization", "identification"], "description": " Find an organization. ", "parameter": " id\tOrganizationsOrganizationID!\tID of the organization.\n", "processed_des_para": ["find", "organization", "identification", "organization", "organization", "organization"]}
{"http_verb": "GET ", "uri": " /organizations ", "processed_uri": ["organizations"], "description": " List organizations.", "parameter": "n/a\n", "processed_des_para": ["list", "organization"]}
{"http_verb": "GET ", "uri": " /package/{id} ", "processed_uri": ["package", "identification"], "description": " Find a package. This field can only be resolved for one query in any single request. Returns null if a package has no default status. ", "parameter": " id\tPackagesPackageID!\tGlobal ID of the package.\n", "processed_des_para": ["find", "package", "field", "resolve", "one", "query", "single", "request", "return", "null", "package", "default", "status", "identification", "package", "package", "global", "package"]}
{"http_verb": "GET ", "uri": " /project/{fullPath} ", "processed_uri": ["project", "full", "path"], "description": " Find a project. ", "parameter": " fullPath\tID!\tFull path of the project. For example, gitlab-org/gitlab-foss.\n", "processed_des_para": ["find", "project", "full", "path", "full", "path", "project", "example", "gitlab", "organization", "gitlab", "foss"]}
{"http_verb": "GET ", "uri": " /projects/{ids} ", "processed_uri": ["projects", "identifications"], "description": " Find projects visible to the current user. ", "parameter": " ids\t[ID!]\tFilter projects by IDs\n", "processed_des_para": ["find", "project", "visible", "current", "user", "identification", "filter", "project", "ds"]}
{"http_verb": "GET ", "uri": " /queryComplexity ", "processed_uri": ["query", "complexity"], "description": " Information about the complexity of the GraphQL query.", "parameter": "n/a\n", "processed_des_para": ["information", "complexity", "graph", "query"]}
{"http_verb": "GET ", "uri": " /runner/{id} ", "processed_uri": ["runner", "identification"], "description": " Find a runner. ", "parameter": " id\tCiRunnerID!\tRunner ID.\n", "processed_des_para": ["find", "runner", "identification", "client", "runner", "runner", "identification"]}
{"http_verb": "GET ", "uri": " /runnerSetup ", "processed_uri": ["runner", "setup"], "description": " Runner setup instructions. ", "parameter": " n/a\n", "processed_des_para": ["runner", "setup", "instruction"]}
{"http_verb": "GET ", "uri": " /runners/{creatorId}  ", "processed_uri": ["runners", "creator", "identification"], "description": " Get all runners in the GitLab instance (project and shared). Access is restricted to users with administrator access. ", "parameter": " creatorId\tUserID\tFilter runners by creator ID.\n", "processed_des_para": ["get", "runner", "git", "lab", "instance", "project", "share", "access", "restrict", "user", "administrator", "access", "creator", "identification", "user", "filter", "runner", "creator", "identification"]}
{"http_verb": "GET ", "uri": " /selfManagedAddOnEligibleUsers ", "processed_uri": ["self", "managed", "add", "eligible", "users"], "description": " Users within the self-managed instance who are eligible for add-ons ", "parameter": " n/a", "processed_des_para": ["user", "within", "self", "manage", "instance", "eligible", "add", "on"]}
