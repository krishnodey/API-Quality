{"http_verb": "DELETE ", "uri": " /v2/users/:id/bookmarks/:tweet_id ", "processed_uri": ["users", "identification", "bookmarks", "tweet", "identification"], "description": " Allows a user or authenticated user ID to remove a Bookmark of a Tweet. ", "parameter": " id REQUIRED \tstring\tThe user ID of an authenticated user who you are removing a Bookmark of a Tweet on behalf of. It must match your own user ID or that of an authenticating user, meaning that you must pass the Access Tokens associated with the user ID when authenticating your request. tweet_id REQUIRED \tstring\tThe ID of the Tweet that you would like the id to remove a Bookmark of.\n", "processed_des_para": ["allow", "user", "authenticate", "user", "remove", "bookmark", "tweet", "identification", "string", "user", "authenticate", "user", "remove", "bookmark", "tweet", "behalf", "must", "match", "user", "authenticate", "user", "meaning", "must", "pass", "access", "token", "associate", "user", "authenticate", "request", "tweet", "identification", "string", "tweet", "like", "identification", "remove", "bookmark"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/bookmarks", "processed_uri": ["users", "identification", "bookmarks"], "description": " Allows you to get an authenticated user's 800 most recent bookmarked Tweets.", "parameter": " id REQUIRED \tstring\tUser ID of an authenticated user to request bookmarked Tweets for.\n", "processed_des_para": ["allow", "get", "authenticate", "user", "recent", "bookmarke", "tweet", "identification", "string", "user", "authenticate", "user", "request", "bookmarke", "tweet"]}
{"http_verb": "POST ", "uri": " /v2/users/:id/bookmarks", "processed_uri": ["users", "identification", "bookmarks"], "description": " Causes the user ID of an authenticated user identified in the path parameter to Bookmark the target Tweet provided in the request body.", "parameter": "id REQUIRED \tstring\tThe user ID of an authenticated user who you are bookmarking a Tweet on behalf of. It must match your own user ID or that of an authenticating user, meaning that you must pass the Access Token associated with the user ID when authenticating your request. tweet_id REQUIRED \tstring\tThe ID of the Tweet that you would like an id to Bookmark.\n", "processed_des_para": ["cause", "user", "authenticate", "user", "identify", "path", "parameter", "bookmark", "target", "tweet", "provide", "request", "body", "identification", "string", "user", "authenticate", "user", "bookmarking", "tweet", "behalf", "must", "match", "user", "authenticate", "user", "meaning", "must", "pass", "access", "token", "associate", "user", "authenticate", "request", "tweet", "identification", "string", "tweet", "like", "identification", "bookmark"]}
{"http_verb": "GET ", "uri": " /v2/tweets/search/stream", "processed_uri": ["tweets", "search", "stream"], "description": "Streams Tweets in real-time that match the rules that you added to the stream using the POST /tweets/search/stream/rules endpoint. If you haven't added any rules to your stream, you will not receive any Tweets.", "parameter": "n/a\n", "processed_des_para": ["stream", "tweet", "real", "time", "match", "rule", "add", "stream", "use", "pos", "tweet", "search", "stream", "rule", "endpoint", "have", "not", "add", "rule", "stream", "receive", "tweet"]}
{"http_verb": "POST ", "uri": "/v2/tweets/search/stream/rules ", "processed_uri": ["tweets", "search", "stream", "rules"], "description": " Add or delete rules to your stream. Once you've added a rule or rules to your stream, you can retrieve all of the Tweets that match these rules by using the \n", "parameter": "", "processed_des_para": ["add", "delete", "rule", "stream", "you", "ve", "add", "rule", "rule", "stream", "retrieve", "tweet", "match", "rule", "use"]}
{"http_verb": "GET ", "uri": " /tweets/search/stream ", "processed_uri": ["tweets", "search", "stream"], "description": "Return either a single rule, or a list of rules that have been added to the stream. ", "parameter": "", "processed_des_para": ["return", "either", "single", "rule", "list", "rule", "add", "stream"]}
{"http_verb": "PUT ", "uri": " /v2/tweets/:id/hidden ", "processed_uri": ["tweets", "identification", "hidden"], "description": " Hides or unhides a reply to a Tweet.", "parameter": "id REQUIRED \tstring\tUnique identifier of the Tweet to hide or unhide. The Tweet must belong to a conversation initiated by the authenticating user.\n", "processed_des_para": ["hide", "unhide", "reply", "tweet", "identification", "string", "unique", "identifier", "tweet", "hide", "unhide", "tweet", "must", "belong", "conversation", "initiate", "authenticate", "user"]}
{"http_verb": "DELETE", "uri": " /v2/users/:id/likes/:tweet_id ", "processed_uri": ["users", "identification", "likes", "tweet", "identification"], "description": " Allows a user or authenticated user ID to unlike a Tweet.", "parameter": " id Required \tstring\tThe user ID who you are removing a Like of a Tweet on behalf of. It must match your own user ID or that of an authenticating user, meaning that you must pass the Access Tokens associated with the user ID when authenticating your request. tweet_id Required \tstring\tThe ID of the Tweet that you would like the id to unlike.\n", "processed_des_para": ["allow", "user", "authenticate", "user", "unlike", "tweet", "identification", "string", "user", "remove", "like", "tweet", "behalf", "must", "match", "user", "authenticate", "user", "meaning", "must", "pass", "access", "token", "associate", "user", "authenticate", "request", "tweet", "identification", "string", "tweet", "like", "identification", "unlike"]}
{"http_verb": "GET ", "uri": " /v2/tweets/:id/liking_users ", "processed_uri": ["tweets", "identification", "liking", "users"], "description": " Allows you to get information about a Tweet’s liking users.", "parameter": " id REQUIRED \tstring\tTweet ID of the Tweet to request liking users of.\n", "processed_des_para": ["allow", "get", "information", "tweet", "like", "user", "identification", "string", "tweet", "tweet", "request", "like", "user"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/liked_tweets ", "processed_uri": ["users", "identification", "liked", "tweets"], "description": " Allows you to get information about a user’s liked Tweets ", "parameter": " id REQUIRED \tstring\tUser ID of the user to request liked Tweets for.\n", "processed_des_para": ["allow", "get", "information", "user", "like", "tweet", "identification", "string", "user", "user", "request", "like", "tweet"]}
{"http_verb": "POST ", "uri": " /v2/users/:id/likes ", "processed_uri": ["users", "identification", "likes"], "description": " Causes the user ID identified in the path parameter to Like the target Tweet. ", "parameter": " POST /2/users/:id/likes Causes the user ID identified in the path parameter to Like the target Tweet.\n", "processed_des_para": ["cause", "user", "identify", "path", "parameter", "like", "target", "tweet", "pos", "user", "identification", "like", "cause", "user", "identify", "path", "parameter", "like", "target", "tweet"]}
{"http_verb": "DELETE", "uri": " /v2/tweets/:id ", "processed_uri": ["tweets", "identification"], "description": " Allows a user or authenticated user ID to delete a Tweet.", "parameter": "id REQUIRED \tstring\tThe Tweet ID you are deleting.\n", "processed_des_para": ["allow", "user", "authenticate", "user", "delete", "tweet", "identification", "string", "tweet", "delete"]}
{"http_verb": "POST ", "uri": " /v2/tweets ", "processed_uri": ["tweets"], "description": " Creates a Tweet on behalf of an authenticated user. ", "parameter": " direct_message_deep_link OPTIONAL \tstring\tTweets a link directly to a Direct Message conversation with an account. Example: {\"text\": \"Tweeting a DM deep link!\", \"direct_message_deep_link\": \"https://twitter.com/messages/compose?recipient_id=2244994945\"} for_super_followers_only OPTIONAL \tboolean\tAllows you to Tweet exclusively for Super Followers. Example: {\"text\": \"Hello World!\", \"for_super_followers_only\": true} geo OPTIONAL \tobject\tA JSON object that contains location information for a Tweet. You can only add a location to Tweets if you have geo enabled in your profile settings. If you don't have geo enabled, you can still add a location parameter in your request body, but it won't get attached to your Tweet geo.place_id OPTIONAL \tstring\tPlace ID being attached to the Tweet for geo location. Example: {\"text\": \"Tweeting with geo!\",\"geo\": {\"place_id\": \"5a110d312052166f\"}} media OPTIONAL \tobject\tA JSON object that contains media information being attached to created Tweet. This is mutually exclusive from Quote Tweet ID and Poll. media.media_ids OPTIONAL \tarray\tA list of Media IDs being attached to the Tweet. This is only required if the request includes the tagged_user_ids. Example: {\"text\": \"Tweeting with media!\", \"media\": {\"media_ids\": [\"1455952740635586573\"]}} media.tagged_user_ids OPTIONAL \tarray\tA list of User IDs being tagged in the Tweet with Media. If the user you're tagging doesn't have photo-tagging enabled, their names won't show up in the list of tagged users even though the Tweet is successfully created. Example: {\"text\": \"Tagging users in images!\", \"media\": {\"media_ids\": [\"1455952740635586573\"], \"tagged_user_ids\": [\"2244994945\",\"6253282\"]}} poll OPTIONAL \tobject\tA JSON object that contains options for a Tweet with a poll. This is mutually exclusive from Media and Quote Tweet ID. poll.duration_minutes OPTIONAL \tnumber\tDuration of the poll in minutes for a Tweet with a poll. This is only required if the request includes poll. options. Example: {\"text\": \"Tweeting with polls!\", \"poll\": {\"options\": [\"yes\", \"maybe\", \"no\"], \"duration_minutes\": 120}} poll.options OPTIONAL \tarray\tA list of poll options for a Tweet with a poll. For the request to be successful it must also include duration_minutes too. Example: {\"text\": \"Tweeting with polls!\", \"poll\": {\"options\": [\"yes\", \"maybe\", \"no\"], \"duration_minutes\": 120}}\" quote_tweet_id OPTIONAL \tstring\tLink to the Tweet being quoted. Example: {\"text\": \"Yay!\", \"quote_tweet_id\": \"1455953449422516226\"} reply OPTIONAL \tobject\tA JSON object that contains information of the Tweet being replied to. reply.exclude_reply_user_ids OPTIONAL \tarray\tA list of User IDs to be excluded from the reply Tweet thus removing a user from a thread. Example: {\"text\": \"Yay!\", \"reply\": {\"in_reply_to_tweet_id\": \"1455953449422516226\", \"exclude_reply_user_ids\": [\"6253282\"]}} reply.in_reply_to_tweet_id OPTIONAL \tstring\tTweet ID of the Tweet being replied to. Please note that in_reply_to_tweet_id needs to be in the request if exclude_reply_user_ids is present. Example: {\"text\": \"Excited!\", \"reply\": {\"in_reply_to_tweet_id\": \"1455953449422516226\"}} reply_settings OPTIONAL \tstring\tSettings to indicate who can reply to the Tweet. Options include \"mentionedUsers\" and \"following\". If the field isn’t specified, it will default to everyone. Example:{\"text\": \"Tweeting with reply settings!\", \"reply_settings\": \"mentionedUsers\"} text OPTIONAL \tstring\tText of the Tweet being created. This field is required if media.media_ids is not present. Example: {\"text\": \"Hello World!\"}\n", "processed_des_para": ["create", "tweet", "behalf", "authenticate", "user", "direct", "message", "deep", "optiona", "string", "tweet", "directly", "direct", "message", "conversation", "account", "example", "text", "tweet", "deep", "direct", "message", "deep", "twittercom", "message", "compose"]}
{"http_verb": "GET ", "uri": " /v2/tweets/:id/quote_tweets ", "processed_uri": ["tweets", "identification", "quote", "tweets"], "description": " Returns Quote Tweets for a Tweet specified by the requested Tweet ID. ", "parameter": " id REQUIRED \tstring\tUnique identifier of the Tweet to request\n", "processed_des_para": ["return", "quote", "tweet", "tweet", "specify", "request", "tweet", "identification", "string", "unique", "identifier", "tweet", "request"]}
{"http_verb": "DELETE ", "uri": " /v2/users/:id/retweets/:source_tweet_id ", "processed_uri": ["users", "identification", "retweets", "source", "tweet", "identification"], "description": "  Allows a user or authenticated user ID to remove the Retweet of a Tweet. ", "parameter": " id REQUIRED \tstring\tThe user ID who you are removing a the Retweet of a Tweet on behalf of. It must match your own user ID or that of an authenticating user, meaning that you must pass the Access Tokens associated with the user ID when authenticating your request. source_tweet_id REQUIRED \tstring\tThe ID of the Tweet that you would like the id to remove the Retweet of.\n", "processed_des_para": ["allow", "user", "authenticate", "user", "remove", "retweet", "tweet", "identification", "string", "user", "remove", "retweet", "tweet", "behalf", "must", "match", "user", "authenticate", "user", "meaning", "must", "pass", "access", "token", "associate", "user", "authenticating", "request", "source", "tweet", "identification", "string", "tweet", "like", "identification", "remove", "retweet"]}
{"http_verb": "GET ", "uri": " /v2/tweets/:id/retweeted_by ", "processed_uri": ["tweets", "identification", "retweeted"], "description": "  Allows you to get information about who has Retweeted a Tweet. ", "parameter": " id REQUIRED \tstring\tTweet ID of the Tweet to request Retweeting users of.\n", "processed_des_para": ["allow", "get", "information", "retweete", "tweet", "identification", "string", "tweet", "tweet", "request", "retweete", "user"]}
{"http_verb": "GET ", "uri": " /v2/tweets/:id/retweets ", "processed_uri": ["tweets", "identification", "retweets"], "description": " Returns the Retweets for a given Tweet ID. ", "parameter": " id REQUIRED \tstring\tUnique identifier of the Tweet.\n", "processed_des_para": ["return", "retweet", "give", "tweet", "identification", "string", "unique", "identifier", "tweet"]}
{"http_verb": "POST ", "uri": "/v2/users/:id/retweets ", "processed_uri": ["users", "identification", "retweets"], "description": "Causes the user ID identified in the path parameter to Retweet the target Tweet. ", "parameter": " id REQUIRED \tstring\tThe user ID who you are Retweeting a Tweet on behalf of. It must match your own user ID or that of an authenticating user, meaning that you must pass the Access Tokens associated with the user ID when authenticating your request.\n", "processed_des_para": ["cause", "user", "identify", "path", "parameter", "retweet", "target", "tweet", "identification", "string", "user", "retweete", "tweet", "behalf", "must", "match", "user", "authenticate", "user", "meaning", "must", "pass", "access", "token", "associate", "user", "authenticating", "request"]}
{"http_verb": "GET ", "uri": "/v2/tweets/search/all ", "processed_uri": ["tweets", "search"], "description": " The full-archive search endpoint returns the complete history of public Tweets matching a search query; since the first Tweet was created March 26, 2006. ", "parameter": "n/a \n", "processed_des_para": ["full", "archive", "search", "endpoint", "return", "complete", "history", "public", "tweet", "match", "search", "query", "since", "first", "tweet", "create", "march"]}
{"http_verb": "GET ", "uri": " /v2/tweets/search/recent ", "processed_uri": ["tweets", "search", "recent"], "description": " The recent search endpoint returns Tweets from the last seven days that match a search query.", "parameter": " \n", "processed_des_para": ["recent", "search", "endpoint", "return", "tweet", "last", "seven", "day", "match", "search", "query"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/mentions ", "processed_uri": ["users", "identification", "mentions"], "description": " Returns Tweets mentioning a single user specified by the requested user ID. By default, the most recent ten Tweets are returned per request. Using pagination, up to the most recent 800 Tweets can be retrieved. ", "parameter": "id REQUIRED \tstring\tUnique identifier of the user for whom to return Tweets mentioning the user. User ID can be referenced using the user/lookup endpoint. More information on Twitter IDs is here.\n", "processed_des_para": ["return", "tweet", "mention", "single", "user", "specify", "request", "user", "default", "recent", "ten", "tweet", "return", "per", "request", "use", "pagination", "recent", "tweet", "retrieve", "identification", "string", "unique", "identifier", "user", "return", "tweet", "mention", "user", "user", "reference", "use", "user", "lookup", "endpoint", "information", "twitter", "ds"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/timelines/reverse_chronological ", "processed_uri": ["users", "identification", "timelines", "reverse", "chronological"], "description": " Allows you to retrieve a collection of the most recent Tweets and Retweets posted by you and users you follow. This endpoint can return every Tweet created on a timeline over the last 7 days as well as the most recent 800 regardless of creation date. ", "parameter": " id REQUIRED \tstring\tUnique identifier of the user that is requesting their chronological home timeline. User ID can be referenced using the user/lookup endpoint. More information on Twitter IDs is here.\n", "processed_des_para": ["allow", "retrieve", "collection", "recent", "tweet", "retweet", "post", "user", "follow", "endpoint", "return", "every", "tweet", "create", "timeline", "last", "day", "well", "recent", "regardless", "creation", "date", "identification", "string", "unique", "identifier", "user", "request", "chronological", "home", "timeline", "user", "reference", "use", "user", "lookup", "endpoint", "information", "twitter", "ds"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/tweets ", "processed_uri": ["users", "identification", "tweets"], "description": " Returns Tweets composed by a single user, specified by the requested user ID. By default, the most recent ten Tweets are returned per request. Using pagination, the most recent 3,200 Tweets can be retrieved. ", "parameter": " id REQUIRED \tstring\tUnique identifier of the Twitter account (user ID) for whom to return results. User ID can be referenced using the user/lookup endpoint. More information on Twitter IDs is here.\n", "processed_des_para": ["return", "tweet", "compose", "single", "user", "specify", "request", "user", "default", "recent", "ten", "tweet", "return", "per", "request", "use", "pagination", "recent", "tweet", "retrieve", "identification", "string", "unique", "identifier", "twitter", "account", "user", "return", "result", "user", "reference", "use", "user", "lookup", "endpoint", "information", "twitter", "ds"]}
{"http_verb": "GET ", "uri": " /v2/tweets/counts/all ", "processed_uri": ["tweets", "counts"], "description": " The full-archive Tweet counts endpoint returns the count of Tweets that match your query from the complete history of public Tweets; since the first Tweet was created March 26, 2006. ", "parameter": " n/a \n", "processed_des_para": ["full", "archive", "tweet", "count", "endpoint", "return", "count", "tweet", "match", "query", "complete", "history", "public", "tweet", "since", "first", "tweet", "create", "march"]}
{"http_verb": "GET ", "uri": " /v2/tweets/counts/recent ", "processed_uri": ["tweets", "counts", "recent"], "description": " The recent Tweet counts endpoint returns count of Tweets from the last seven days that match a query. ", "parameter": " n/a \n", "processed_des_para": ["recent", "tweet", "count", "endpoint", "return", "count", "tweet", "last", "seven", "day", "match", "query"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/blocking ", "processed_uri": ["users", "identification", "blocking"], "description": " Returns a list of users who are blocked by the specified user ID. ", "parameter": " id REQUIRED \tstring\tThe user ID whose blocked users you would like to retrieve. The user’s ID must correspond to the user ID of the authenticating user, meaning that you must pass the Access Tokens associated with the user ID when authenticating your request.\n", "processed_des_para": ["return", "list", "user", "block", "specify", "user", "identification", "string", "user", "whose", "block", "user", "like", "retrieve", "user", "must", "correspond", "user", "authenticate", "user", "meaning", "must", "pass", "access", "token", "associate", "user", "authenticating", "request"]}
{"http_verb": "DELETE ", "uri": " /v2/users/:source_user_id/following/:target_user_id ", "processed_uri": ["users", "source", "user", "identification", "following", "target", "user", "identification"], "description": " Allows a user ID to unfollow another user. The request succeeds with no action when the authenticated user sends a request to a user they're not following or have already unfollowed. ", "parameter": " source_user_id REQUIRED \tstring\tThe user ID who you would like to initiate the unfollow on behalf of. You must pass the Access Tokens that relate to this user when authenticating the request. target_user_id REQUIRED \tstring\tThe user ID of the user that you would like the source_user_id to unfollow.\n", "processed_des_para": ["allow", "user", "unfollow", "another", "user", "request", "succeed", "action", "authenticate", "user", "send", "request", "user", "they", "re", "follow", "already", "unfollowed", "source", "user", "identification", "string", "user", "like", "initiate", "unfollow", "behalf", "must", "pass", "access", "token", "relate", "user", "authenticating", "request", "target", "user", "identification", "string", "user", "user", "like", "source", "user", "identification", "unfollow"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/followers ", "processed_uri": ["users", "identification", "followers"], "description": " Returns a list of users who are followers of the specified user ID. ", "parameter": " id REQUIRED \tstring\tThe user ID whose followers you would like to retrieve.\n", "processed_des_para": ["return", "list", "user", "follower", "specify", "user", "identification", "string", "user", "whose", "follower", "like", "retrieve"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/following ", "processed_uri": ["users", "identification", "following"], "description": " Returns a list of users the specified user ID is following. ", "parameter": " id REQUIRED \tstring\tThe user ID whose following you would like to retrieve.\n", "processed_des_para": ["return", "list", "user", "specify", "user", "follow", "identification", "string", "user", "whose", "follow", "like", "retrieve"]}
{"http_verb": "POST ", "uri": " /v2/users/:id/following ", "processed_uri": ["users", "identification", "following"], "description": " Allows a user ID to follow another user. If the target user does not have public Tweets, this endpoint will send a follow request. The request succeeds with no action when the authenticated user sends a request to a user they're already following, or if they're sending a follower request to a user that does not have public Tweets. ", "parameter": " id REQUIRED \tstring\tThe authenticated user ID who you would like to initiate the follow on behalf of. You must pass the Access Tokens that relate to this user when authenticating the request.\n", "processed_des_para": ["allow", "user", "follow", "another", "user", "target", "user", "public", "tweet", "endpoint", "send", "follow", "request", "request", "succeed", "action", "authenticate", "user", "send", "request", "user", "they", "re", "already", "follow", "they", "re", "send", "follower", "request", "user", "public", "tweet", "identification", "string", "authenticate", "user", "like", "initiate", "follow", "behalf", "must", "pass", "access", "token", "relate", "user", "authenticating", "request"]}
{"http_verb": "DELETE ", "uri": " /v2/users/:source_user_id/muting/:target_user_id ", "processed_uri": ["users", "source", "user", "identification", "muting", "target", "user", "identification"], "description": " Allows an authenticated user ID to unmute the target user. The request succeeds with no action when the user sends a request to a user they're not muting or have already unmuted. ", "parameter": " source_user_id REQUIRED \tstring\tThe user ID who you would like to initiate an unmute on behalf of. The user’s ID must correspond to the user ID of the authenticating user, meaning that you must pass the Access Tokens associated with the user ID when authenticating your request. target_user_id REQUIRED \tstring\tThe user ID of the user that you would like the source_user_id to unmute.\n", "processed_des_para": ["allow", "authenticate", "user", "unmute", "target", "user", "request", "succeed", "action", "user", "send", "request", "user", "they", "re", "mute", "already", "unmute", "source", "user", "identification", "string", "user", "like", "initiate", "unmute", "behalf", "user", "must", "correspond", "user", "authenticate", "user", "meaning", "must", "pass", "access", "token", "associate", "user", "authenticating", "request", "target", "user", "identification", "string", "user", "user", "like", "source", "user", "identification", "unmute"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/muting ", "processed_uri": ["users", "identification", "muting"], "description": " Returns a list of users who are muted by the specified user ID. ", "parameter": " id REQUIRED \tstring\tThe user ID whose muted users you would like to retrieve. The user’s ID must correspond to the user ID of the authenticating user, meaning that you must pass the Access Tokens associated with the user ID when authenticating your request.\n", "processed_des_para": ["return", "list", "user", "mute", "specify", "user", "identification", "string", "user", "whose", "muted", "user", "like", "retrieve", "user", "must", "correspond", "user", "authenticate", "user", "meaning", "must", "pass", "access", "token", "associate", "user", "authenticating", "request"]}
{"http_verb": "POST ", "uri": " /v2/users/:id/muting ", "processed_uri": ["users", "identification", "muting"], "description": " Allows an authenticated user ID to mute the target user. ", "parameter": " id REQUIRED \tstring\tThe user ID who you would like to initiate the mute on behalf of. It must match your own user ID or that of an authenticating user, meaning that you must pass the Access Tokens associated with the user ID when authenticating your request.\n", "processed_des_para": ["allow", "authenticate", "user", "mute", "target", "user", "identification", "string", "user", "like", "initiate", "mute", "behalf", "must", "match", "user", "authenticate", "user", "meaning", "must", "pass", "access", "token", "associate", "user", "authenticating", "request"]}
{"http_verb": "GET ", "uri": " /v2/users/search ", "processed_uri": ["users", "search"], "description": " The users endpoint returns Users that match a search query.", "parameter": " n/a \n", "processed_des_para": ["user", "endpoint", "return", "user", "match", "search", "query"]}
{"http_verb": "GET ", "uri": " /v2/users ", "processed_uri": ["users"], "description": " Returns a variety of information about one or more users specified by the requested IDs. ", "parameter": " n/a \n", "processed_des_para": ["return", "variety", "information", "one", "user", "specify", "request", "ds"]}
{"http_verb": "GET ", "uri": " /v2/users/:id ", "processed_uri": ["users", "identification"], "description": "Returns a variety of information about a single user specified by the requested ID.", "parameter": "id REQUIRED \tstring\tThe ID of the user to lookup.\n", "processed_des_para": ["return", "variety", "information", "single", "user", "specify", "request", "identification", "string", "user", "lookup"]}
{"http_verb": "GET ", "uri": " /v2/users/by ", "processed_uri": ["users"], "description": "Returns a variety of information about one or more users specified by their usernames.", "parameter": " n/a \n", "processed_des_para": ["return", "variety", "information", "one", "user", "specify", "username"]}
{"http_verb": "GET ", "uri": " /v2/users/by/username/:username ", "processed_uri": ["users", "username", "username"], "description": " Returns a variety of information about one or more users specified by their usernames.", "parameter": "username REQUIRED \tstring\tThe Twitter username (handle) of the user.\n", "processed_des_para": ["return", "variety", "information", "one", "user", "specify", "username", "username", "string", "twitter", "username", "handle", "user"]}
{"http_verb": "GET ", "uri": " /v2/users/me ", "processed_uri": ["users"], "description": " Returns information about an authorized user. ", "parameter": " n/a \n", "processed_des_para": ["return", "information", "authorize", "user"]}
{"http_verb": "GET ", "uri": " /v2/spaces/search ", "processed_uri": ["spaces", "search"], "description": " Return live or scheduled Spaces matching your specified search terms. This endpoint performs a keyword search, meaning that it will return Spaces that are an exact case-insensitive match of the specified search term. The search term will match the original title of the Space. ", "parameter": " n/a \n", "processed_des_para": ["return", "live", "schedule", "space", "match", "specify", "search", "term", "endpoint", "perform", "keyword", "search", "mean", "return", "space", "exact", "case", "insensitive", "match", "specify", "search", "term", "search", "term", "match", "original", "title", "space"]}
{"http_verb": "GET ", "uri": " /v2/spaces/:id ", "processed_uri": ["spaces", "identification"], "description": " Returns a variety of information about a single Space specified by the requested ID. ", "parameter": " id REQUIRED \tstring\tUnique identifier of the Space to request.\n", "processed_des_para": ["return", "variety", "information", "single", "space", "specify", "request", "identification", "string", "unique", "identifier", "space", "request"]}
{"http_verb": "GET ", "uri": " /v2/spaces/:id/buyers ", "processed_uri": ["spaces", "identification", "buyers"], "description": " Returns a list of user who purchased a ticket to the requested Space. You must authenticate the request using the Access Token of the creator of the requested Space. ", "parameter": " id REQUIRED \tstring\tUnique identifier of the Space for which you want to request Tweets.\n", "processed_des_para": ["return", "list", "user", "purchase", "ticket", "request", "space", "must", "authenticate", "request", "use", "access", "token", "creator", "request", "space", "identification", "string", "unique", "identifier", "space", "want", "request", "tweet"]}
{"http_verb": "GET ", "uri": " /v2/spaces/:id/tweets ", "processed_uri": ["spaces", "identification", "tweets"], "description": " Returns Tweets shared in the requested Spaces. ", "parameter": " id REQUIRED \tstring\tUnique identifier of the Space containing the Tweets you'd like to access.\n", "processed_des_para": ["return", "tweet", "share", "request", "space", "identification", "string", "unique", "identifier", "space", "contain", "tweet", "you", "like", "access"]}
{"http_verb": "GET ", "uri": " /v2/spaces/by/creator_ids ", "processed_uri": ["spaces", "creator", "identifications"], "description": " Returns live or scheduled Spaces created by the specified user IDs. Up to 100 comma-separated IDs can be looked up using this endpoint. ", "parameter": " n/a \n", "processed_des_para": ["return", "live", "schedule", "space", "create", "specify", "user", "ds", "comma", "separate", "ds", "looked", "use", "endpoint"]}
{"http_verb": "GET ", "uri": " /v2/lists/:id/tweets ", "processed_uri": ["lists", "identification", "tweets"], "description": " Returns a list of Tweets from the specified List. ", "parameter": " id REQUIRED \tstring\tThe ID of the List whose Tweets you would like to retrieve.\n", "processed_des_para": ["return", "list", "tweet", "specify", "list", "identification", "string", "list", "whose", "tweet", "like", "retrieve"]}
{"http_verb": "GET ", "uri": " /v2/lists/:id ", "processed_uri": ["lists", "identification"], "description": " Returns the details of a specified List. ", "parameter": " id REQUIRED \tstring\tThe ID of the List to lookup.\n", "processed_des_para": ["return", "detail", "specify", "list", "identification", "string", "list", "lookup"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/owned_lists ", "processed_uri": ["users", "identification", "owned", "lists"], "description": " Returns all Lists owned by the specified user. ", "parameter": " id REQUIRED \tstring\tThe user ID whose owned Lists you would like to retrieve.\n", "processed_des_para": ["return", "list", "own", "specify", "user", "identification", "string", "user", "whose", "own", "list", "like", "retrieve"]}
{"http_verb": "DELETE ", "uri": " /v2/lists/:id/members/:user_id ", "processed_uri": ["lists", "identification", "members", "user", "identification"], "description": " Enables the authenticated user to remove a member from a List they own. ", "parameter": " id REQUIRED \tstring\tThe ID of the List you are removing a member from. user_id REQUIRED \tstring\tThe ID of the user you wish to remove as a member of the List.\n", "processed_des_para": ["enable", "authenticate", "user", "remove", "member", "list", "identification", "string", "list", "remove", "member", "user", "identification", "string", "user", "wish", "remove", "member", "list"]}
{"http_verb": "GET ", "uri": " /v2/lists/:id/members ", "processed_uri": ["lists", "identification", "members"], "description": " Returns a list of users who are members of the specified List. ", "parameter": " id REQUIRED \tstring\tThe ID of the List whose members you would like to retrieve.\n", "processed_des_para": ["return", "list", "user", "member", "specify", "list", "identification", "string", "list", "whose", "member", "like", "retrieve"]}
{"http_verb": "GET ", "uri": " /v2/users/:id/list_memberships ", "processed_uri": ["users", "identification", "list", "memberships"], "description": " Returns all Lists a specified user is a member of. ", "parameter": "id REQUIRED \tstring\tThe user ID whose List memberships you would like to retrieve.\n", "processed_des_para": ["return", "list", "specify", "user", "member", "identification", "string", "user", "whose", "list", "membership", "like", "retrieve"]}
{"http_verb": "POST ", "uri": "  /v2/lists/:id/members ", "processed_uri": ["lists", "identification", "members"], "description": " Enables the authenticated user to add a member to a List they own. ", "parameter": " id REQUIRED \tstring\tThe ID of the List you are adding a member to.", "processed_des_para": ["enable", "authenticate", "user", "add", "member", "list", "identification", "string", "list", "add", "member"]}
