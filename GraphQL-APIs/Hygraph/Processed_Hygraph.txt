{"http_verb": "POST ", "uri": " /v2/models ", "processed_uri": ["models"], "description": " Create models\n", "parameter": "", "processed_des_para": ["create", "model"]}
{"http_verb": "PATCH ", "uri": " /v2/models/{model_id}", "processed_uri": ["models", "model", "identifer"], "description": "You can at any time update the settings, and Preview URLs for your content models from within the schema editor.\n", "parameter": "", "processed_des_para": ["time", "update", "setting", "preview", "ur", "ls", "content", "model", "within", "schema", "editor"]}
{"http_verb": "DELETE ", "uri": " /v2/models/{model_id} ", "processed_uri": ["models", "model", "identifer"], "description": " For each of the content models you have created, you can choose to update, or delete from the schema editor.Deleting a model will also delete all of the content entries.\n", "parameter": "", "processed_des_para": ["content", "model", "create", "choose", "update", "delete", "schema", "editor", "delete", "model", "also", "delete", "content", "entry"]}
{"http_verb": "GET ", "uri": " /v2/post/{id} ", "processed_uri": ["post", "identifer"], "description": "  For each of the content models you have created, you can choose to update, or delete from the schema editor. Deleting a model will also delete all of the content entries.The post query is what you would use to fetch one entry from the CMS. You can fetch an individual entry by id, or any unique non-localized field defined in your content type.\n", "parameter": "", "processed_des_para": ["content", "model", "create", "choose", "update", "delete", "schema", "editor", "delete", "model", "also", "delete", "content", "entry", "post", "query", "use", "fetch", "one", "entry", "cm", "fetch", "individual", "entry", "identifer", "unique", "non", "localize", "field", "define", "content", "type"]}
{"http_verb": "GET ", "uri": " /v2/posts/{id} ", "processed_uri": ["posts", "identifer"], "description": " The posts query is what you should use to fetch multiple entries from the CMS.\n", "parameter": "", "processed_des_para": ["post", "query", "use", "fetch", "multiple", "entry", "cm"]}
{"http_verb": "GET ", "uri": " /v2/posts/{id}/comments/{id} ", "processed_uri": ["posts", "identifer", "comments", "identifer"], "description": " Imagine posts have a one to many relation with comments. With GraphQL you can query the related comments in the same request. Here we will get all posts, and their comments.\n", "parameter": "", "processed_des_para": ["imagine", "post", "one", "many", "relation", "comment", "graph", "query", "relate", "comment", "request", "get", "post", "comment"]}
{"http_verb": "GET ", "uri": " /v2/post/{id}/local/{id} ", "processed_uri": ["post", "identifer", "local", "identifer"], "description": " When fetching one or more entry, you can also fetch the localized entries. The default locale is set to en.\n", "parameter": "", "processed_des_para": ["fetch", "one", "entry", "also", "fetch", "localize", "entry", "default", "localization", "set", "en"]}
{"http_verb": "GET ", "uri": " /v2/pages/{id}/pageElements ", "processed_uri": ["pages", "identifer", "page", "elements"], "description": "You can at any time update the settings, and Preview URLs for your content models from within the schema editor.\n", "parameter": "", "processed_des_para": ["time", "update", "setting", "preview", "ur", "ls", "content", "model", "within", "schema", "editor"]}
{"http_verb": "DELETE ", "uri": " /v2/models/{model_id} ", "processed_uri": ["models", "model", "identifer"], "description": " For each of the content models you have created, you can choose to update, or delete from the schema editor.Deleting a model will also delete all of the content entries.\n", "parameter": "", "processed_des_para": ["content", "model", "create", "choose", "update", "delete", "schema", "editor", "delete", "model", "also", "delete", "content", "entry"]}
{"http_verb": "GET ", "uri": " /v2/post/{id} ", "processed_uri": ["post", "identifer"], "description": "  For each of the content models you have created, you can choose to update, or delete from the schema editor. Deleting a model will also delete all of the content entries.The post query is what you would use to fetch one entry from the CMS. You can fetch an individual entry by id, or any unique non-localized field defined in your content type.\n", "parameter": "", "processed_des_para": ["content", "model", "create", "choose", "update", "delete", "schema", "editor", "delete", "model", "also", "delete", "content", "entry", "post", "query", "use", "fetch", "one", "entry", "cm", "fetch", "individual", "entry", "identifer", "unique", "non", "localize", "field", "define", "content", "type"]}
{"http_verb": "GET ", "uri": " /v2/posts/{id} ", "processed_uri": ["posts", "identifer"], "description": " The posts query is what you should use to fetch multiple entries from the CMS.\n", "parameter": "", "processed_des_para": ["post", "query", "use", "fetch", "multiple", "entry", "cm"]}
{"http_verb": "GET ", "uri": " /v2/posts/{id}/comments/{id} ", "processed_uri": ["posts", "identifer", "comments", "identifer"], "description": " Imagine posts have a one to many relation with comments. With GraphQL you can query the related comments in the same request. Here we will get all posts, and their comments.\n", "parameter": "", "processed_des_para": ["imagine", "post", "one", "many", "relation", "comment", "graph", "query", "relate", "comment", "request", "get", "post", "comment"]}
{"http_verb": "GET ", "uri": " /v2/{projectId}/{environment} ", "processed_uri": ["project", "identifer", "environment"], "description": " Regular read & write endpoint ", "parameter": " \n", "processed_des_para": ["regular", "read", "write", "endpoint"]}
{"http_verb": "GET ", "uri": " /content/{projectId}/{environment} ", "processed_uri": ["content", "project", "identifer", "environment"], "description": " High performance endpoint ", "parameter": "\n", "processed_des_para": ["high", "performance", "endpoint"]}
{"http_verb": "GET ", "uri": " /v2/{projectId}/master ", "processed_uri": ["project", "identifer", "master"], "description": "  Each environment has its own API endpoint, with the alias of the environment appended to the URL. ", "parameter": " ", "processed_des_para": ["environment", "ap", "endpoint", "alias", "environment", "append", "ur"]}
