{"http_verb": "GET ", "uri": " /v3/events/awesome-event ", "processed_uri": ["events", "awesome", "event"], "description": " Authenticate API calls with the API Key To authenticate API calls with the API Key, set the Authorization HTTP header value as Bearer API_KEY. ", "parameter": "\n", "processed_des_para": ["authenticate", "ap", "call", "ap", "key", "authenticate", "ap", "call", "ap", "key", "set", "authorization", "htt", "header", "value", "bearer", "ap", "ke"]}
{"http_verb": "GET ", "uri": " /oauth2/authorize ", "processed_uri": ["authentication", "authorize"], "description": " Your application must redirect the business userâ€™s browser to Yelp's authorization URL. This will be in the form of a GET request and you must provide the necessary GET parameters. ", "parameter": " client_id\tRequired\tID assigned by Yelp for the third-party system that will make user-authorized requests to Yelp. redirect_uri\tOptional\tAn endpoint provided by the client. After the user has entered their credentials, Yelp will redirect to this endpoint, submitting either the authorization code or an error message. If this parameters is not supplied, the default redirect URI submitted during client registration will be used. response_type\tRequired\tA string denoting the type of response. In the case of requesting an authorization code, this value will be code. scope\tRequired\tA space delimited list of actions that the business user is authorizing the client to perform. leads - enables reading leads and responding to them. r2r - enables respond to review permission. r2r_get_businesses - enables the ability to retrieve a list of businesses that the business owner has \"claimed\" aka businesses that this user can respond to reviews for. r2r_business_owner - enables the ability to retrieve information about the business owner like username and profile photo. Yelp must enable your application for each scope, do not request scopes you don't have access to. state\tRequired\tA unique string generated by the client to maintain state between the request and the callback. Used to prevent CSRF\n", "processed_des_para": ["application", "must", "redirect", "business", "user", "browser", "yelps", "authorization", "ur", "form", "ge", "request", "must", "provide", "necessary", "ge", "parameter", "client", "identification", "assign", "yelp", "third", "party", "system", "make", "user", "authorize", "request", "yelp", "redirect", "uri", "optional", "endpoint", "provide", "client", "user", "enter", "credential", "yelp", "redirect", "endpoint", "submit", "either", "authorization", "code", "error", "message", "parameter", "supply", "default", "redirect", "ur", "submit", "client", "registration", "use", "response", "type", "string", "denote", "type", "response", "case", "request", "authorization", "code", "value", "code", "scope", "space", "delimited", "list", "action", "business", "user", "authorize", "client", "perform", "lead", "enable", "read", "lead", "respond", "enable", "respond", "review", "permission", "get", "business", "enable", "ability", "retrieve", "list", "business", "business", "owner", "claim", "aka", "business", "user", "respond", "review", "business", "owner", "enable", "ability", "retrieve", "information", "business", "owner", "like", "username", "profile", "photo", "yelp", "must", "enable", "application", "scope", "request", "scope", "do", "not", "access", "state", "unique", "string", "generate", "client", "maintain", "state", "request", "callback", "use", "prevent", "csrf"]}
{"http_verb": "POST ", "uri": " /oauth2/token ", "processed_uri": ["authentication", "token"], "description": " Refreshing an access token Use the refresh token from step 1 to request a new access token by calling the get access token with your refresh token. The endpoint will return a new access token.\n", "parameter": "", "processed_des_para": ["refreshing", "access", "token", "use", "refresh", "token", "step", "request", "new", "access", "token", "calling", "get", "access", "token", "refresh", "token", "endpoint", "return", "new", "access", "token"]}
{"http_verb": "GET ", "uri": " /v3/businesses/search?sort_by=best_match&limit=20 ", "processed_uri": ["businesses", "search"], "description": " This endpoint returns up to 1000 businesses with some basic information based on the provided search criteria. ", "parameter": " \n", "processed_des_para": ["endpoint", "return", "business", "basic", "information", "base", "provide", "search", "criterion"]}
{"http_verb": "GET ", "uri": " /v3/businesses/search/phone ", "processed_uri": ["businesses", "search", "phone"], "description": " Search for businesses by phone number. ", "parameter": " \n", "processed_des_para": ["search", "business", "phone", "number"]}
{"http_verb": "GET\t/v3/businesses/matches\t", "uri": " Find the Yelp business that matches an exact input location. Use this to match business data from other sources with Yelp businesses. ", "processed_uri": ["find", "yelp", "business", "matches", "exact", "input", "location", "use", "match", "business", "data", "sources", "yelp", "businesses"], "description": " \n", "parameter": "", "processed_des_para": []}
{"http_verb": "GET ", "uri": "\t/v3/businesses/{id}\t", "processed_uri": ["businesses", "identification"], "description": " Get rich business data, such as name, address, phone number, photos, Yelp rating, price levels and hours of operation. ", "parameter": " business_id_or_alias string required A unique identifier for a Yelp Business. Can be either a 22-character Yelp Business ID, or a Yelp Business Alias.\n", "processed_des_para": ["get", "rich", "business", "datum", "name", "address", "phone", "number", "photo", "yelp", "rating", "price", "level", "hour", "operation", "business", "identification", "alias", "string", "require", "unique", "identifier", "yelp", "business", "either", "character", "yelp", "business", "yelp", "business", "alias"]}
{"http_verb": "GET ", "uri": " /v3/transactions/{transaction_type}/search\tSearch for businesses which support food delivery transactions. ", "processed_uri": ["transactions", "transaction", "type", "search", "search", "businesses", "support", "food", "delivery", "transactions"], "description": " transaction_type string required Type of transaction supported by the business\n", "parameter": "", "processed_des_para": ["transaction", "type", "string", "require", "type", "transaction", "support", "business"]}
{"http_verb": "GET ", "uri": " /v3/businesses/engagement\tGet engagement metrics information for the provided businesses. ", "processed_uri": ["businesses", "engagement", "get", "engagement", "metrics", "information", "provided", "businesses"], "description": "\n", "parameter": "", "processed_des_para": []}
{"http_verb": "GET ", "uri": "\t/v3/businesses/{business_id_or_alias}/service_offerings\t", "processed_uri": ["businesses", "business", "identification", "alias", "service", "offerings"], "description": " Get active and eligible service offerings for a business. ", "parameter": " business_id_or_alias string required A unique identifier for a Yelp Business. Can be either a 22-character Yelp Business ID, or a Yelp Business Alias.\n", "processed_des_para": ["get", "active", "eligible", "service", "offering", "business", "business", "identification", "alias", "string", "require", "unique", "identifier", "yelp", "business", "either", "character", "yelp", "business", "yelp", "business", "alias"]}
{"http_verb": "GET ", "uri": " /v3/businesses/business_id_or_alias/reviews?limit=20&sort_by=yelp_sort ", "processed_uri": ["businesses", "business", "identification", "alias", "reviews"], "description": " Get up to three review excerpts for a business. ", "parameter": " business_id_or_alias string required A unique identifier for a Yelp Business. Can be either a 22-character Yelp Business ID, or a Yelp Business Alias.\n", "processed_des_para": ["get", "three", "review", "excerpt", "business", "business", "identification", "alias", "string", "require", "unique", "identifier", "yelp", "business", "either", "character", "yelp", "business", "yelp", "business", "alias"]}
{"http_verb": "GET ", "uri": " /v3/businesses/business_id_or_alias/review_highlights?count=3 ", "processed_uri": ["businesses", "business", "identification", "alias", "review", "highlights"], "description": " Get a business's review highlights. ", "parameter": " business_id_or_alias string required A unique identifier for a Yelp Business. Can be either a 22-character Yelp Business ID, or a Yelp Business Alias.\n", "processed_des_para": ["get", "businesss", "review", "highlight", "business", "identification", "alias", "string", "require", "unique", "identifier", "yelp", "business", "either", "character", "yelp", "business", "yelp", "business", "alias"]}
{"http_verb": "GET ", "uri": " /v3/events?limit=3&sort_by=desc&sort_on=popularity\t", "processed_uri": ["events"], "description": " Get events that match search criteria.\n", "parameter": "", "processed_des_para": ["get", "event", "match", "search", "criterion"]}
{"http_verb": "GET ", "uri": " /v3/events/event_id ", "processed_uri": ["events", "event", "identification"], "description": " Get the detailed information of a Yelp event. Get the event ID from /events or /events/featured.", "parameter": "\n", "processed_des_para": ["get", "detailed", "information", "yelp", "event", "get", "event", "event", "event", "feature"]}
{"http_verb": "GET ", "uri": " /v3/events/featured ", "processed_uri": ["events", "featured"], "description": " Get the featured event for a given location. Featured events are chosen by Yelp's community managers. ", "parameter": " \n", "processed_des_para": ["get", "feature", "event", "give", "location", "feature", "event", "choose", "yelps", "community", "manager"]}
{"http_verb": "GET ", "uri": " /v3/categories ", "processed_uri": ["categories"], "description": "  Get all Yelp business categories across all locales. ", "parameter": "\n", "processed_des_para": ["get", "yelp", "business", "category", "across", "locale"]}
{"http_verb": "GET ", "uri": " /v3/categories/alias ", "processed_uri": ["categories", "alias"], "description": " Get detailed information about the Yelp category specified by a Yelp category alias. The alias for each category can be found either by using the /v3/categories endpoint, or the category list. Miscellaneous ", "parameter": "\n", "processed_des_para": ["get", "detailed", "information", "yelp", "category", "specify", "yelp", "category", "alias", "alias", "category", "find", "either", "use", "category", "endpoint", "category", "list", "miscellaneous"]}
{"http_verb": "GET ", "uri": " /v3/autocomplete ", "processed_uri": ["autocomplete"], "description": "  Provide autocomplete suggestions for businesses, search keywords and categories. ", "parameter": "", "processed_des_para": ["provide", "autocomplete", "suggestion", "business", "search", "keyword", "category"]}
