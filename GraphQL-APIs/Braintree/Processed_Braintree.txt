{"http_verb": "GET ", "uri": " /ping ", "processed_uri": ["ping"], "description": " Returns the literal string 'pong'. ", "parameter": " n/a\n", "processed_des_para": ["return", "literal", "string", "pong"]}
{"http_verb": "GET ", "uri": " /pingInStoreReader ", "processed_uri": ["ping", "store", "reader"], "description": " Triggers a beep on a connected Reader and returns the Reader information or an error if unable to ping the device.\n", "parameter": "", "processed_des_para": ["trigger", "beep", "connected", "reader", "return", "reader", "information", "error", "unable", "ping", "device"]}
{"http_verb": "GET ", "uri": " /viewer ", "processed_uri": ["viewer"], "description": " The currently authenticated viewer. ", "parameter": " n/a\n", "processed_des_para": ["currently", "authenticate", "viewer"]}
{"http_verb": "GET ", "uri": " /clientConfiguration ", "processed_uri": ["client", "configuration"], "description": " The client-side environment and payment method configuration.", "parameter": " n/a\n", "processed_des_para": ["client", "side", "environment", "payment", "method", "configuration"]}
{"http_verb": "GET ", "uri": " /node ", "processed_uri": ["node"], "description": " Fetch any object that extends the Node interface using its ID.", "parameter": " n/a\n", "processed_des_para": ["fetch", "object", "extend", "node", "interface", "use"]}
{"http_verb": "GET ", "uri": " /idFromLegacyId ", "processed_uri": ["identification", "legacy", "identification"], "description": " Get a GraphQL ID from a legacy ID that was returned from an SDK or a legacyId field. Does not verify existence except for payment methods. ", "parameter": " n/a\n", "processed_des_para": ["get", "graph", "legacy", "return", "sd", "legacy", "identification", "field", "verify", "existence", "except", "payment", "method"]}
{"http_verb": "GET ", "uri": " /report ", "processed_uri": ["report"], "description": " A collection of the available reports. Each field on the Report type is a different report that can be queried with its own input parameters.", "parameter": "n/a\n", "processed_des_para": ["collection", "available", "report", "field", "report", "type", "different", "report", "query", "input", "parameter"]}
{"http_verb": "GET ", "uri": " /search ", "processed_uri": ["search"], "description": " A collection of the available searches. Each field on the Search type is a different search that can be queried with its own input parameters.", "parameter": "n/a\n", "processed_des_para": ["collection", "available", "search", "field", "search", "type", "different", "search", "query", "input", "parameter"]}
{"http_verb": "GET ", "uri": " /paypalFinancingOptions ", "processed_uri": ["paypal", "financing", "options"], "description": " Retrieve PayPal financing options that include payment installment plans.", "parameter": "n/a\n", "processed_des_para": ["retrieve", "pay", "pal", "financing", "option", "include", "payment", "installment", "plan"]}
{"http_verb": "GET ", "uri": " /inStoreLocations ", "processed_uri": ["store", "locations"], "description": " Retrieve a paginated list of all in-store locations. ", "parameter": " n/a\n", "processed_des_para": ["retrieve", "paginated", "list", "store", "location"]}
{"http_verb": "POST ", "uri": " /authorizePaymentMethod ", "processed_uri": ["authorize", "payment", "method"], "description": " Authorize an eligible payment method and return a payload that includes details of the resulting transaction.", "parameter": "n/a\n", "processed_des_para": ["authorize", "eligible", "payment", "method", "return", "payload", "include", "detail", "result", "transaction"]}
{"http_verb": "POST ", "uri": " /authorizePayPalAccount ", "processed_uri": ["authorize", "pay", "pal", "account"], "description": " Authorize an eligible PayPal account and return a payload that includes details of the resulting transaction.", "parameter": "n/a\n", "processed_des_para": ["authorize", "eligible", "pay", "pal", "account", "return", "payload", "include", "detail", "result", "transaction"]}
{"http_verb": "POST ", "uri": " /authorizeVenmoAccount ", "processed_uri": ["authorize", "venmo", "account"], "description": " Authorize an eligible Venmo account and return a payload that includes details of the resulting transaction. ", "parameter": " n/a\n", "processed_des_para": ["authorize", "eligible", "venmo", "account", "return", "payload", "include", "detail", "result", "transaction"]}
{"http_verb": "POST ", "uri": " /authorizeCreditCard ", "processed_uri": ["authorize", "credit", "card"], "description": " Authorize a credit card of any origin and return a payload that includes details of the resulting transaction. ", "parameter": " n/a\n", "processed_des_para": ["authorize", "credit", "card", "origin", "return", "payload", "include", "detail", "result", "transaction"]}
{"http_verb": "POST ", "uri": " /captureTransaction ", "processed_uri": ["capture", "transaction"], "description": " Capture an authorized transaction and return a payload that includes details of the transaction. ", "parameter": " n/a\n", "processed_des_para": ["capture", "authorize", "transaction", "return", "payload", "include", "detail", "transaction"]}
{"http_verb": "POST ", "uri": " /chargeUsBankAccount ", "processed_uri": ["charge", "us", "bank", "account"], "description": " Charge a US bank account and return a payload that includes details of the resulting transaction. See https://developers.braintreepayments.com/guides/ach/configuration for information on eligibility and setup.", "parameter": "n/a\n", "processed_des_para": ["charge", "bank", "account", "return", "payload", "include", "detail", "result", "transaction", "see", "developersbraintreepaymentscom", "guide", "ach", "configuration", "information", "eligibility", "setup"]}
{"http_verb": "POST ", "uri": " /chargePayPalAccount ", "processed_uri": ["charge", "pay", "pal", "account"], "description": " Charge a PayPal account and return a payload that includes details of the resulting transaction.", "parameter": "n/a\n", "processed_des_para": ["charge", "pay", "pal", "account", "return", "payload", "include", "detail", "result", "transaction"]}
{"http_verb": "POST ", "uri": " /chargeVenmoAccount ", "processed_uri": ["charge", "venmo", "account"], "description": " Charge a Venmo account and return a payload that includes details of the resulting transaction. See https://articles.braintreepayments.com/guides/payment-methods/venmo for information on eligibility and setup.", "parameter": "n/a\n", "processed_des_para": ["charge", "venmo", "account", "return", "payload", "include", "detail", "result", "transaction", "see", "articlesbraintreepaymentscom", "guide", "payment", "method", "venmo", "information", "eligibility", "setup"]}
{"http_verb": "POST ", "uri": " /chargeCreditCard ", "processed_uri": ["charge", "credit", "card"], "description": " Charge a credit card of any origin and return a payload that includes details of the resulting transaction.", "parameter": "n/a\n", "processed_des_para": ["charge", "credit", "card", "origin", "return", "payload", "include", "detail", "result", "transaction"]}
{"http_verb": "POST ", "uri": " /vaultPaymentMethod ", "processed_uri": ["vault", "payment", "method"], "description": " Vault payment information from a single-use payment method and return a payload that includes a new multi-use payment method. When vaulting a credit card, by default, this mutation will also verify that card before vaulting.", "parameter": "n/a\n", "processed_des_para": ["vault", "payment", "information", "single", "use", "payment", "method", "return", "payload", "include", "new", "multi", "use", "payment", "method", "vault", "credit", "card", "default", "mutation", "also", "verify", "card", "vaulting"]}
{"http_verb": "POST ", "uri": " /vaultUsBankAccount ", "processed_uri": ["vault", "us", "bank", "account"], "description": " Vault payment information from a single-use US bank account payment method and return a payload that includes a new multi-use payment method.", "parameter": "n/a\n", "processed_des_para": ["vault", "payment", "information", "single", "use", "bank", "account", "payment", "method", "return", "payload", "include", "new", "multi", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /vaultCreditCard ", "processed_uri": ["vault", "credit", "card"], "description": " Vault payment information from a single-use credit card and return a payload that includes a new multi-use payment method. By default, this mutation will also verify the card before vaulting.", "parameter": "n/a\n", "processed_des_para": ["vault", "payment", "information", "single", "use", "credit", "card", "return", "payload", "include", "new", "multi", "use", "payment", "method", "default", "mutation", "also", "verify", "card", "vaulting"]}
{"http_verb": "POST ", "uri": " /refundTransaction ", "processed_uri": ["refund", "transaction"], "description": " Refund a settled transaction and return a payload that includes details of the refund. ", "parameter": "n/a\n", "processed_des_para": ["refund", "settle", "transaction", "return", "payload", "include", "detail", "refund"]}
{"http_verb": "POST ", "uri": " /reverseTransaction ", "processed_uri": ["reverse", "transaction"], "description": " Reverse a transaction and return a payload that includes either the voided transaction or a refund.", "parameter": "n/a\n", "processed_des_para": ["reverse", "transaction", "return", "payload", "include", "either", "void", "transaction", "refund"]}
{"http_verb": "POST ", "uri": " /reverseRefund ", "processed_uri": ["reverse", "refund"], "description": " Reverse a refund and return a payload that includes voided refund.", "parameter": "n/a\n", "processed_des_para": ["reverse", "refund", "return", "payload", "include", "void", "refund"]}
{"http_verb": "POST ", "uri": " /refundCreditCard", "processed_uri": ["refund", "credit", "card"], "description": " Create a detached refund (unassociated with any previous Braintree payment) to a credit card and return a payload that includes details of the refund. We have previously referred to this as issuing a \"detached credit,\" and it is disallowed by default. See the documentation for more information regarding eligibility and configuration.", "parameter": "n/a\n", "processed_des_para": ["create", "detach", "refund", "unassociated", "previous", "braintree", "payment", "credit", "card", "return", "payload", "include", "detail", "refund", "previously", "refer", "issue", "detach", "credit", "disallow", "default", "see", "documentation", "information", "regard", "eligibility", "configuration"]}
{"http_verb": "POST ", "uri": " /refundUsBankAccount", "processed_uri": ["refund", "us", "bank", "account"], "description": " Create a detached refund (unassociated with any previous Braintree payment) to a US Bank Account and return a payload that includes details of the refund. We have previously referred to this as issuing a \"detached credit,\" and it is disallowed by default. See the documentation for more information regarding eligibility and configuration.", "parameter": "n/a\n", "processed_des_para": ["create", "detach", "refund", "unassociated", "previous", "braintree", "payment", "bank", "account", "return", "payload", "include", "detail", "refund", "previously", "refer", "issue", "detach", "credit", "disallow", "default", "see", "documentation", "information", "regard", "eligibility", "configuration"]}
{"http_verb": "POST ", "uri": " /updateCustomFields ", "processed_uri": ["update", "custom", "fields"], "description": " Update custom fields on a transaction or refund. Custom fields are defined in the Control Panel.", "parameter": "n/a\n", "processed_des_para": ["update", "custom", "field", "transaction", "refund", "custom", "field", "define", "control", "panel"]}
{"http_verb": "POST ", "uri": " /verifyPaymentMethod", "processed_uri": ["verify", "payment", "method"], "description": "Run a verification on a multi-use payment method.", "parameter": "n/a\n", "processed_des_para": ["run", "verification", "multi", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /verifyCreditCard ", "processed_uri": ["verify", "credit", "card"], "description": " Run a verification on a multi-use credit card payment method.", "parameter": "n/a\n", "processed_des_para": ["run", "verification", "multi", "use", "credit", "card", "payment", "method"]}
{"http_verb": "POST ", "uri": " /verifyUsBankAccount ", "processed_uri": ["verify", "us", "bank", "account"], "description": " Run a verification on a multi-use US bank account payment method.", "parameter": "n/a\n", "processed_des_para": ["run", "verification", "multi", "use", "bank", "account", "payment", "method"]}
{"http_verb": "POST ", "uri": " /confirmMicroTransferAmounts", "processed_uri": ["confirm", "micro", "transfer", "amounts"], "description": " Confirm micro-transfer amounts initiated by vaultUsBankAccount or verifyUsBankAccount, completing the verification process for a US Bank Account via micro-transfer.", "parameter": "n/a\n", "processed_des_para": ["confirm", "micro", "transfer", "amount", "initiate", "vault", "us", "bank", "account", "verify", "us", "bank", "account", "complete", "verification", "process", "bank", "account", "via", "micro", "transfer"]}
{"http_verb": "POST ", "uri": " /deletePaymentMethodFromVault ", "processed_uri": ["delete", "payment", "method", "vault"], "description": " Delete a multi-use payment method from the vault.", "parameter": "n/a\n", "processed_des_para": ["delete", "multi", "use", "payment", "method", "vault"]}
{"http_verb": "POST ", "uri": " /createClientToken ", "processed_uri": ["create", "client", "token"], "description": " Create a client token that can be used to initialize a client in order to tokenize payment information.", "parameter": "n/a\n", "processed_des_para": ["create", "client", "token", "use", "initialize", "client", "order", "tokenize", "payment", "information"]}
{"http_verb": "POST ", "uri": " /createUniversalAccessToken ", "processed_uri": ["create", "universal", "access", "token"], "description": " Create a PayPal access token that can be used to make additional API calls or initialize a client.", "parameter": "n/a\n", "processed_des_para": ["create", "pay", "pal", "access", "token", "use", "make", "additional", "ap", "call", "initialize", "client"]}
{"http_verb": "POST ", "uri": " /partialCaptureTransaction ", "processed_uri": ["partial", "capture", "transaction"], "description": " Partially capture funds from a transaction that was successfully authorized and return a payload that includes a new transaction with information about the capture. This is available for Venmo and PayPal transactions.", "parameter": "n/a\n", "processed_des_para": ["partially", "capture", "fund", "transaction", "successfully", "authorize", "return", "payload", "include", "new", "transaction", "information", "capture", "available", "venmo", "pay", "pal", "transaction"]}
{"http_verb": "POST ", "uri": " /tokenizeCustomActionsPaymentMethod ", "processed_uri": ["tokenize", "custom", "actions", "payment", "method"], "description": " Tokenize Custom Actions fields and return a payload that includes a single-use payment method.", "parameter": "n/a\n", "processed_des_para": ["tokenize", "custom", "action", "field", "return", "payload", "include", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /tokenizeCreditCard ", "processed_uri": ["tokenize", "credit", "card"], "description": " Tokenize credit card fields and return a payload that includes a single-use payment method.", "parameter": "n/a\n", "processed_des_para": ["tokenize", "credit", "card", "field", "return", "payload", "include", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /tokenizeCvv ", "processed_uri": ["tokenize", "cvv"], "description": " Tokenize a credit card's CVV and return a payload that includes a single-use payment method.", "parameter": "n/a\n", "processed_des_para": ["tokenize", "credit", "card", "cv", "return", "payload", "include", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /tokenizeNetworkToken ", "processed_uri": ["tokenize", "network", "token"], "description": " Tokenize a network tokenized payment instrument and return a payload that includes a single-use payment method.", "parameter": "n/a\n", "processed_des_para": ["tokenize", "network", "tokenize", "payment", "instrument", "return", "payload", "include", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /tokenizeSamsungPayCard ", "processed_uri": ["tokenize", "samsung", "pay", "card"], "description": " Tokenize Samsung Pay card fields and return a payload that includes a single-use payment method.", "parameter": "n/a\n", "processed_des_para": ["tokenize", "samsung", "pay", "card", "field", "return", "payload", "include", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /tokenizeUsBankAccount ", "processed_uri": ["tokenize", "us", "bank", "account"], "description": " Tokenize US bank account fields and return a payload that includes a single-use payment method.", "parameter": "n/a\n", "processed_des_para": ["tokenize", "bank", "account", "field", "return", "payload", "include", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /tokenizeUsBankLogin ", "processed_uri": ["tokenize", "us", "bank", "login"], "description": " Tokenize US bank login fields and return a payload that includes a single-use payment method.", "parameter": "n/a\n", "processed_des_para": ["tokenize", "bank", "login", "field", "return", "payload", "include", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /tokenizePayPalOneTimePayment ", "processed_uri": ["tokenize", "pay", "pal", "one", "time", "payment"], "description": " Tokenize PayPal One-Time Payment and return a payload that includes a single-use payment method.", "parameter": "n/a\n", "processed_des_para": ["tokenize", "pay", "pal", "one", "time", "payment", "return", "payload", "include", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /createPayPalOneTimePayment ", "processed_uri": ["create", "pay", "pal", "one", "time", "payment"], "description": " Set up a PayPal One-Time Payment for approval by a PayPal user. See documentation for more information. Your account must be enabled for this feature.", "parameter": "n/a\n", "processed_des_para": ["set", "pay", "pal", "one", "time", "payment", "approval", "pay", "pal", "user", "see", "documentation", "information", "account", "must", "enable", "feature"]}
{"http_verb": "POST ", "uri": " /tokenizePayPalBillingAgreement ", "processed_uri": ["tokenize", "pay", "pal", "billing", "agreement"], "description": " Tokenize PayPal account and return a payload that includes a single-use payment method.", "parameter": "n/a\n", "processed_des_para": ["tokenize", "pay", "pal", "account", "return", "payload", "include", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /createPayPalBillingAgreement ", "processed_uri": ["create", "pay", "pal", "billing", "agreement"], "description": " Set up a PayPal Billing Agreement Token for approval by a PayPal user.", "parameter": "n/a\n", "processed_des_para": ["set", "pay", "pal", "billing", "agreement", "token", "approval", "pay", "pal", "user"]}
{"http_verb": "POST ", "uri": " /createCustomer ", "processed_uri": ["create", "customer"], "description": " Create a customer for storing individual customer information and/or grouping transactions and multi-use payment methods.", "parameter": "n/a\n", "processed_des_para": ["create", "customer", "store", "individual", "customer", "information", "grouping", "transaction", "multi", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /updateCustomer ", "processed_uri": ["update", "customer"], "description": " Update a customer's information. ", "parameter": " n/a\n", "processed_des_para": ["update", "customer", "information"]}
{"http_verb": "POST ", "uri": " /deleteCustomer ", "processed_uri": ["delete", "customer"], "description": " Delete a customer, breaking association between any of the customer's transactions. Will not delete if the customer has existing payment methods. ", "parameter": "n/a\n", "processed_des_para": ["delete", "customer", "break", "association", "customer", "transaction", "delete", "customer", "exist", "payment", "method"]}
{"http_verb": "POST ", "uri": " /updateCreditCardBillingAddress ", "processed_uri": ["update", "credit", "card", "billing", "address"], "description": " Set a new billing address for a multi-use credit card payment method. By default, this mutation will also verify the card with the new billing address before updating. ", "parameter": "n/a\n", "processed_des_para": ["set", "new", "billing", "address", "multi", "use", "credit", "card", "payment", "method", "default", "mutation", "also", "verify", "card", "new", "billing", "address", "update"]}
{"http_verb": "POST ", "uri": " /updateCreditCardCardholderName ", "processed_uri": ["update", "credit", "card", "cardholder", "name"], "description": " Set a new cardholder name for a multi-use credit card payment method. By default, this mutation will also verify the card with the new cardholder name before updating. ", "parameter": "n/a\n", "processed_des_para": ["set", "new", "cardholder", "name", "multi", "use", "credit", "card", "payment", "method", "default", "mutation", "also", "verify", "card", "new", "cardholder", "name", "updating"]}
{"http_verb": "POST ", "uri": " /updateCreditCardExpirationDate ", "processed_uri": ["update", "credit", "card", "expiration", "date"], "description": " Set a new expiration date for a multi-use credit card payment method. By default, this mutation will also verify the card with the new expiration date before updating. ", "parameter": "n/a\n", "processed_des_para": ["set", "new", "expiration", "date", "multi", "use", "credit", "card", "payment", "method", "default", "mutation", "also", "verify", "card", "new", "expiration", "date", "update"]}
{"http_verb": "POST ", "uri": " /performThreeDSecureLookup ", "processed_uri": ["perform", "three", "secure", "lookup"], "description": " Attempt to perform 3D Secure Authentication on credit card payment method. This may consume the payment method and return a new single-use payment method. ", "parameter": "n/a\n", "processed_des_para": ["attempt", "perform", "secure", "authentication", "credit", "card", "payment", "method", "consume", "payment", "method", "return", "new", "single", "use", "payment", "method"]}
{"http_verb": "POST ", "uri": " /acceptDispute ", "processed_uri": ["accept", "dispute"], "description": " Accepts a dispute and returns a payload that includes the dispute that was accepted. Only disputes with a status of OPEN can be accepted. ", "parameter": "n/a\n", "processed_des_para": ["accept", "dispute", "return", "payload", "include", "dispute", "accept", "dispute", "status", "ope", "accept"]}
{"http_verb": "POST ", "uri": " /finalizeDispute ", "processed_uri": ["finalize", "dispute"], "description": " Finalizes a dispute and returns a payload that includes the dispute that was finalized. Only disputes with a status of OPEN can be finalized. ", "parameter": "n/a\n", "processed_des_para": ["finalize", "dispute", "return", "payload", "include", "dispute", "finalize", "dispute", "status", "ope", "finalize"]}
{"http_verb": "POST ", "uri": " /createDisputeTextEvidence ", "processed_uri": ["create", "dispute", "text", "evidence"], "description": " Creates text evidence to a dispute and returns a payload that includes the evidence that was created. Only disputes with a status of OPEN can have text evidence created for them. ", "parameter": "n/a\n", "processed_des_para": ["create", "text", "evidence", "dispute", "return", "payload", "include", "evidence", "create", "dispute", "status", "ope", "text", "evidence", "create"]}
{"http_verb": "POST ", "uri": " /deleteDisputeEvidence ", "processed_uri": ["delete", "dispute", "evidence"], "description": " Deletes evidence from a dispute. ", "parameter": "n/a\n", "processed_des_para": ["delete", "evidence", "dispute"]}
{"http_verb": "POST ", "uri": " /createDisputeFileEvidence ", "processed_uri": ["create", "dispute", "file", "evidence"], "description": " Uploads an evidence file and associates it with a dispute. Note:: file upload requires a special request format. See the 'Uploading Files' integration guide for instructions on how to perform this mutation. ", "parameter": "n/a\n", "processed_des_para": ["upload", "evidence", "file", "associate", "dispute", "note", "file", "upload", "require", "special", "request", "format", "see", "uploading", "file", "integration", "guide", "instruction", "perform", "mutation"]}
{"http_verb": "POST ", "uri": " /vaultPayPalBillingAgreement ", "processed_uri": ["vault", "pay", "pal", "billing", "agreement"], "description": " Vault an existing PayPal Billing Agreement that was not created through Braintree. Only use this mutation if you need to import PayPal Billing Agreements from an existing PayPal integration into your Braintree account. ", "parameter": "n/a\n", "processed_des_para": ["vault", "exist", "pay", "pal", "billing", "agreement", "create", "braintree", "use", "mutation", "need", "import", "pay", "pal", "billing", "agreement", "exist", "pay", "pal", "integration", "braintree", "account"]}
{"http_verb": "POST ", "uri": " /sandboxSettleTransaction ", "processed_uri": ["sandbox", "settle", "transaction"], "description": " Force a transaction to settle in the sandbox environment. Generates an error elsewhere. ", "parameter": "n/a\n", "processed_des_para": ["force", "transaction", "settle", "sandbox", "environment", "generate", "error", "elsewhere"]}
{"http_verb": "POST ", "uri": " /createInStoreLocation ", "processed_uri": ["create", "store", "location"], "description": " Creates a new In-Store Location to associate Readers. ", "parameter": "n/a\n", "processed_des_para": ["create", "new", "store", "location", "associate", "reader"]}
{"http_verb": "POST ", "uri": " /updateInStoreLocation ", "processed_uri": ["update", "store", "location"], "description": " Updates an In-Store Location. ", "parameter": "n/a\n", "processed_des_para": ["update", "store", "location"]}
{"http_verb": "POST ", "uri": " /pairInStoreReader ", "processed_uri": ["pair", "store", "reader"], "description": " Pairs a Reader to an account and In-Store Location. ", "parameter": "n/a\n", "processed_des_para": ["pair", "reader", "account", "store", "location"]}
{"http_verb": "POST ", "uri": " /updateInStoreReader ", "processed_uri": ["update", "store", "reader"], "description": " Updates an In-Store Reader. ", "parameter": "n/a\n", "processed_des_para": ["update", "store", "reader"]}
{"http_verb": "POST ", "uri": " /requestChargeFromInStoreReader ", "processed_uri": ["request", "charge", "store", "reader"], "description": " Request an in-store reader to begin the charge flow. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "begin", "charge", "flow"]}
{"http_verb": "POST ", "uri": " /requestAuthorizeFromInStoreReader ", "processed_uri": ["request", "authorize", "store", "reader"], "description": " Request an in-store reader to begin the authorize flow. Only supported on payment application versions >= 5.1.0. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "begin", "authorize", "flow", "support", "payment", "application", "version"]}
{"http_verb": "POST ", "uri": " /requestCancelFromInStoreReader ", "processed_uri": ["request", "cancel", "store", "reader"], "description": " Request an in-store reader to cancel the charge flow. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "cancel", "charge", "flow"]}
{"http_verb": "POST ", "uri": " /requestRefundFromInStoreReader ", "processed_uri": ["request", "refund", "store", "reader"], "description": " Request an in-store reader to start an unreferenced refund flow. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "start", "unreferenced", "refund", "flow"]}
{"http_verb": "POST ", "uri": " /requestVaultFromInStoreReader", "processed_uri": ["request", "vault", "store", "reader"], "description": "Request an in-store reader to vault a payment method. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "vault", "payment", "method"]}
{"http_verb": "POST ", "uri": " /requestTextDisplayFromInStoreReader ", "processed_uri": ["request", "text", "display", "store", "reader"], "description": " Request an in-store reader to display text. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "display", "text"]}
{"http_verb": "POST ", "uri": " /requestItemDisplayFromInStoreReader ", "processed_uri": ["request", "item", "display", "store", "reader"], "description": " Request an in-store reader to display line items. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "display", "line", "item"]}
{"http_verb": "POST ", "uri": " /requestFirmwareUpdateFromInStoreReader ", "processed_uri": ["request", "firmware", "update", "store", "reader"], "description": " Request an in-store reader to update to the latest version of software. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "update", "late", "version", "software"]}
{"http_verb": "POST ", "uri": " /requestSignaturePromptFromInStoreReader ", "processed_uri": ["request", "signature", "prompt", "store", "reader"], "description": " Request an in-store reader to display a signature prompt. Only supported on payment application versions >= 3.3.0. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "display", "signature", "prompt", "support", "payment", "application", "version"]}
{"http_verb": "POST ", "uri": " /requestConfirmationPromptFromInStoreReader", "processed_uri": ["request", "confirmation", "prompt", "store", "reader"], "description": "Request an in-store reader to display a confirmation prompt. Only supported on payment application versions >= 3.3.0. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "display", "confirmation", "prompt", "support", "payment", "application", "version"]}
{"http_verb": "POST ", "uri": " /requestNonPciCardDataFromInStoreReader ", "processed_uri": ["request", "non", "pci", "card", "data", "store", "reader"], "description": " Request an in-store reader to collect non PCI-scoped card data. Only supported on payment application versions >= 5.2.0. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "collect", "non", "pc", "scoped", "card", "datum", "support", "payment", "application", "version"]}
{"http_verb": "POST ", "uri": " /requestAmountPromptFromInStoreReader ", "processed_uri": ["request", "amount", "prompt", "store", "reader"], "description": " Request an in-store reader to display an amount prompt. Only supported on payment application versions >= 5.2.0. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "display", "amount", "prompt", "support", "payment", "application", "version"]}
{"http_verb": "POST ", "uri": " /requestTextPromptFromInStoreReader ", "processed_uri": ["request", "text", "prompt", "store", "reader"], "description": " Request an in-store reader to display a text prompt. Only supported on payment application versions >= 5.2.0. ", "parameter": "n/a\n", "processed_des_para": ["request", "store", "reader", "display", "text", "prompt", "support", "payment", "application", "version"]}
{"http_verb": "POST ", "uri": " /createVenmoPaymentContext ", "processed_uri": ["create", "venmo", "payment", "context"], "description": " Create a Venmo payment context. ", "parameter": "n/a\n", "processed_des_para": ["create", "venmo", "payment", "context"]}
{"http_verb": "POST ", "uri": " /updateTransactionAmount ", "processed_uri": ["update", "transaction", "amount"], "description": " Updates the authorization amount of the transaction. ", "parameter": "n/a\n", "processed_des_para": ["update", "authorization", "amount", "transaction"]}
{"http_verb": "POST ", "uri": " /generateExchangeRateQuote ", "processed_uri": ["generate", "exchange", "rate", "quote"], "description": " Generate a customized currency exchange rate quote for items on a merchant's page. This allows merchants to advertise products in their customer's currency. Your account must be enabled to use this feature. ", "parameter": "n/a\n", "processed_des_para": ["generate", "customize", "currency", "exchange", "rate", "quote", "item", "merchant", "page", "allow", "merchant", "advertise", "product", "customer", "currency", "account", "must", "enable", "use", "feature"]}
{"http_verb": "POST ", "uri": " /createNonInstantLocalPaymentContext ", "processed_uri": ["create", "non", "instant", "local", "payment", "context"], "description": " Creates a non-instant local payment context. Your account must be enabled to use this feature. ", "parameter": "n/a\n", "processed_des_para": ["create", "non", "instant", "local", "payment", "context", "account", "must", "enable", "use", "feature"]}
{"http_verb": "POST ", "uri": " /DisputeEvidence/{id} ", "processed_uri": ["dispute", "evidence", "identification"], "description": " Evidence provided by a merchant to respond to a dispute. ", "parameter": "id: ID! Unique identifier\n", "processed_des_para": ["evidence", "provide", "merchant", "respond", "dispute", "identification", "unique", "identifier"]}
{"http_verb": "POST ", "uri": " /DisputeEvidence/{legacyId} ", "processed_uri": ["dispute", "evidence", "legacy", "identification"], "description": " Evidence provided by a merchant to respond to a dispute. ", "parameter": "legacyId: ID! Legacy unique identifier.\n", "processed_des_para": ["evidence", "provide", "merchant", "respond", "dispute", "legacy", "identification", "legacy", "unique", "identifier"]}
{"http_verb": "POST ", "uri": " /InStoreContextResult/{id} ", "processed_uri": ["store", "context", "result", "identification"], "description": " Reference object for an in-store request. ", "parameter": "", "processed_des_para": ["reference", "object", "store", "request"]}
{"http_verb": "POST ", "uri": " /InStoreReaderOriginDetails ", "processed_uri": ["store", "reader", "origin", "details"], "description": " Additional information about the payment method supplied by an in-store payment reader. ", "parameter": "n/a\n", "processed_des_para": ["additional", "information", "payment", "method", "supply", "store", "payment", "reader"]}
{"http_verb": "POST ", "uri": " /Node/{id} ", "processed_uri": ["node", "identification"], "description": " Relay compatible Node interface. ", "parameter": " id: ID! Global ID for a given object.\n", "processed_des_para": ["relay", "compatible", "node", "interface", "identification", "global", "give", "object"]}
{"http_verb": "POST ", "uri": " /Payment/{id} ", "processed_uri": ["payment", "identification"], "description": "  A merchant-initiated movement of money between the merchant and a customer, by way of a payment method. Payments can represent money moving either from a customer to the merchant by charging a payment method (a Transaction), or from the merchant back to a customer by refunding a previous transaction (a Refund). ", "parameter": "", "processed_des_para": ["merchant", "initiate", "movement", "money", "merchant", "customer", "way", "payment", "method", "payment", "represent", "money", "move", "either", "customer", "merchant", "charge", "payment", "method", "transaction", "merchant", "back", "customer", "refund", "previous", "transaction", "refund"]}
{"http_verb": "POST ", "uri": " /Payment/{legacyId} ", "processed_uri": ["payment", "legacy", "identification"], "description": "  A merchant-initiated movement of money between the merchant and a customer, by way of a payment method. Payments can represent money moving either from a customer to the merchant by charging a payment method (a Transaction), or from the merchant back to a customer by refunding a previous transaction (a Refund).  ", "parameter": "legacyId: ID! Legacy unique identifier.\n", "processed_des_para": ["merchant", "initiate", "movement", "money", "merchant", "customer", "way", "payment", "method", "payment", "represent", "money", "move", "either", "customer", "merchant", "charge", "payment", "method", "transaction", "merchant", "back", "customer", "refund", "previous", "transaction", "refund", "legacy", "identification", "legacy", "unique", "identifier"]}
{"http_verb": "POST ", "uri": " /PaymentContext ", "processed_uri": ["payment", "context"], "description": "Context associated with a transaction. ", "parameter": " id: ID! Unique identifier.\n", "processed_des_para": ["context", "associate", "transaction", "identification", "unique", "identifier"]}
{"http_verb": "POST ", "uri": " /PaymentStatusEvent ", "processed_uri": ["payment", "status", "event"], "description": " Status event in the lifecycle of a payment. ", "parameter": "n/a\n", "processed_des_para": ["status", "event", "lifecycle", "payment"]}
{"http_verb": "POST ", "uri": " /AccountCreationStatus ", "processed_uri": ["account", "creation", "status"], "description": " The status of the business account creation request. ", "parameter": "n/a\n", "processed_des_para": ["status", "business", "account", "creation", "request"]}
{"http_verb": "POST ", "uri": " /ApplePayStatus ", "processed_uri": ["apple", "pay", "status"], "description": " The environment being used for Apple Pay. ", "parameter": "n/a\n", "processed_des_para": ["environment", "use", "apple", "pay"]}
{"http_verb": "POST ", "uri": " /ApplicationBankAccountPurpose ", "processed_uri": ["application", "bank", "account", "purpose"], "description": " The purpose of the merchant application bank account. ", "parameter": "n/a\n", "processed_des_para": ["purpose", "merchant", "application", "bank", "account"]}
{"http_verb": "POST ", "uri": " /ApplicationStatus ", "processed_uri": ["application", "status"], "description": " The status of a merchant account application. ", "parameter": "n/a\n", "processed_des_para": ["status", "merchant", "account", "application"]}
{"http_verb": "POST ", "uri": " /BinRecordValue ", "processed_uri": ["bin", "record", "value"], "description": " A boolean-like value that includes UNKNOWN in the case where the information isn't available. ", "parameter": "n/a", "processed_des_para": ["boolean", "like", "value", "include", "unknow", "case", "information", "be", "not", "available"]}
