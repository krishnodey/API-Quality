{"http_verb": "GET ", "uri": " /channelContent/{id} ", "processed_uri": ["channel", "content", "identifer"], "description": " ChannelContent represents the various possible contents of channels by content type.", "parameter": " id\tID!\tThe identifier of the content.\n", "processed_des_para": ["channel", "content", "represent", "various", "possible", "content", "channel", "content", "type", "identifer", "identifier", "content"]}
{"http_verb": "GET ", "uri": " /channelGroup/{id} ", "processed_uri": ["channel", "group", "identifer"], "description": " ChannelGroup represents a grouping of Channels. ", "parameter": " \n", "processed_des_para": ["channel", "group", "represent", "grouping", "channel"]}
{"http_verb": "GET ", "uri": " /channelMembers/{userId} ", "processed_uri": ["channel", "members", "user", "identifer"], "description": " ChannelMembers represent all members assigned to any Channel on the plan. ", "parameter": " userId\tString\tThe unique identifier for the User\n", "processed_des_para": ["channel", "member", "represent", "member", "assign", "channel", "plan", "user", "identifer", "unique", "identifier", "user"]}
{"http_verb": "GET ", "uri": " /channelProgress ", "processed_uri": ["channel", "progress"], "description": " ChannelProgress represents consumption of channel content by any user, regardless of whether they are a channel member or not. ", "parameter": "\n", "processed_des_para": ["channel", "progress", "represent", "consumption", "channel", "content", "user", "regardless", "whether", "channel", "member"]}
{"http_verb": "GET ", "uri": " /channels ", "processed_uri": ["channels"], "description": " Channels represent collections of content like Courses, Paths, Projects, Guides, Interactive Courses, External Links, Labs, etc. ", "parameter": "\n", "processed_des_para": ["channel", "represent", "collection", "content", "like", "course", "path", "project", "guide", "interactive", "course", "external", "link", "lab", "etc"]}
{"http_verb": "POST ", "uri": " /addChannel ", "processed_uri": ["add", "channel"], "description": " Create a new Channel. ", "parameter": " \n", "processed_des_para": ["create", "new", "channel"]}
{"http_verb": "POST ", "uri": " /addChannelGroups ", "processed_uri": ["add", "channel", "groups"], "description": " Add one or more Channel Groups. ", "parameter": "\n", "processed_des_para": ["add", "one", "channel", "group"]}
{"http_verb": "POST ", "uri": " /addChannelMembers ", "processed_uri": ["add", "channel", "members"], "description": " Assign a User to an existing Channel. ", "parameter": "\n", "processed_des_para": ["assign", "user", "exist", "channel"]}
{"http_verb": "POST ", "uri": " /addChannelsToChannelGroups ", "processed_uri": ["add", "channels", "channel", "groups"], "description": " Add one or more Channels to one or more Channel Groups. Note: Adding a Channel that is already on a Channel Group will return success as true and will not duplicate the Channel. ", "parameter": "\n", "processed_des_para": ["add", "one", "channel", "one", "channel", "group", "note", "add", "channel", "already", "channel", "group", "return", "success", "duplicate", "channel"]}
{"http_verb": "POST ", "uri": " /addTeamsToChannels ", "processed_uri": ["add", "teams", "channels"], "description": " Assign Teams to existing Channels. ", "parameter": "\n", "processed_des_para": ["assign", "team", "exist", "channel"]}
{"http_verb": "POST ", "uri": " /archiveChannel ", "processed_uri": ["archive", "channel"], "description": " Archive a Channel. ", "parameter": "\n", "processed_des_para": ["archive", "channel"]}
{"http_verb": "DELETE ", "uri": " /deleteChannelGroup ", "processed_uri": ["delete", "channel", "group"], "description": " Delete one or more Channel Groups. ", "parameter": "\n", "processed_des_para": ["delete", "one", "channel", "group"]}
{"http_verb": "DELETE ", "uri": " /deleteChannelGroupChannels ", "processed_uri": ["delete", "channel", "group", "channels"], "description": " Delete one or more Channels from one or more Channel Groups. Note: if an invalid channelId or channelGroupId is passed, this will return a success of true and not an error ", "parameter": "\n", "processed_des_para": ["delete", "one", "channel", "one", "channel", "group", "note", "invalid", "channel", "identifer", "channel", "group", "identifer", "pass", "return", "success", "error"]}
{"http_verb": "POST ", "uri": " /editChannel ", "processed_uri": ["edit", "channel"], "description": " Modify Channel details. All edits require both channelId and actorUserId. ", "parameter": "\n", "processed_des_para": ["modify", "channel", "detail", "edit", "require", "channel", "identifer", "actor", "user", "identifer"]}
{"http_verb": "DELETE ", "uri": " /removeChannelContent ", "processed_uri": ["remove", "channel", "content"], "description": " Remove Content from an existing Channel. ", "parameter": " \n", "processed_des_para": ["remove", "content", "exist", "channel"]}
{"http_verb": "DELETE ", "uri": " /removeChannelMember ", "processed_uri": ["remove", "channel", "member"], "description": " Remove a member or contributor from an existing Channel. ", "parameter": "\n", "processed_des_para": ["remove", "member", "contributor", "exist", "channel"]}
{"http_verb": "PUT ", "uri": " /updateChannelGroups ", "processed_uri": ["update", "channel", "groups"], "description": " Update one or more Channel Groups. ", "parameter": "\n", "processed_des_para": ["update", "one", "channel", "group"]}
{"http_verb": "GET ", "uri": " /contentCatalog ", "processed_uri": ["content", "catalog"], "description": " ContentCatalog represents an aggregate of all of the content types\n", "parameter": "", "processed_des_para": ["content", "catalog", "represent", "aggregate", "content", "type"]}
{"http_verb": "GET ", "uri": " /courseCatalog ", "processed_uri": ["course", "catalog"], "description": " CourseCatalog represents a list of VideoCourses available on Pluralsight.com. Note: there can be up to a 24 hour delay in updates to this data. ", "parameter": "\n", "processed_des_para": ["course", "catalog", "represent", "list", "video", "course", "available", "pluralsightcom", "note", "hour", "delay", "update", "datum"]}
{"http_verb": "GET ", "uri": " /labCatalog ", "processed_uri": ["lab", "catalog"], "description": " LabCatalog represents a list of labs available at Pluralsight. ", "parameter": "\n", "processed_des_para": ["lab", "catalog", "represent", "list", "lab", "available", "pluralsight"]}
{"http_verb": "GET ", "uri": " /marketTaxonomy ", "processed_uri": ["market", "taxonomy"], "description": " marketTaxonomy represents one or more technology Concepts contained in a three level hierarchical SKOS taxonomy. ", "parameter": "\n", "processed_des_para": ["market", "taxonomy", "represent", "one", "technology", "concept", "contain", "three", "level", "hierarchical", "sko", "taxonomy"]}
{"http_verb": "GET ", "uri": " /pathCatalog ", "processed_uri": ["path", "catalog"], "description": " Path Catalog represents a list of available Paths on Pluralsight.com. ", "parameter": "\n", "processed_des_para": ["path", "catalog", "represent", "list", "available", "path", "pluralsightcom"]}
{"http_verb": "GET ", "uri": " /programCatalog ", "processed_uri": ["program", "catalog"], "description": " programCatalog represents your plan's instance of the Tech Foundations program. This data will only be available to plans that have the Tech Foundations program. programCatalog contains PROGRAM and SUBJECT information for content related to your TF instance. ", "parameter": "\n", "processed_des_para": ["program", "catalog", "represent", "plan", "instance", "tech", "foundation", "program", "datum", "available", "plan", "tech", "foundation", "program", "program", "catalog", "contain", "progra", "subjec", "information", "content", "relate", "instance"]}
{"http_verb": "GET ", "uri": " /projectCatalog ", "processed_uri": ["project", "catalog"], "description": " ProjectCatalog represents a list of available Projects on Pluralsight.com. ", "parameter": " \n", "processed_des_para": ["project", "catalog", "represent", "list", "available", "project", "pluralsightcom"]}
{"http_verb": "GET ", "uri": " /tags ", "processed_uri": ["tags"], "description": " Tags represent one or more technology concepts associated with a piece of content. ", "parameter": "\n", "processed_des_para": ["tag", "represent", "one", "technology", "concept", "associate", "piece", "content"]}
{"http_verb": "GET ", "uri": " /roleIqAssignments ", "processed_uri": ["role", "iq", "assignments"], "description": " RoleIqAssignments represent Role IQ's that have been assigned to a particular user. ", "parameter": " \n", "processed_des_para": ["role", "iq", "assignment", "represent", "role", "assign", "particular", "user"]}
{"http_verb": "GET ", "uri": " /roleIqCatalog ", "processed_uri": ["role", "iq", "catalog"], "description": " A Role IQ represents a container of skills that define a particular Role. ", "parameter": "\n", "processed_des_para": ["role", "represent", "container", "skill", "define", "particular", "role"]}
{"http_verb": "GET ", "uri": " /roleIqLearnerLevels ", "processed_uri": ["role", "iq", "learner", "levels"], "description": " RoleIQLearnerLevels represent a learner's score for a particular role. ", "parameter": "\n", "processed_des_para": ["role", "iq", "learner", "level", "represent", "learner", "score", "particular", "role"]}
{"http_verb": "GET ", "uri": " /roleIqSkills ", "processed_uri": ["role", "iq", "skills"], "description": " RollIqSkills represent individual Skills assigned to a particular Role. A Skill can be assigned to 0 or more Roles and Roles will have 1 or more Skills. ", "parameter": " \n", "processed_des_para": ["roll", "iq", "skill", "represent", "individual", "skill", "assign", "particular", "role", "skill", "assign", "role", "role", "skill"]}
{"http_verb": "GET ", "uri": " /roleIqsSummary ", "processed_uri": ["role", "iqs", "summary"], "description": " RoleIqsSummary is especially useful for Professional Plans as it represents a summary view of roles for your organization.  ", "parameter": "\n", "processed_des_para": ["role", "iqs", "summary", "especially", "useful", "professional", "plan", "represent", "summary", "view", "role", "organization"]}
{"http_verb": "POST ", "uri": " /addRole ", "processed_uri": ["add", "role"], "description": " Create a new Role ", "parameter": " \n", "processed_des_para": ["create", "new", "role"]}
{"http_verb": "POST ", "uri": " /assignTeamsToRole ", "processed_uri": ["assign", "teams", "role"], "description": " Assign Teams to a Role. ", "parameter": "\n", "processed_des_para": ["assign", "team", "role"]}
{"http_verb": "POST ", "uri": " /assignUsersToRole ", "processed_uri": ["assign", "users", "role"], "description": " Assign Users to a Role. ", "parameter": " \n", "processed_des_para": ["assign", "user", "role"]}
{"http_verb": "DELETE ", "uri": " /deleteRole ", "processed_uri": ["delete", "role"], "description": " Delete an existing Role. ", "parameter": "\n", "processed_des_para": ["delete", "exist", "role"]}
{"http_verb": "PUT ", "uri": " /editRole ", "processed_uri": ["edit", "role"], "description": " Edit an existing Role's information. ", "parameter": " \n", "processed_des_para": ["edit", "existing", "role", "information"]}
{"http_verb": "GET ", "uri": " /skillAssessmentCatalog ", "processed_uri": ["skill", "assessment", "catalog"], "description": " SkillAssessmentCatalog represents a list of all available Skill Assessments that can be taken by a User. ", "parameter": "\n", "processed_des_para": ["skill", "assessment", "catalog", "represent", "list", "available", "skill", "assessment", "take", "user"]}
{"http_verb": "GET ", "uri": " /skillAssessmentResults ", "processed_uri": ["skill", "assessment", "results"], "description": " SkillAssessmentResults represent the results of an assessment taken by a User. Once the assessment is completed, a User has 48 hours to complete a do-over if they would like. The higher of the two scores is kept. ", "parameter": " \n", "processed_des_para": ["skill", "assessment", "result", "represent", "result", "assessment", "take", "user", "assessment", "complete", "user", "hour", "complete", "like", "high", "two", "score", "keep"]}
{"http_verb": "GET ", "uri": " /skillIqsSummary ", "processed_uri": ["skill", "iqs", "summary"], "description": " SkillIqsSummary represents a summary view of Skill IQ levels for your organization. ", "parameter": "\n", "processed_des_para": ["skill", "iqs", "summary", "represent", "summary", "view", "skill", "levels", "organization"]}
{"http_verb": "GET ", "uri": " /planPermissionSets ", "processed_uri": ["plan", "permission", "sets"], "description": " PlanPermissionSets represent a custom permission model for what managers and admins have permissions for on a plan.  ", "parameter": " \n", "processed_des_para": ["plan", "permission", "set", "represent", "custom", "permission", "model", "manager", "admin", "permission", "plan"]}
{"http_verb": "GET ", "uri": " /teamManagers ", "processed_uri": ["team", "managers"], "description": " TeamManagers represent a list of the plan users on a team who have additional rights to manage a Team that they are assigned to. ", "parameter": " \n", "processed_des_para": ["team", "manager", "represent", "list", "plan", "user", "team", "additional", "right", "manage", "team", "assign"]}
{"http_verb": "GET ", "uri": " /teams ", "processed_uri": ["teams"], "description": " Teams represents a list of teams (grouping of Users) associated with the provided API key. A User can belong to many Teams. ", "parameter": " \n", "processed_des_para": ["team", "represent", "list", "team", "group", "user", "associate", "provide", "ap", "key", "user", "belong", "many", "team"]}
{"http_verb": "POST ", "uri": " /addTeam ", "processed_uri": ["add", "team"], "description": " Create a new Team. ", "parameter": " \n", "processed_des_para": ["create", "new", "team"]}
{"http_verb": "POST ", "uri": " /addTeamManager ", "processed_uri": ["add", "team", "manager"], "description": " Makes an existing user on the plan a manager of the Team. Managers can be added to multiple teams. This will have no impact on their license if the manager is a licensed user. ", "parameter": "\n", "processed_des_para": ["make", "exist", "user", "plan", "manager", "team", "manager", "add", "multiple", "team", "impact", "license", "manager", "license", "user"]}
{"http_verb": "POST ", "uri": " /addTeamMember ", "processed_uri": ["add", "team", "member"], "description": " Add a licensed user to a Team. This will not remove the user from any other Teams.", "parameter": "\n", "processed_des_para": ["add", "licensed", "user", "team", "remove", "user", "team"]}
{"http_verb": "DELETE ", "uri": " /deleteTeam ", "processed_uri": ["delete", "team"], "description": " Delete a Team. ", "parameter": " \n", "processed_des_para": ["delete", "team"]}
{"http_verb": "GET ", "uri": " /editTeam ", "processed_uri": ["edit", "team"], "description": " Used to modify the details of a Team. ", "parameter": "\n", "processed_des_para": ["use", "modify", "detail", "team"]}
{"http_verb": "POST ", "uri": " /inviteManager ", "processed_uri": ["invite", "manager"], "description": " Invite User to be a manager of a Team on the plan by sending them an email. ", "parameter": " \n", "processed_des_para": ["invite", "user", "manager", "team", "plan", "send", "email"]}
{"http_verb": "POST ", "uri": " /moveMemberToTeam ", "processed_uri": ["move", "member", "team"], "description": " Add or Move licensed User to a Team. This will remove the member from all currently assigned teams and add them to the new teams provided. If no teamIds are provided, the member will be removed from all teams and moved to the unassigned section. ", "parameter": " \n", "processed_des_para": ["add", "move", "licensed", "user", "team", "remove", "member", "currently", "assign", "team", "add", "new", "team", "provide", "team", "identification", "provide", "member", "remove", "team", "move", "unassigned", "section"]}
{"http_verb": "DELETE ", "uri": " /removeTeamManager ", "processed_uri": ["remove", "team", "manager"], "description": " Remove a manager from a Team. ", "parameter": " \n", "processed_des_para": ["remove", "manager", "team"]}
{"http_verb": "DELETE ", "uri": " /removeTeamMember ", "processed_uri": ["remove", "team", "member"], "description": " Removes a licensed user from a Team. ", "parameter": " \n", "processed_des_para": ["remove", "licensed", "user", "team"]}
{"http_verb": "GET ", "uri": " /courseDailyUsage ", "processed_uri": ["course", "daily", "usage"], "description": " Represents user course usage totals for each day the user viewed content, broken down per user, per course, per day by plan. ", "parameter": "\n", "processed_des_para": ["represent", "user", "course", "usage", "total", "day", "user", "view", "content", "break", "per", "user", "per", "course", "per", "day", "plan"]}
{"http_verb": "GET ", "uri": " /courseProgress ", "processed_uri": ["course", "progress"], "description": " CourseProgress returns course usage data, including current and previously licensed users.", "parameter": "\n", "processed_des_para": ["course", "progress", "return", "course", "usage", "datum", "include", "current", "previously", "license", "user"]}
{"http_verb": "GET ", "uri": " /practiceExamQuizProgress ", "processed_uri": ["practice", "exam", "quiz", "progress"], "description": " PracticeExamQuizProgress returns a record of attempts for taking any Quizzes or Practice Exams on Cloud Courses. ", "parameter": " \n", "processed_des_para": ["practice", "exam", "quiz", "progress", "return", "record", "attempt", "take", "quiz", "practice", "exam", "cloud", "course"]}
{"http_verb": "GET ", "uri": "  /priority ", "processed_uri": ["priority"], "description": " Priorities allow you to align your organization’s skill development to business objectives, accelerate growth, and monitor progress over time. ", "parameter": "\n", "processed_des_para": ["priority", "allow", "align", "organization", "skill", "development", "business", "objective", "accelerate", "growth", "monitor", "progress", "time"]}
{"http_verb": "GET ", "uri": " /programAssessmentAttempts ", "processed_uri": ["program", "assessment", "attempts"], "description": " programAssessmentAttempts represents a detailed look at every attempt of taking a Tech Foundations Assessment from every user currently on the plan.  ", "parameter": " \n", "processed_des_para": ["program", "assessment", "attempt", "represent", "detailed", "look", "every", "attempt", "take", "tech", "foundation", "assessment", "every", "user", "currently", "plan"]}
{"http_verb": "GET ", "uri": " /programAssessmentUserOptions ", "processed_uri": ["program", "assessment", "user", "options"], "description": " ProgramAssessmentUserOptions represent a list of options for sessions of a User taking a Criterion Assessment. ", "parameter": " \n", "processed_des_para": ["program", "assessment", "user", "option", "represent", "list", "option", "session", "user", "take", "criterion", "assessment"]}
{"http_verb": "GET ", "uri": " /programUserProgress ", "processed_uri": ["program", "user", "progress"], "description": " programUserProgress represents an aggregate report for every user currently on the plan as a zoomed out view of programAssessmentAttempts. ", "parameter": "\n", "processed_des_para": ["program", "user", "progress", "represent", "aggregate", "report", "every", "user", "currently", "plan", "zoomed", "view", "program", "assessment", "attempt"]}
{"http_verb": "GET ", "uri": " /UserCertificationUploads ", "processed_uri": ["user", "certification", "uploads"], "description": " represents a list of the certifications that users have uploaded while on the plan.  ", "parameter": " \n", "processed_des_para": ["represent", "list", "certification", "user", "upload", "plan"]}
{"http_verb": "GET ", "uri": " /memberInvites ", "processed_uri": ["member", "invites"], "description": "  MemberInvites represent all invites that have been sent to Users for plan(s) associated with the provided API key. ", "parameter": "\n", "processed_des_para": ["member", "invite", "represent", "invite", "send", "user", "plan", "associate", "provide", "ap", "key"]}
{"http_verb": "GET ", "uri": " /planAdmins ", "processed_uri": ["plan", "admins"], "description": " PlanAdmins represent a list of Users that have special permissions to edit plan details and to create API keys. ", "parameter": " \n", "processed_des_para": ["plan", "admin", "represent", "list", "user", "special", "permission", "edit", "plan", "detail", "create", "ap", "key"]}
{"http_verb": "GET ", "uri": " /users ", "processed_uri": ["users"], "description": " Users represent a list of anyone that is currently using or has ever used a license on the Plan(s) associated with the provided API key. Users may also be team managers or plan admins with a license. ", "parameter": "\n", "processed_des_para": ["user", "represent", "list", "anyone", "currently", "use", "ever", "use", "license", "plan", "associate", "provide", "ap", "key", "user", "also", "team", "manager", "plan", "admin", "license"]}
{"http_verb": "DELETE ", "uri": " /cancelInvite ", "processed_uri": ["cancel", "invite"], "description": " Cancel an invite sent to a User. ", "parameter": " \n", "processed_des_para": ["cancel", "invite", "send", "user"]}
{"http_verb": "POST ", "uri": " /createUser ", "processed_uri": ["create", "user"], "description": " Create a User. ", "parameter": " \n", "processed_des_para": ["create", "user"]}
{"http_verb": "PUT ", "uri": " /editUser ", "processed_uri": ["edit", "user"], "description": "  Edit a User's information. ", "parameter": "\n", "processed_des_para": ["edit", "user", "information"]}
{"http_verb": "POST ", "uri": " /inviteMember ", "processed_uri": ["invite", "member"], "description": " Invite user to a plan. ", "parameter": " \n", "processed_des_para": ["invite", "user", "plan"]}
{"http_verb": "DELETE ", "uri": " /removeLicense ", "processed_uri": ["remove", "license"], "description": " Remove a User's license ", "parameter": " \n", "processed_des_para": ["remove", "user", "license"]}
{"http_verb": "DELETE ", "uri": " /removeUser ", "processed_uri": ["remove", "user"], "description": " Remove Users from your plan. If User is a manager/plan-admin, their license will be removed but they will stay on the plan.\n", "parameter": "", "processed_des_para": ["remove", "user", "plan", "user", "manager", "plan", "admin", "license", "remove", "stay", "plan"]}
{"http_verb": "GET ", "uri": " /contentSlugToId ", "processed_uri": ["content", "slug", "identifer"], "description": " ContentSlugToId represents a mapping from the contentSlug to an id. ", "parameter": " \n", "processed_des_para": ["content", "slug", "identifer", "represent", "mapping", "content", "slug", "identifer"]}
{"http_verb": "GET ", "uri": " /planInfo ", "processed_uri": ["plan", "info"], "description": " Returns information regarding a specific plan(s). ", "parameter": " ", "processed_des_para": ["return", "information", "regard", "specific", "plan"]}
