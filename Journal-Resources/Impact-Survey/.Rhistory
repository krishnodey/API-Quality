setwd("~/Documents/API-Quality/Journal-Resources/Understanding-Readability-Survey")
########################################################################
# Experiment Results
########################################################################
#acknowledgements
#This scirpt was originally written by Bonger et al. [1]. we updated and used it for our project.
#Bogner, J., Kotstein, S., & Pfaff, T. (2023). Do RESTful API design rules have an impact on the understandability of Web APIs?. Empirical software engineering, 28(6), 132.
#instructions
#in order to see the figures of plots, please use the zoom option for better ascpect ratio
# delete current environment variables --------
rm(list = ls(all.names = TRUE))
# install and load required packages -------
# (taken from https://stackoverflow.com/questions/4090169/elegant-way-to-check-for-missing-packages-and-install-them)
packageList <- c(
"Hmisc", "dplyr", "ggplot2", "tidyr", "corrplot", "likert", "effectsize", "scales", "lmtest"
)
newPackages <- packageList[!(packageList %in% installed.packages()[, "Package"])]
if (length(newPackages)) install.packages(newPackages)
for (p in packageList) {
library(p, character.only = TRUE)
}
# helper function to visually and statistically check the distribution of a data set
checkDataDistribution <- function(data, xaxis.title) {
hist(data, xlab = xaxis.title)
# Shapiro-Wilk test for non-normal distribution
# Null hypothesis with Shapiro-Wilk test is that "data" came from a normally distributed population,
# i.e. p-value <= 0.05 --> "data" is not normally distributed
shapiro.test(data)
}
# helper function to calculate the Timed Actual Understandability (TAU)
calculateTAU <- function(effectiveness, efficiency, maxEfficiency) {
effectiveness * (1 - (efficiency / maxEfficiency))
}
# read data ------------
data <- read.csv("results-survey.csv", na.strings = c("", "NA"), fileEncoding = "UTF-8-BOM")
print(data)
# demographic data
# distribution of professions
data %>%
select(Profession) %>%
table()
# distribution of developer perspective
data %>%
select(DeveloperPerspective) %>%
table()
# distribution of country
data %>%
select(Country) %>%
table()
# median participant stats
data %>%
#group_by(group_id) %>%
summarise(
numParticipants = n(),
medianYearsOfExperience = median(YearsOfExperience, na.rm = TRUE),
numKnowledgeOfRichardsonMaturityModel = sum(RichardsonMaturity, na.rm = TRUE),
medianRichardsonMaturityRating = median(MaturityLevel, na.rm = TRUE),
numDeveloper = sum(is_Developer),
numStudents = sum(is_Student),
numAcademia = sum(is_Academia),
numIndustry = n() - numStudents - numAcademia,
numCanada = sum(is_Canada)
)
# variable names for the antipatterns
antipatterns <- c(
"AmorphousEndpoint", "ContextlessResource", "CRUDyEndpoint",
"InconsistentDoc", "NonDescriptiveEndpoint", "NonHierarchicalNodes",
"NonPertinentDoc", "NonStandardEndpoint", "PluralizedNodes",
"UnversionedEndpoint", "ParameterTunneling", "InconsistentArchetype", "IdentifierAmbiguity", "FlatEndpoint"
)
# variable names for the patterns
patterns <- c(
"TidyEndpoint", "ContextualResource", "VerblessEndpoint",
"ConsistentDoc", "DescriptiveEndpoint", "HierarchicalNodes",
"PertinentDoc", "StandardEndpoint", "SingularizedNodes",
"VersionedEndpoint", "ParameterAdherence", "ConsistentArchetype", "IdentifierAnnotation", "StructuredEndpoint"
)
# calculate TAU for every questions
# p  = pattern
# ap = antipattern
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varPattern <- as.name(p)
varPatternTime <- as.name(paste(p, "Time", sep = ""))
varAntipattern <- as.name(ap)
varAntipatternTime <- as.name(paste(ap, "Time", sep = ""))
data <- data %>%
mutate("TAU_{{varPattern}}" := calculateTAU({{ varPattern }}, {{ varPatternTime }}, max({{ varPatternTime }}, {{ varAntipatternTime }}, na.rm = TRUE))) %>%
mutate("TAU_{{varAntipattern}}" := calculateTAU({{ varAntipattern }}, {{ varAntipatternTime }}, max({{ varPatternTime }}, {{ varAntipatternTime }}, na.rm = TRUE)))
}
# create custom data frame with understandability ratings and TAU for patterns and antipatterns
combinedUndDf <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(combinedUndDf) <- c("Pattern_rating_Und", "Pattern_TAU", "Antipattern_rating_Und", "Antipattern_TAU")
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varRatingPattern <- paste(p, "URating", sep = "")
varRatingAntipattern <- paste(ap, "URating", sep = "")
varTAUPattern <- paste("TAU", p, sep = "_")
varTAUAntipattern <- paste("TAU", ap, sep = "_")
#print(varRatingAntipattern)
#print(varTAUPattern)
# merge data frames
combinedUndDf <- rbind(combinedUndDf, data.frame(
Pattern_rating = data[[varRatingPattern]],
Pattern_TAU = data[[varTAUPattern]],
Antipattern_rating = data[[varRatingAntipattern]],
Antipattern_TAU = data[[varTAUAntipattern]]
))
}
print(combinedUndDf)
# Shapiro-Wilk test for non-normal distribution of understandability (replace value with the patterns or antipatters, i.e., 1 to 14)
p <- patterns[1]
ap <- antipatterns[1]
varP <- as.name(paste("TAU", p, sep = "_"))
print(varP)
varAP <- as.name(paste("TAU", ap, sep = "_"))
print(varAP)
checkDataDistribution(data[[varP]], varP)
checkDataDistribution(data[[varAP]], varAP)
# create custom data frame with readability ratings and TAU for all patterns and antipatterns
combinedReadDf <- data.frame(matrix(ncol = 4, nrow = 0))
colnames(combinedReadDf) <- c("Pattern_rating_Read", "Pattern_TAU", "Antipattern_rating_Read", "Antipattern_TAU")
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varRatingPattern <- paste(p, "RRating", sep = "")
varRatingAntipattern <- paste(ap, "RRating", sep = "")
varTAUPattern <- paste("TAU", p, sep = "_")
varTAUAntipattern <- paste("TAU", ap, sep = "_")
# merge data frames
combinedReadDf <- rbind(combinedReadDf, data.frame(
Pattern_rating = data[[varRatingPattern]],
Pattern_TAU = data[[varTAUPattern]],
Antipattern_rating = data[[varRatingAntipattern]],
Antipattern_TAU = data[[varTAUAntipattern]]
))
}
print(combinedReadDf)
# descriptive statistics
# calculate summary stats for all important performance metrics per individual patterns and antipatterns
descriptiveStats <- data.frame()
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varTAUP <- as.name(paste("TAU", p, sep = "_"))
varTAUAP <- as.name(paste("TAU", ap, sep = "_"))
varP <- as.name(paste(p, "", sep = ""))
varPTime <- as.name(paste(p, "Time", sep = ""))
varAP <- as.name(paste(ap, "", sep = ""))
varAPTime <- as.name(paste(ap, "Time", sep = ""))
descriptiveStats <- rbind(
descriptiveStats,
data %>% summarise(
rule = p,
mean_TAU_P := mean({{ varTAUP }}, na.rm = TRUE),
mean_TAU_AP := mean({{ varTAUAP }}, na.rm = TRUE),
mean_time_P := mean({{ varPTime }}, na.rm = TRUE),
mean_time_AP := mean({{ varAPTime }}, na.rm = TRUE),
correctAnswers_P := sum({{ varP }}, na.rm = TRUE),
correctAnswers_AP := sum({{ varAP }}, na.rm = TRUE),
answers_P := data %>% filter(!is.na({{ varP }})) %>% nrow(),
answers_AP := data %>% filter(!is.na({{ varAP }})) %>% nrow(),
correctPercent_P := scales::percent(sum({{ varP }}, na.rm = TRUE) / (data %>% filter(!is.na({{ varP }})) %>% nrow())),
correctPercent_AP := scales::percent(sum({{ varAP }}, na.rm = TRUE) / (data %>% filter(!is.na({{ varAP }})) %>% nrow())),
correctness_P := sum({{ varP }}, na.rm = TRUE) / (data %>% filter(!is.na({{ varP }})) %>% nrow()),
correctness_AP := sum({{ varAP }}, na.rm = TRUE) / (data %>% filter(!is.na({{ varAP }})) %>% nrow())
)
)
}
print(descriptiveStats)
# calculate more detailed descriptive stats per individual patterns and antipatterns (min, max, var)
descriptiveStatsDetails <- data.frame()
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varTAUP <- as.name(paste("TAU", p, sep = "_"))
varTAUAP <- as.name(paste("TAU", ap, sep = "_"))
varP <- as.name(paste(p, "", sep = ""))
varPTime <- as.name(paste(p, "Time", sep = ""))
varAP <- as.name(paste(ap, "", sep = ""))
varAPTime <- as.name(paste(ap, "Time", sep = ""))
descriptiveStatsDetails <- rbind(
descriptiveStatsDetails,
data %>% summarise(
rule = p,
min_TAU_P := min({{ varTAUP }}, na.rm = TRUE),
min_TAU_AP := min({{ varTAUAP }}, na.rm = TRUE),
max_TAU_P := max({{ varTAUP }}, na.rm = TRUE),
max_TAU_AP := max({{ varTAUAP }}, na.rm = TRUE),
var_TAU_P := var({{ varTAUP }}, na.rm = TRUE),
var_TAU_AP := var({{ varTAUAP }}, na.rm = TRUE),
min_time_AP := min({{ varPTime }}, na.rm = TRUE),
min_time_AP := min({{ varAPTime }}, na.rm = TRUE),
max_time_P := max({{ varPTime }}, na.rm = TRUE),
max_time_AP := max({{ varAPTime }}, na.rm = TRUE),
var_time_P := var({{ varPTime }}, na.rm = TRUE),
var_time_AP := var({{ varAPTime }}, na.rm = TRUE)
)
)
}
print(descriptiveStatsDetails)
# create a bar plot to easily compare correctPercent
barplotData <- rbind(
data.frame(
rule = descriptiveStats$rule,
value = descriptiveStats$correctness_P,
treatment = "pattern"
),
data.frame(
rule = descriptiveStats$rule,
value = descriptiveStats$correctness_AP,
treatment = "antipattern"
)
) %>% arrange(factor(rule, levels = rev(p))) %>%
mutate(index = row_number())
# use ggplot to print the grouped bar chart
ggplot(barplotData, aes(x = reorder(rule, index), y = value, fill = treatment)) +
geom_bar(
stat = "identity",
width = 0.5,
position = position_dodge(0.6)
) +
# colors for "antipatterns" and "patterns"
scale_fill_manual(values = c("#dd1100", "#0077dd")) +
# use percent for the scale and control space for the labels
scale_y_continuous(labels = scales::percent, expand = expansion(mult = c(0, .1))) +
# bar label text and positioninghttp://127.0.0.1:11415/graphics/plot_zoom_png?width=1119&height=779
geom_text(
aes(label = scales::percent(round(value, 2))),
position = position_dodge(0.6),
fontface = "bold",
size = 5,
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Correct answers", fill = "") +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
legend.position = "top"
) +
# flip the chart horizontally
coord_flip()
# create a bar plot to easily compare correctPercent
barplotData <- rbind(
data.frame(
rule = descriptiveStats$rule,
value = descriptiveStats$correctness_P,
treatment = "pattern"
),
data.frame(
rule = descriptiveStats$rule,
value = descriptiveStats$correctness_AP,
treatment = "antipattern"
)
) %>% arrange(factor(rule, levels = rev(p))) %>%
mutate(index = row_number())
# use ggplot to print the grouped bar chart
ggplot(barplotData, aes(x = reorder(rule, index), y = value, fill = treatment)) +
geom_bar(
stat = "identity",
width = 0.5,
position = position_dodge(0.6)
) +
# colors for "antipatterns" and "patterns"
scale_fill_manual(values = c("#dd1100", "#0077dd")) +
# use percent for the scale and control space for the labels
scale_y_continuous(labels = scales::percent, expand = expansion(mult = c(0, .1))) +
# bar label text and positioninghttp://127.0.0.1:11415/graphics/plot_zoom_png?width=1119&height=779
geom_text(
aes(label = scales::percent(round(value, 2))),
position = position_dodge(0.6),
fontface = "bold",
size = 5,
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Correct answers", fill = "") +
theme(
text = element_text(size = 18, face = "bold", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
legend.position = "top"
) +
# flip the chart horizontally
coord_flip()
# use ggplot to print the grouped bar chart
ggplot(barplotData, aes(x = reorder(rule, index), y = value, fill = treatment)) +
geom_bar(
stat = "identity",
width = 0.5,
position = position_dodge(0.6)
) +
# colors for "antipatterns" and "patterns"
scale_fill_manual(values = c("#dd1100", "#0077dd")) +
# use percent for the scale and control space for the labels
scale_y_continuous(labels = scales::percent, expand = expansion(mult = c(0, .1))) +
# bar label text and positioninghttp://127.0.0.1:11415/graphics/plot_zoom_png?width=1119&height=779
geom_text(
aes(label = scales::percent(round(value, 2))),
position = position_dodge(0.6),
fontface = "bold",
size = 5,
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Correct answers", fill = "") +
theme(
text = element_text(size = 18, face = "", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
legend.position = "top"
) +
# flip the chart horizontally
coord_flip()
# use ggplot to print the grouped bar chart
ggplot(barplotData, aes(x = reorder(rule, index), y = value, fill = treatment)) +
geom_bar(
stat = "identity",
width = 0.5,
position = position_dodge(0.6)
) +
# colors for "antipatterns" and "patterns"
scale_fill_manual(values = c("#dd1100", "#0077dd")) +
# use percent for the scale and control space for the labels
scale_y_continuous(labels = scales::percent, expand = expansion(mult = c(0, .1))) +
# bar label text and positioninghttp://127.0.0.1:11415/graphics/plot_zoom_png?width=1119&height=779
geom_text(
aes(label = scales::percent(round(value, 2))),
position = position_dodge(0.6),
fontface = "bold",
size = 5,
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Correct answers", fill = "") +
theme(
text = element_text(size = 18, face = "", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
legend.position = "top"
) +
# flip the chart horizontally
coord_flip()
# use ggplot to print the grouped bar chart
ggplot(barplotData, aes(x = reorder(rule, index), y = value, fill = treatment)) +
geom_bar(
stat = "identity",
width = 0.5,
position = position_dodge(0.6)
) +
# colors for "antipatterns" and "patterns"
scale_fill_manual(values = c("#dd1100", "#0077dd")) +
# use percent for the scale and control space for the labels
scale_y_continuous(labels = scales::percent, expand = expansion(mult = c(0, .1))) +
# bar label text and positioninghttp://127.0.0.1:11415/graphics/plot_zoom_png?width=1119&height=779
geom_text(
aes(label = scales::percent(round(value, 2))),
position = position_dodge(0.6),
fontface = "bold",
size = 5,
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Correct answers", fill = "") +
theme(
text = element_text(size = 18, family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
legend.position = "top"
) +
# flip the chart horizontally
coord_flip()
# use ggplot to print the grouped bar chart
ggplot(barplotData, aes(x = reorder(rule, index), y = value, fill = treatment)) +
geom_bar(
stat = "identity",
width = 0.5,
position = position_dodge(0.6)
) +
# colors for "antipatterns" and "patterns"
scale_fill_manual(values = c("#dd1100", "#0077dd")) +
# use percent for the scale and control space for the labels
scale_y_continuous(labels = scales::percent, expand = expansion(mult = c(0, .1))) +
# bar label text and positioninghttp://127.0.0.1:11415/graphics/plot_zoom_png?width=1119&height=779
geom_text(
aes(label = scales::percent(round(value, 2))),
position = position_dodge(0.6),
size = 5,
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Correct answers", fill = "") +
theme(
text = element_text(size = 18, family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16),
legend.position = "top"
) +
# flip the chart horizontally
coord_flip()
