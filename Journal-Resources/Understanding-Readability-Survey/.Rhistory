geom_text(
aes(label = sprintf("%.2f", round(cohens.d, 2))),
size = 5.1,
fontface = "bold",
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Cohen's d") +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16)
) +
# flip the chart horizontally
coord_flip()
# calculate correlation between perceived understandability and actual understandability (TAU)
correlationUndResults <- data.frame()
corrMthd <- "kendall"
# for each individual rule
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varRatingP <- paste(p, "URating", sep = "")
varRatingAP <- paste(ap, "URating", sep = "")
varTAUP <- paste("TAU", p, sep = "_")
varTAUAP <- paste("TAU", ap, sep = "_")
corP <- cor.test(
data[[varRatingP]],
data[[varTAUP]],
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
corAP <- cor.test(
data[[varRatingAP]],
data[[varTAUAP]],
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
correlationUndResults <- rbind(correlationUndResults,
data.frame(
rule = p,
P_correlation = corP$estimate,
P_p.value = corP$p.value,
AP_correlation = corAP$estimate,
AP_p.value = corAP$p.value
),
make.row.names = FALSE
)
}
print(correlationUndResults)
# adjust p-values with Holm-Bonferroni and format them
correlationUndResults <- correlationUndResults %>%
mutate(P_p.value = format.pval(
p.adjust(P_p.value, method = "holm"),
digits = 4, eps = 0.001
)
) %>%
mutate(AP_p.value = format.pval(
p.adjust(AP_p.value, method = "holm"),
digits = 4, eps = 0.001
)
)
print(correlationUndResults)
# for all rules combined
corFR <- cor.test(
combinedUndDf$Pattern_rating,
combinedUndDf$Pattern_TAU,
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
corIR <- cor.test(
combinedUndDf$Antipattern_rating,
combinedUndDf$Antipattern_TAU,
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
correlationUndResults <- rbind(correlationUndResults,
data.frame(
rule = "All rules combined",
P_correlation = corP$estimate,
P_p.value = format.pval(corP$p.value, digits = 4, eps = 0.001),
AP_correlation = corAP$estimate,
AP_p.value = format.pval(corAP$p.value, digits = 4, eps = 0.001)
),
make.row.names = FALSE
)
print(correlationUndResults)
# regression results for each individual rule
df <- data.frame()
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varRatingP <- paste(p, "URating", sep = "")
varRatingAP <- paste(ap, "URating", sep = "")
varTAUP <- paste("TAU", p, sep = "_")
varTAUAP <- paste("TAU", ap, sep = "_")
resP <- lm(
as.formula(paste(varTAUP, "~", varRatingP)),
data = data
)
resAP <- lm(
as.formula(paste(varTAUAP, "~", varRatingAP)),
data = data
)
df <- rbind(df,
data.frame(
rule = ap,
P_adjustedR2 = summary(resP)$adj.r.squared,
P_p.value = format.pval(summary(resP)$coefficients[8], digits = 4, eps = 0.001),
AP_adjustedR2 = summary(resAP)$adj.r.squared,
AP_p.value = format.pval(summary(resAP)$coefficients[8], digits = 4, eps = 0.001)
),
make.row.names = FALSE
)
}
print(df)
df %>% arrange(AP_adjustedR2) %>%
print
# visualize adjusted R-squared values for violation
barplotData <- df %>%
select(rule, AP_adjustedR2)
# use ggplot to print the bar chart
ggplot(barplotData, aes(x = reorder(rule, AP_adjustedR2), y = AP_adjustedR2)) +
geom_bar(
stat = "identity",
width = 0.8,
fill = "#dd1100"
) +
# control space for the labels
scale_y_continuous(expand = expansion(mult = c(0.01, 0.12))) +
# bar label text and positioning
geom_text(
aes(
label = sprintf("%.2f", round(AP_adjustedR2, 2)),
# fix label placement for negative numbers
y = ifelse(AP_adjustedR2 > 0, AP_adjustedR2 + 0.001, AP_adjustedR2 - 0.025)
),
size = 5,
fontface = "bold",
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Adjusted R-squared") +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16)
) +
# flip the chart horizontally
coord_flip()
descriptiveStats <- data.frame()
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varTAUP <- as.name(paste("TAU", p, sep = "_"))
varTAUAP <- as.name(paste("TAU", ap, sep = "_"))
varP <- as.name(paste(p, "", sep = ""))
varAP <- as.name(paste(ap, "", sep = ""))
varP_rating <- as.name(paste(varP, "RRating", sep = ""))
varAP_rating <- as.name(paste(varAP, "RRating", sep = ""))
descriptiveStats <- rbind(
descriptiveStats,
data %>% summarise(
rule = p,
median_rating_P := median({{ varP_rating }}, na.rm = TRUE),
median_rating_AP := median({{ varAP_rating }}, na.rm = TRUE),
mean_rating_P := round(mean({{ varP_rating }}, na.rm = TRUE), 2),
mean_rating_AP := round(mean({{ varAP_rating }}, na.rm = TRUE), 2),
mean_TAU_P := mean({{ varTAUP }}, na.rm = TRUE),
mean_TAU_AP := mean({{ varTAUAP }}, na.rm = TRUE),
correctPercent_P := scales::percent(sum({{ varP }}, na.rm = TRUE) / (data %>% filter(!is.na({{ varP }})) %>% nrow())),
correctPercent_AP := scales::percent(sum({{ varAP }}, na.rm = TRUE) / (data %>% filter(!is.na({{ varAP }})) %>% nrow()))
)
)
}
print(descriptiveStats)
# calculate more detailed descriptive stats per individual patterns and antipatterns (min, max, var)
descriptiveStatsDetails <- data.frame()
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varP_rating <- as.name(paste(p, "RRating", sep = ""))
varAP_rating <- as.name(paste(ap, "RRating", sep = ""))
descriptiveStatsDetails <- rbind(
descriptiveStatsDetails,
data %>% summarise(
rule = p,
min_rating_P := min({{ varP_rating }}, na.rm = TRUE),
min_rating_AP := min({{ varAP_rating }}, na.rm = TRUE),
max_rating_P := max({{ varP_rating }}, na.rm = TRUE),
max_rating_AP := max({{ varAP_rating }}, na.rm = TRUE),
var_rating_P := var({{ varP_rating }}, na.rm = TRUE),
var_rating_AP := var({{ varAP_rating }}, na.rm = TRUE)
)
)
}
print(descriptiveStatsDetails)
# create custom likert plots for perceived readability ratings
ratings <- data.frame()
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varRatingP <- as.name(paste(p, "RRating", sep = ""))
varRatingAP <- as.name(paste(ap, "RRating", sep = ""))
P1 <- data %>% filter({{ varRatingP }} == 1) %>% nrow() * -1
P2 <- data %>% filter({{ varRatingP }} == 2) %>% nrow() * -1
AP1 <- data %>% filter({{ varRatingAP }} == 1) %>% nrow()
AP2 <- data %>% filter({{ varRatingAP }} == 2) %>% nrow()
ratings <- rbind(ratings,
data.frame(
rule = as.character(p),
countP1 = P1,
countP2 = P2,
countAP1 = AP1,
countAP2 = AP2
)
)
}
print(ratings)
# melt the data frame into long format and create factor for ratings
ratings_long <- reshape2::melt(ratings, id.vars = "rule")
ratings_long$variable <- factor(
ratings_long$variable,
levels = c("countP1", "countP2", "countAP1", "countAP2"),
labels = c("Very easy (pattern)", "Easy (pattern)", "Very easy (antipattern)", "Easy (antipattern)")
)
#print(ratings_long)
# order according to categories
ratings_long <- ratings_long %>%
arrange(factor(rule, levels = rev(p))) %>%
mutate(index = row_number())
#print(ratings_long)
# create break values to avoid negative numbers
break_values <- append(pretty(ratings_long$value), c(30, 40, 50))
# create the plot
ggplot(ratings_long, aes(x = reorder(rule, index), y = value, fill = variable)) +
geom_bar(stat = "identity") +
theme_classic() +
# hide y axis
theme(
axis.line.y = element_blank(),
axis.ticks.y = element_blank()
) +
labs(x = "", y = "# of readability ratings per difficulty level", fill = "") +
# set absolute numbers to avoid negatives and stretch axis the same in both directions
scale_y_continuous(
limits = c(-75, 75),
breaks = break_values,
labels = abs(break_values)
) +
# colors for the 4 counts
scale_fill_manual(values = c("#0077dd", "lightblue", "#dd1100", "#ff7e73")) +
# bar label text and positioning
geom_text(
aes(label = abs(value)),
position = position_stack(vjust = 0.5),
fontface = "bold",
size = 5.5,
color = "white"
) +
# add vertical line in the middle
geom_hline(yintercept = 0, size = 0.75) +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
legend.text = element_text(size = 16),
legend.position = "top"
) +
# flip the chart horizontally
coord_flip()
# start hypothesis testing
# due to multiple hypotheses, we will use the Holm-Bonferroni correction to adjust the computed p-values; the confidence level is therefore set to 0.05 here
confLevel <- 0.05
# calculate Wilcoxon–Mann–Whitney test
# standard implementation from the `stats` package (asymptotic approximation with ties)
testResults <- data.frame()
# for individual rules
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varRatingP <- paste(p, "RRating", sep = "")
varRatingAP <- paste(ap, "RRating", sep = "")
w <- wilcox.test(
x = data[[varRatingAP]],
y = data[[varRatingP]],
alternative = "greater",
conf.level = confLevel
)
# calculate the effect size with Cohens d
d <- cohens_d(data[[varRatingAP]], data[[varRatingP]])
#print(d)
# create results data frame
rule <- c(p)
U.value <- c(w$statistic)
p.value <- c(w$p.value)
cohens.d <- c(d$Cohens_d)
testResults <- rbind(testResults,
data.frame(rule, U.value, p.value, cohens.d),
make.row.names = FALSE
)
}
print(testResults)
# adjust p-values with Holm-Bonferroni and format them
testResults <- testResults %>%
mutate(p.value = format.pval(
p.adjust(p.value, method = "holm"),
digits = 4, eps = 0.001
)
)
print(testResults)
# for all rules combined
w <- wilcox.test(
x = combinedReadDf$Pattern_rating,
y = combinedReadDf$Antipattern_rating,
alternative = "greater",
conf.level = confLevel
)
d <- cohens_d(combinedReadDf$Pattern_rating, combinedReadDf$Antipattern_rating)
rule <- c("All rules combined")
U.value <- c(w$statistic)
p.value <- c(format.pval(w$p.value, digits = 4, eps = 0.001))
cohens.d <- c(d$Cohens_d)
testResults <- rbind(testResults,
data.frame(rule, U.value, p.value, cohens.d),
make.row.names = FALSE
)
print(testResults)
# visualize d values with bar plot
barplotData <- testResults %>%
filter(rule != "All rules combined")
# use ggplot to print the bar chart
ggplot(barplotData, aes(x = reorder(rule, cohens.d), y = cohens.d)) +
geom_bar(
stat = "identity",
width = 0.8,
fill = "#0077dd"
) +
# control space for the labels
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
# bar label text and positioning
geom_text(
aes(label = sprintf("%.2f", round(cohens.d, 2))),
size = 5.1,
fontface = "bold",
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Cohen's d") +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16)
) +
# flip the chart horizontally
coord_flip()
# calculate correlation between perceived readability and actual understandability (TAU)
correlationReadResults <- data.frame()
corrMthd <- "kendall"
# for each individual rule
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varRatingP <- paste(p, "RRating", sep = "")
varRatingAP <- paste(ap, "RRating", sep = "")
varTAUP <- paste("TAU", p, sep = "_")
varTAUAP <- paste("TAU", ap, sep = "_")
corP <- cor.test(
data[[varRatingP]],
data[[varTAUP]],
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
corAP <- cor.test(
data[[varRatingAP]],
data[[varTAUAP]],
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
correlationReadResults <- rbind(correlationReadResults,
data.frame(
rule = p,
P_correlation = corP$estimate,
P_p.value = corP$p.value,
AP_correlation = corAP$estimate,
AP_p.value = corAP$p.value
),
make.row.names = FALSE
)
}
print(correlationReadResults)
# adjust p-values with Holm-Bonferroni and format them
correlationReadResults <- correlationReadResults %>%
mutate(P_p.value = format.pval(
p.adjust(P_p.value, method = "holm"),
digits = 4, eps = 0.001
)
) %>%
mutate(AP_p.value = format.pval(
p.adjust(AP_p.value, method = "holm"),
digits = 4, eps = 0.001
)
)
print(correlationReadResults)
# for all rules combined
corFR <- cor.test(
combinedReadDf$Pattern_rating,
combinedReadDf$Pattern_TAU,
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
corIR <- cor.test(
combinedReadDf$Antipattern_rating,
combinedReadDf$Antipattern_TAU,
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
correlationReadResults <- rbind(correlationReadResults,
data.frame(
rule = "All rules combined",
P_correlation = corP$estimate,
P_p.value = format.pval(corP$p.value, digits = 4, eps = 0.001),
AP_correlation = corAP$estimate,
AP_p.value = format.pval(corAP$p.value, digits = 4, eps = 0.001)
),
make.row.names = FALSE
)
print(correlationReadResults)
# regression results for each individual rule
df <- data.frame()
for (i in seq_along(patterns)) {
p <- patterns[i]
ap <- antipatterns[i]
varRatingP <- paste(p, "RRating", sep = "")
varRatingAP <- paste(ap, "RRating", sep = "")
varTAUP <- paste("TAU", p, sep = "_")
varTAUAP <- paste("TAU", ap, sep = "_")
resP <- lm(
as.formula(paste(varTAUP, "~", varRatingP)),
data = data
)
resAP <- lm(
as.formula(paste(varTAUAP, "~", varRatingAP)),
data = data
)
df <- rbind(df,
data.frame(
rule = ap,
P_adjustedR2 = summary(resP)$adj.r.squared,
P_p.value = format.pval(summary(resP)$coefficients[8], digits = 4, eps = 0.001),
AP_adjustedR2 = summary(resAP)$adj.r.squared,
AP_p.value = format.pval(summary(resAP)$coefficients[8], digits = 4, eps = 0.001)
),
make.row.names = FALSE
)
}
print(df)
df %>% arrange(AP_adjustedR2) %>%
print
# visualize adjusted R-squared values for violation
barplotData <- df %>%
select(rule, AP_adjustedR2)
# use ggplot to print the bar chart
ggplot(barplotData, aes(x = reorder(rule, AP_adjustedR2), y = AP_adjustedR2)) +
geom_bar(
stat = "identity",
width = 0.8,
fill = "#dd1100"
) +
# control space for the labels
scale_y_continuous(expand = expansion(mult = c(0.01, 0.12))) +
# bar label text and positioning
geom_text(
aes(
label = sprintf("%.2f", round(AP_adjustedR2, 2)),
# fix label placement for negative numbers
y = ifelse(AP_adjustedR2 > 0, AP_adjustedR2 + 0.001, AP_adjustedR2 - 0.025)
),
size = 5,
fontface = "bold",
hjust = -0.05
) +
theme_classic() +
labs(x = "", y = "Adjusted R-squared") +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16)
) +
# flip the chart horizontally
coord_flip()
