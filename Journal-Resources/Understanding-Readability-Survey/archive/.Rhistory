data %>% select(TAUIR_RC401) %>% filter(!is.na(TAUIR_RC401)) %>%
mutate(version = 2, ruleGroup = 5) %>% rename(TAU = TAUIR_RC401),
data %>% select(TAUFR_RC415) %>% filter(!is.na(TAUFR_RC415)) %>%
mutate(version = 1, ruleGroup = 6) %>% rename(TAU = TAUFR_RC415),
data %>% select(TAUIR_RC415) %>% filter(!is.na(TAUIR_RC415)) %>%
mutate(version = 2, ruleGroup = 6) %>% rename(TAU = TAUIR_RC415)
) %>%
mutate(version = factor(version, levels = c(1, 2), labels = c("Rule", "Violation"))) %>%
mutate(ruleGroup = factor(ruleGroup, levels = c(1:6), labels = c("#7: NoTunnel", "#8: GETRetrieve", "#9: POSTCreate", "#10: NoRC200Error", "#11: RC401", "#12: RC415")))
ggplot(stripPlotData, aes(x = version, y = TAU, fill = ruleGroup)) +
geom_jitter(aes(color = version), width = .25) +
theme_classic() +
# group by rule
facet_grid(. ~ ruleGroup) +
# set color scale for versions
scale_color_manual(values = c("#0077dd", "#dd1100")) +
# set scale for y axis
ylim(0.00, 1.00) +
# add median with special color
stat_summary(fun = "median", geom = "point", shape = 18, size = 7, color = "#ffa600d8") +
labs(x = "Treatment", y = "TAU") +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 14),
legend.position = "none"
)
# start hypothesis testing
# due to multiple hypotheses, we will use the Holm-Bonferroni correction to adjust the computed p-values; the confidence level is therefore set to 0.05 here
confLevel <- 0.05
# calculate Wilcoxon–Mann–Whitney test
# standard implementation from the `stats` package (asymptotic approximation with ties)
# for individual rules
testResults <- data.frame()
for (var in ruleNames) {
varTAUFR <- paste("TAUFR", var, sep = "_")
varTAUIR <- paste("TAUIR", var, sep = "_")
w <- wilcox.test(
x = data[[varTAUFR]],
y = data[[varTAUIR]],
alternative = "greater",
conf.level = confLevel
)
# calculate the effect size with Cohens d
d <- cohens_d(data[[varTAUFR]], data[[varTAUIR]])
# create results data frame
rule <- c(var)
U.value <- c(w$statistic)
p.value <- c(w$p.value)
cohens.d <- c(d$Cohens_d)
testResults <- rbind(testResults,
data.frame(rule, U.value, p.value, cohens.d),
make.row.names = FALSE
)
}
print(testResults)
# adjust p-values with Holm-Bonferroni and format them
testResults <- testResults %>%
mutate(p.value = format.pval(
p.adjust(p.value, method = "holm"),
digits = 4, eps = 0.001
)
)
print(testResults)
# for all rules combined
w <- wilcox.test(
x = combinedDf$FR_TAU,
y = combinedDf$IR_TAU,
alternative = "greater",
conf.level = confLevel
)
d <- cohens_d(combinedDf$FR_TAU, combinedDf$IR_TAU)
rule <- c("All rules combined")
U.value <- c(w$statistic)
p.value <- c(format.pval(w$p.value, digits = 4, eps = 0.001))
cohens.d <- c(d$Cohens_d)
testResults <- rbind(testResults,
data.frame(rule, U.value, p.value, cohens.d),
make.row.names = FALSE
)
print(testResults)
# visualize d values with bar plot
barplotData <- testResults %>%
filter(rule != "All rules combined" & rule != "PathHierarchy3")
# use ggplot to print the bar chart
ggplot(barplotData, aes(x = reorder(rule, cohens.d), y = cohens.d)) +
geom_bar(
stat = "identity",
width = 0.8,
fill = "#0077dd"
) +
# control space for the labels
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
# bar label text and positioning
geom_text(
aes(label = sprintf("%.2f", round(cohens.d, 2))),
size = 5.1,
fontface = "bold",
hjust = -0.05
) +
theme_classic() +
labs(x = "Rule", y = "Cohen's d") +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16)
) +
# flip the chart horizontally
coord_flip()
# calculate descriptive statistics for perceived understandability ratings
descriptiveStats <- data.frame()
for (var in ruleNames) {
varTAUFR <- as.name(paste("TAUFR", var, sep = "_"))
varTAUIR <- as.name(paste("TAUIR", var, sep = "_"))
varFR <- as.name(paste(var, "FR", sep = ""))
varIR <- as.name(paste(var, "IR", sep = ""))
varFR_rating <- as.name(paste(var, "FR_rating", sep = ""))
varIR_rating <- as.name(paste(var, "IR_rating", sep = ""))
descriptiveStats <- rbind(
descriptiveStats,
data %>% summarise(
rule = var,
median_rating_FR := median({{ varFR_rating }}, na.rm = TRUE),
median_rating_IR := median({{ varIR_rating }}, na.rm = TRUE),
mean_rating_FR := round(mean({{ varFR_rating }}, na.rm = TRUE), 2),
mean_rating_IR := round(mean({{ varIR_rating }}, na.rm = TRUE), 2),
mean_TAU_FR := mean({{ varTAUFR }}, na.rm = TRUE),
mean_TAU_IR := mean({{ varTAUIR }}, na.rm = TRUE),
correctPercent_FR := scales::percent(sum({{ varFR }}, na.rm = TRUE) / (data %>% filter(!is.na({{ varFR }})) %>% nrow())),
correctPercent_IR := scales::percent(sum({{ varIR }}, na.rm = TRUE) / (data %>% filter(!is.na({{ varIR }})) %>% nrow()))
)
)
}
print(descriptiveStats)
# calculate more detailed descriptive stats per individual rule (min, max, var)
descriptiveStatsDetails <- data.frame()
for (var in ruleNames) {
varFR_rating <- as.name(paste(var, "FR_rating", sep = ""))
varIR_rating <- as.name(paste(var, "IR_rating", sep = ""))
descriptiveStatsDetails <- rbind(
descriptiveStatsDetails,
data %>% summarise(
rule = var,
min_rating_FR := min({{ varFR_rating }}, na.rm = TRUE),
min_rating_IR := min({{ varIR_rating }}, na.rm = TRUE),
max_rating_FR := max({{ varFR_rating }}, na.rm = TRUE),
max_rating_IR := max({{ varIR_rating }}, na.rm = TRUE),
var_rating_FR := var({{ varFR_rating }}, na.rm = TRUE),
var_rating_IR := var({{ varIR_rating }}, na.rm = TRUE)
)
)
}
print(descriptiveStatsDetails)
# create custom likert plots for perceived understandability ratings
ratings <- data.frame()
for (var in ruleNames) {
var <- as.name(var)
varRatingFR <- as.name(paste(var, "FR_rating", sep = ""))
varRatingIR <- as.name(paste(var, "IR_rating", sep = ""))
FR1 <- data %>% filter({{ varRatingFR }} == 1) %>% nrow() * -1
FR2 <- data %>% filter({{ varRatingFR }} == 2) %>% nrow() * -1
IR1 <- data %>% filter({{ varRatingIR }} == 1) %>% nrow()
IR2 <- data %>% filter({{ varRatingIR }} == 2) %>% nrow()
ratings <- rbind(ratings,
data.frame(
rule = as.character(var),
countFR1 = FR1,
countFR2 = FR2,
countIR2 = IR2,
countIR1 = IR1
)
)
}
print(ratings)
# melt the data frame into long format and create factor for ratings
ratings_long <- reshape2::melt(ratings, id.vars = "rule")
ratings_long$variable <- factor(
ratings_long$variable,
levels = c("countFR1", "countFR2", "countIR1", "countIR2"),
labels = c("Very easy (rule)", "Easy (rule)", "Very easy (violation)", "Easy (violation)")
)
print(ratings_long)
# order according to categories
ratings_long <- ratings_long %>%
arrange(factor(rule, levels = rev(ruleNames))) %>%
mutate(index = row_number())
print(ratings_long)
# create break values to avoid negative numbers
break_values <- append(pretty(ratings_long$value), c(30, 40, 50))
print(break_values)
# create the plot
ggplot(ratings_long, aes(x = reorder(rule, index), y = value, fill = variable)) +
geom_bar(stat = "identity") +
theme_classic() +
# hide y axis
theme(
axis.line.y = element_blank(),
axis.ticks.y = element_blank()
) +
labs(x = "Rule", y = "# of ratings per difficulty level", fill = "") +
# set absolute numbers to avoid negatives and stretch axis the same in both directions
scale_y_continuous(
limits = c(-51, 51),
breaks = break_values,
labels = abs(break_values)
) +
# colors for the 4 counts
scale_fill_manual(values = c("#0077dd", "lightblue", "#dd1100", "#ff7e73")) +
# bar label text and positioning
geom_text(
aes(label = abs(value)),
position = position_stack(vjust = 0.5),
fontface = "bold",
size = 5.5,
color = "white"
) +
# add vertical line in the middle
geom_hline(yintercept = 0, size = 0.75) +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 18),
axis.text.x = element_text(size = 16),
axis.text.y = element_text(size = 16),
legend.text = element_text(size = 16),
legend.position = "top"
) +
# flip the chart horizontally
coord_flip()
# start hypothesis testing
# due to multiple hypotheses, we will use the Holm-Bonferroni correction to adjust the computed p-values; the confidence level is therefore set to 0.05 here
confLevel <- 0.05
# calculate Wilcoxon–Mann–Whitney test
# standard implementation from the `stats` package (asymptotic approximation with ties)
testResults <- data.frame()
# for individual rules
for (var in ruleNames) {
varRatingFR <- paste(var, "FR_rating", sep = "")
varRatingIR <- paste(var, "IR_rating", sep = "")
w <- wilcox.test(
x = data[[varRatingIR]],
y = data[[varRatingFR]],
alternative = "greater",
conf.level = confLevel
)
# calculate the effect size with Cohens d
d <- cohens_d(data[[varRatingIR]], data[[varRatingFR]])
# create results data frame
rule <- c(var)
U.value <- c(w$statistic)
p.value <- c(w$p.value)
cohens.d <- c(d$Cohens_d)
testResults <- rbind(testResults,
data.frame(rule, U.value, p.value, cohens.d),
make.row.names = FALSE
)
}
print(testResults)
# adjust p-values with Holm-Bonferroni and format them
testResults <- testResults %>%
mutate(p.value = format.pval(
p.adjust(p.value, method = "holm"),
digits = 4, eps = 0.001
)
)
print(combinedDf)
# for all rules combined
w <- wilcox.test(
x = combinedDf$IR_rating,
y = combinedDf$FR_rating,
alternative = "greater",
conf.level = confLevel
)
d <- cohens_d(combinedDf$IR_rating, combinedDf$FR_rating)
rule <- c("All rules combined")
U.value <- c(w$statistic)
p.value <- c(format.pval(w$p.value, digits = 4, eps = 0.001))
cohens.d <- c(d$Cohens_d)
testResults <- rbind(testResults,
data.frame(rule, U.value, p.value, cohens.d),
make.row.names = FALSE
)
print(testResults)
# visualize d values with bar plot
barplotData <- testResults %>%
filter(rule != "All rules combined" & rule != "PathHierarchy3" &
rule != "VerbController" & rule != "RC415")
# use ggplot to print the bar chart
ggplot(barplotData, aes(x = reorder(rule, cohens.d), y = cohens.d)) +
geom_bar(
stat = "identity",
width = 0.8,
fill = "#0077dd"
) +
# control space for the labels
scale_y_continuous(expand = expansion(mult = c(0, .1))) +
# bar label text and positioning
geom_text(
aes(label = sprintf("%.2f", round(cohens.d, 2))),
size = 5.1,
fontface = "bold",
hjust = -0.05
) +
theme_classic() +
labs(x = "Rule", y = "Cohen's d") +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16)
) +
# flip the chart horizontally
coord_flip()
# calculate correlation between perceived understandability and actual understandability (TAU)
correlationResults <- data.frame()
corrMthd <- "kendall"
# for each individual rule
for (var in ruleNames) {
varRatingFR <- paste(var, "FR_rating", sep = "")
varRatingIR <- paste(var, "IR_rating", sep = "")
varTAUFR <- paste("TAUFR", var, sep = "_")
varTAUIR <- paste("TAUIR", var, sep = "_")
corFR <- cor.test(
data[[varRatingFR]],
data[[varTAUFR]],
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
corIR <- cor.test(
data[[varRatingIR]],
data[[varTAUIR]],
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
correlationResults <- rbind(correlationResults,
data.frame(
rule = var,
FR_correlation = corFR$estimate,
FR_p.value = corFR$p.value,
IR_correlation = corIR$estimate,
IR_p.value = corIR$p.value
),
make.row.names = FALSE
)
}
print(correlationResults)
# adjust p-values with Holm-Bonferroni and format them
correlationResults <- correlationResults %>%
mutate(FR_p.value = format.pval(
p.adjust(FR_p.value, method = "holm"),
digits = 4, eps = 0.001
)
) %>%
mutate(IR_p.value = format.pval(
p.adjust(IR_p.value, method = "holm"),
digits = 4, eps = 0.001
)
)
print(correlationResults)
# for all rules combined
corFR <- cor.test(
combinedDf$FR_rating,
combinedDf$FR_TAU,
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
corIR <- cor.test(
combinedDf$IR_rating,
combinedDf$IR_TAU,
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
correlationResults <- rbind(correlationResults,
data.frame(
rule = "All rules combined",
FR_correlation = corFR$estimate,
FR_p.value = format.pval(corFR$p.value, digits = 4, eps = 0.001),
IR_correlation = corIR$estimate,
IR_p.value = format.pval(corIR$p.value, digits = 4, eps = 0.001)
),
make.row.names = FALSE
)
print(correlationResults)
# regression results for each individual rule
df <- data.frame()
for (var in ruleNames) {
varRatingFR <- paste(var, "FR_rating", sep = "")
varRatingIR <- paste(var, "IR_rating", sep = "")
varTAUFR <- paste("TAUFR", var, sep = "_")
varTAUIR <- paste("TAUIR", var, sep = "_")
resFR <- lm(
as.formula(paste(varTAUFR, "~", varRatingFR)),
data = data
)
resIR <- lm(
as.formula(paste(varTAUIR, "~", varRatingIR)),
data = data
)
df <- rbind(df,
data.frame(
rule = var,
FR_adjustedR2 = summary(resFR)$adj.r.squared,
FR_p.value = format.pval(summary(resFR)$coefficients[8], digits = 4, eps = 0.001),
IR_adjustedR2 = summary(resIR)$adj.r.squared,
IR_p.value = format.pval(summary(resIR)$coefficients[8], digits = 4, eps = 0.001)
),
make.row.names = FALSE
)
}
print(df)
f %>% arrange(IR_adjustedR2) %>%
print
df %>% arrange(IR_adjustedR2) %>%
print
# visualize adjusted R-squared values for violation
barplotData <- df %>%
select(rule, IR_adjustedR2)
print(barplotData)
# use ggplot to print the bar chart
ggplot(barplotData, aes(x = reorder(rule, IR_adjustedR2), y = IR_adjustedR2)) +
geom_bar(
stat = "identity",
width = 0.8,
fill = "#dd1100"
) +
# control space for the labels
scale_y_continuous(expand = expansion(mult = c(0.01, 0.12))) +
# bar label text and positioning
geom_text(
aes(
label = sprintf("%.2f", round(IR_adjustedR2, 2)),
# fix label placement for negative numbers
y = ifelse(IR_adjustedR2 > 0, IR_adjustedR2 + 0.001, IR_adjustedR2 - 0.025)
),
size = 5,
fontface = "bold",
hjust = -0.05
) +
theme_classic() +
labs(x = "Rule", y = "Adjusted R-squared") +
theme(
text = element_text(size = 16, face = "bold", family = "sans"),
axis.title = element_text(size = 16),
axis.text.x = element_text(size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 16),
legend.text = element_text(size = 16)
) +
# flip the chart horizontally
coord_flip()
# regression results for each individual rule
df <- data.frame()
for (var in ruleNames) {
varRatingFR <- paste(var, "FR_rating", sep = "")
varRatingIR <- paste(var, "IR_rating", sep = "")
varTAUFR <- paste("TAUFR", var, sep = "_")
varTAUIR <- paste("TAUIR", var, sep = "_")
resFR <- lm(
as.formula(paste(varTAUFR, "~", varRatingFR)),
data = data
)
resIR <- lm(
as.formula(paste(varTAUIR, "~", varRatingIR)),
data = data
)
df <- rbind(df,
data.frame(
rule = var,
FR_adjustedR2 = summary(resFR)$adj.r.squared,
FR_p.value = format.pval(summary(resFR)$coefficients[8], digits = 4, eps = 0.001),
IR_adjustedR2 = summary(resIR)$adj.r.squared,
IR_p.value = format.pval(summary(resIR)$coefficients[8], digits = 4, eps = 0.001)
),
make.row.names = FALSE
)
}
print(df)
# for all rules combined
corFR <- cor.test(
combinedDf$FR_rating,
combinedDf$FR_TAU,
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
corIR <- cor.test(
combinedDf$IR_rating,
combinedDf$IR_TAU,
method = corrMthd,
alternative = "less",
conf.level = confLevel
)
correlationResults <- rbind(correlationResults,
data.frame(
rule = "All rules combined",
FR_correlation = corFR$estimate,
FR_p.value = format.pval(corFR$p.value, digits = 4, eps = 0.001),
IR_correlation = corIR$estimate,
IR_p.value = format.pval(corIR$p.value, digits = 4, eps = 0.001)
),
make.row.names = FALSE
)
print(correlationResults)
